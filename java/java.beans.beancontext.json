{"entries": [{"type": "Interface", "desc": " The BeanContext acts a logical hierarchical container for JavaBeans.", "name": "BeanContext", "link": "BeanContext"}, {"type": "Interface", "desc": " JavaBeans wishing to be nested within, and obtain a reference to their execution environment, or context, as defined by the BeanContext sub-interface shall implement this interface.", "name": "BeanContextChild", "link": "BeanContextChild"}, {"type": "Interface", "name": "BeanContextChildComponentProxy", "link": "BeanContextChildComponentProxy"}, {"type": "Interface", "desc": " This interface is implemented by BeanContexts' that have an AWT Container associated with them.", "name": "BeanContextContainerProxy", "link": "BeanContextContainerProxy"}, {"type": "Interface", "desc": " Compliant BeanContexts fire events on this interface when the state of the membership of the BeanContext changes.", "name": "BeanContextMembershipListener", "link": "BeanContextMembershipListener"}, {"type": "Interface", "desc": " This interface is implemented by a JavaBean that does not directly have a BeanContext(Child) associated with it (via implementing that interface or a subinterface thereof), but has a public BeanContext(Child) delegated from it.", "name": "BeanContextProxy", "link": "BeanContextProxy"}, {"type": "Interface", "desc": " One of the primary functions of a BeanContext is to act a as rendezvous between JavaBeans, and BeanContextServiceProviders.", "name": "BeanContextServiceProvider", "link": "BeanContextServiceProvider"}, {"type": "Interface", "desc": "A BeanContextServiceProvider implementor who wishes to provide explicit information about the services their bean may provide shall implement a BeanInfo class that implements this BeanInfo subinterface and provides explicit information about the methods, properties, events, etc, of their services.", "name": "BeanContextServiceProviderBeanInfo", "link": "BeanContextServiceProviderBeanInfo"}, {"type": "Interface", "name": "BeanContextServiceRevokedListener", "link": "BeanContextServiceRevokedListener"}, {"type": "Interface", "desc": " The BeanContextServices interface provides a mechanism for a BeanContext to expose generic \"services\" to the BeanContextChild objects within.", "name": "BeanContextServices", "link": "BeanContextServices"}, {"type": "Interface", "name": "BeanContextServicesListener", "link": "BeanContextServicesListener"}, {"type": "Class", "desc": " This is a general support class to provide support for implementing the BeanContextChild protocol.", "name": "BeanContextChildSupport", "link": "BeanContextChildSupport"}, {"type": "Class", "name": "BeanContextEvent", "link": "BeanContextEvent"}, {"type": "Class", "name": "BeanContextMembershipEvent", "link": "BeanContextMembershipEvent"}, {"type": "Class", "desc": " This event type is used by the BeanContextServicesListener in order to identify the service being registered.", "name": "BeanContextServiceAvailableEvent", "link": "BeanContextServiceAvailableEvent"}, {"type": "Class", "name": "BeanContextServiceRevokedEvent", "link": "BeanContextServiceRevokedEvent"}, {"type": "Class", "desc": " This helper class provides a utility implementation of the java.beans.beancontext.BeanContextServices interface.", "name": "BeanContextServicesSupport", "link": "BeanContextServicesSupport"}, {"type": "Class", "desc": "subclasses may subclass this nested class to add behaviors for each BeanContextServicesProvider.", "name": "BeanContextServicesSupport.BCSSServiceProvider", "link": "BeanContextServicesSupport.BCSSServiceProvider"}, {"type": "Class", "desc": "This helper class provides a utility implementation of the java.beans.beancontext.BeanContext interface.", "name": "BeanContextSupport", "link": "BeanContextSupport"}, {"type": "Class", "desc": "protected final subclass that encapsulates an iterator but implements a noop remove() method.", "name": "BeanContextSupport.BCSIterator", "link": "BeanContextSupport.BCSIterator"}], "desc": "Provides classes and interfaces relating to bean context. A bean context is a container for beans and defines the execution environment for the beans it contains. There can be several beans in a single bean context, and a bean context can be nested within another bean context. This package also contains events and listener interface for beans being added and removed from a bean context. "}