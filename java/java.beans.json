{"entries": [{"type": "Interface", "desc": " This interface is designed to work in collusion with java.beans.Beans.instantiate.", "name": "AppletInitializer", "link": "AppletInitializer"}, {"type": "Interface", "name": "BeanInfo", "link": "BeanInfo"}, {"type": "Interface", "desc": "A customizer class provides a complete custom GUI for customizing a target Java Bean.", "name": "Customizer", "link": "Customizer"}, {"type": "Interface", "desc": " This interface is intended to be implemented by, or delegated from, instances of java.beans.beancontext.BeanContext, in order to propagate to its nested hierarchy of java.beans.beancontext.BeanContextChild instances, the current \"designTime\" property.", "name": "DesignMode", "link": "DesignMode"}, {"type": "Interface", "desc": "An ExceptionListener is notified of internal exceptions.", "name": "ExceptionListener", "link": "ExceptionListener"}, {"type": "Interface", "desc": "A \"PropertyChange\" event gets fired whenever a bean changes a \"bound\" property.", "name": "PropertyChangeListener", "link": "PropertyChangeListener"}, {"type": "Interface", "desc": "A PropertyEditor class provides support for GUIs that want to allow users to edit a property value of a given type.", "name": "PropertyEditor", "link": "PropertyEditor"}, {"type": "Interface", "desc": "A VetoableChange event gets fired whenever a bean changes a \"constrained\" property.", "name": "VetoableChangeListener", "link": "VetoableChangeListener"}, {"type": "Interface", "desc": "Under some circumstances a bean may be run on servers where a GUI is not available.", "name": "Visibility", "link": "Visibility"}, {"type": "Class", "desc": "A BeanDescriptor provides global information about a \"bean\", including its Java class, its displayName, etc.", "name": "BeanDescriptor", "link": "BeanDescriptor"}, {"type": "Class", "desc": "This class provides some general purpose beans control methods.", "name": "Beans", "link": "Beans"}, {"type": "Class", "name": "DefaultPersistenceDelegate", "link": "DefaultPersistenceDelegate"}, {"type": "Class", "name": "Encoder", "link": "Encoder"}, {"type": "Class", "name": "EventHandler", "link": "EventHandler"}, {"type": "Class", "desc": "An EventSetDescriptor describes a group of events that a given Java bean fires.", "name": "EventSetDescriptor", "link": "EventSetDescriptor"}, {"type": "Class", "name": "Expression", "link": "Expression"}, {"type": "Class", "desc": "The FeatureDescriptor class is the common baseclass for PropertyDescriptor, EventSetDescriptor, and MethodDescriptor, etc.", "name": "FeatureDescriptor", "link": "FeatureDescriptor"}, {"type": "Class", "desc": "An \"IndexedPropertyChange\" event gets delivered whenever a component that conforms to the JavaBeans\u2122 specification (a \"bean\") changes a bound indexed property.", "name": "IndexedPropertyChangeEvent", "link": "IndexedPropertyChangeEvent"}, {"type": "Class", "desc": "An IndexedPropertyDescriptor describes a property that acts like an array and has an indexed read and/or indexed write method to access specific elements of the array.", "name": "IndexedPropertyDescriptor", "link": "IndexedPropertyDescriptor"}, {"type": "Class", "desc": "The Introspector class provides a standard way for tools to learn about the properties, events, and methods supported by a target Java Bean.", "name": "Introspector", "link": "Introspector"}, {"type": "Class", "desc": "A MethodDescriptor describes a particular method that a Java Bean supports for external access from other components.", "name": "MethodDescriptor", "link": "MethodDescriptor"}, {"type": "Class", "desc": "The ParameterDescriptor class allows bean implementors to provide additional information on each of their parameters, beyond the low level type information provided by the java.lang.reflect.Method class.", "name": "ParameterDescriptor", "link": "ParameterDescriptor"}, {"type": "Class", "desc": "The PersistenceDelegate class takes the responsibility for expressing the state of an instance of a given class in terms of the methods in the class's public API.", "name": "PersistenceDelegate", "link": "PersistenceDelegate"}, {"type": "Class", "desc": "A \"PropertyChange\" event gets delivered whenever a bean changes a \"bound\" or \"constrained\" property.", "name": "PropertyChangeEvent", "link": "PropertyChangeEvent"}, {"type": "Class", "name": "PropertyChangeListenerProxy", "link": "PropertyChangeListenerProxy"}, {"type": "Class", "desc": "This is a utility class that can be used by beans that support bound properties.", "name": "PropertyChangeSupport", "link": "PropertyChangeSupport"}, {"type": "Class", "desc": "A PropertyDescriptor describes one property that a Java Bean exports via a pair of accessor methods.", "name": "PropertyDescriptor", "link": "PropertyDescriptor"}, {"type": "Class", "desc": "The PropertyEditorManager can be used to locate a property editor for any given type name.", "name": "PropertyEditorManager", "link": "PropertyEditorManager"}, {"type": "Class", "desc": "This is a support class to help build property editors.", "name": "PropertyEditorSupport", "link": "PropertyEditorSupport"}, {"type": "Class", "desc": "This is a support class to make it easier for people to provide BeanInfo classes.", "name": "SimpleBeanInfo", "link": "SimpleBeanInfo"}, {"type": "Class", "name": "Statement", "link": "Statement"}, {"type": "Class", "name": "VetoableChangeListenerProxy", "link": "VetoableChangeListenerProxy"}, {"type": "Class", "desc": "This is a utility class that can be used by beans that support constrained properties.", "name": "VetoableChangeSupport", "link": "VetoableChangeSupport"}, {"type": "Class", "name": "XMLDecoder", "link": "XMLDecoder"}, {"type": "Class", "name": "XMLEncoder", "link": "XMLEncoder"}, {"type": "Exception", "desc": "Thrown when an exception happens during Introspection.", "name": "IntrospectionException", "link": "IntrospectionException"}, {"type": "Exception", "desc": "A PropertyVetoException is thrown when a proposed change to a property represents an unacceptable value.", "name": "PropertyVetoException", "link": "PropertyVetoException"}, {"type": "Annotation", "desc": "An annotation on a constructor that shows how the parameters of  that constructor correspond to the constructed object's getter  methods.", "name": "ConstructorProperties", "link": "ConstructorProperties"}, {"type": "Annotation", "name": "Transient", "link": "Transient"}], "desc": "Contains classes related to developing beans -- components based on the JavaBeans\u2122 architecture. A few of the classes are used by beans while they run in an application. For example, the event classes are used by beans that fire property and vetoable change events (see PropertyChangeEvent). However, most of the classes in this package are meant to be used by a bean editor (that is, a development environment for customizing and putting together beans to create an application). In particular, these classes help the bean editor create a user interface that the user can use to customize the bean. For example, a bean may contain a property of a special type that a bean editor may not know how to handle. By using the PropertyEditor interface, a bean developer can provide an editor for this special type.  To minimize the resources used by a bean, the classes used by bean editors are loaded only when the bean is being edited. They are not needed while the bean is running in an application and therefore not loaded. This information is kept in what's called a bean-info (see BeanInfo).  Unless explicitly stated, null values or empty Strings are not valid parameters for the methods in this package. You may expect to see exceptions if these parameters are used.  Long-Term Persistence As of v1.4, the java.beans package provides support for long-term persistence -- reading and writing a bean as a textual representation of its property values. The property values are treated as beans, and are recursively read or written to capture their publicly available state. This approach is suitable for long-term storage because it relies only on public API, rather than the likely-to-change private implementation.  Note: The persistence scheme cannot automatically instantiate custom inner classes, such as you might use for event handlers. By using the EventHandler class instead of inner classes for custom event handlers, you can avoid this problem.   You read and write beans in XML format using the XMLDecoder and XMLEncoder classes, respectively. One notable feature of the persistence scheme is that reading in a bean requires no special knowledge of the bean.  Writing out a bean, on the other hand, sometimes requires special knowledge of the bean's type. If the bean's state can be expressed using only the no-argument constructor and public getter and setter methods for properties, no special knowledge is required. Otherwise, the bean requires a custom persistence delegate -- an object that is in charge of writing out beans of a particular type. All classes provided in the JDK that descend from java.awt.Component, as well as all their properties, automatically have persistence delegates.  If you need (or choose) to provide a persistence delegate for a bean, you can do so either by using a DefaultPersistenceDelegate instance or by creating your own subclass of PersistenceDelegate. If the only reason a bean needs a persistence delegate is because you want to invoke the bean's constructor with property values as arguments, you can create the bean's persistence delegate with the one-argument DefaultPersistenceDelegate constructor. Otherwise, you need to implement your own persistence delegate, for which you're likely to need the following classes:  PersistenceDelegate The abstract class from which all persistence delegates descend.   Your subclass should use its knowledge of the bean's type to provide    whatever Statements and Expressions   are necessary to create the bean   and restore its state. Statement Represents the invocation of a single method on an object.   Includes a set of arguments to the method. Expression A subclass of Statement   used for methods that return a value.  Once you create a persistence delegate, you register it using the setPersistenceDelegate method of XMLEncoder.  Related Documentation For overview, architecture, and tutorial documentation, please see: JavaBeans, a trail in The Java Tutorial.  Long-Term Persistence, an article in The Swing Connection. "}