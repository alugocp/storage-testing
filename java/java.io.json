{"entries": [{"type": "Interface", "name": "Closeable", "link": "Closeable"}, {"type": "Interface", "name": "DataInput", "link": "DataInput"}, {"type": "Interface", "name": "DataOutput", "link": "DataOutput"}, {"type": "Interface", "desc": "Only the identity of the class of an Externalizable instance is written in the serialization stream and it is the responsibility of the class to save and restore the contents of its instances.", "name": "Externalizable", "link": "Externalizable"}, {"type": "Interface", "desc": "A filter for abstract pathnames.", "name": "FileFilter", "link": "FileFilter"}, {"type": "Interface", "desc": "Instances of classes that implement this interface are used to filter filenames.", "name": "FilenameFilter", "link": "FilenameFilter"}, {"type": "Interface", "name": "Flushable", "link": "Flushable"}, {"type": "Interface", "desc": "ObjectInput extends the DataInput interface to include the reading of objects.", "name": "ObjectInput", "link": "ObjectInput"}, {"type": "Interface", "desc": "Callback interface to allow validation of objects within a graph.", "name": "ObjectInputValidation", "link": "ObjectInputValidation"}, {"type": "Interface", "desc": "ObjectOutput extends the DataOutput interface to include writing of objects.", "name": "ObjectOutput", "link": "ObjectOutput"}, {"type": "Interface", "desc": "Constants written into the Object Serialization Stream.", "name": "ObjectStreamConstants", "link": "ObjectStreamConstants"}, {"type": "Interface", "desc": "Serializability of a class is enabled by the class implementing the java.io.Serializable interface.", "name": "Serializable", "link": "Serializable"}, {"type": "Class", "name": "BufferedInputStream", "link": "BufferedInputStream"}, {"type": "Class", "desc": "The class implements a buffered output stream.", "name": "BufferedOutputStream", "link": "BufferedOutputStream"}, {"type": "Class", "desc": "Reads text from a character-input stream, buffering characters so as to provide for the efficient reading of characters, arrays, and lines.", "name": "BufferedReader", "link": "BufferedReader"}, {"type": "Class", "desc": "Writes text to a character-output stream, buffering characters so as to provide for the efficient writing of single characters, arrays, and strings.", "name": "BufferedWriter", "link": "BufferedWriter"}, {"type": "Class", "name": "ByteArrayInputStream", "link": "ByteArrayInputStream"}, {"type": "Class", "desc": "This class implements an output stream in which the data is written into a byte array.", "name": "ByteArrayOutputStream", "link": "ByteArrayOutputStream"}, {"type": "Class", "desc": "This class implements a character buffer that can be used as a character-input stream.", "name": "CharArrayReader", "link": "CharArrayReader"}, {"type": "Class", "desc": "This class implements a character buffer that can be used as an Writer.", "name": "CharArrayWriter", "link": "CharArrayWriter"}, {"type": "Class", "desc": "Methods to access the character-based console device, if any, associated with the current Java virtual machine.", "name": "Console", "link": "Console"}, {"type": "Class", "desc": "A data input stream lets an application read primitive Java data types from an underlying input stream in a machine-independent way.", "name": "DataInputStream", "link": "DataInputStream"}, {"type": "Class", "desc": "A data output stream lets an application write primitive Java data types to an output stream in a portable way.", "name": "DataOutputStream", "link": "DataOutputStream"}, {"type": "Class", "desc": "An abstract representation of file and directory pathnames.", "name": "File", "link": "File"}, {"type": "Class", "desc": "Instances of the file descriptor class serve as an opaque handle to the underlying machine-specific structure representing an open file, an open socket, or another source or sink of bytes.", "name": "FileDescriptor", "link": "FileDescriptor"}, {"type": "Class", "name": "FileInputStream", "link": "FileInputStream"}, {"type": "Class", "name": "FileOutputStream", "link": "FileOutputStream"}, {"type": "Class", "desc": "This class represents access to a file or directory.", "name": "FilePermission", "link": "FilePermission"}, {"type": "Class", "desc": "Convenience class for reading character files.", "name": "FileReader", "link": "FileReader"}, {"type": "Class", "desc": "Convenience class for writing character files.", "name": "FileWriter", "link": "FileWriter"}, {"type": "Class", "name": "FilterInputStream", "link": "FilterInputStream"}, {"type": "Class", "desc": "This class is the superclass of all classes that filter output streams.", "name": "FilterOutputStream", "link": "FilterOutputStream"}, {"type": "Class", "desc": "Abstract class for reading filtered character streams.", "name": "FilterReader", "link": "FilterReader"}, {"type": "Class", "desc": "Abstract class for writing filtered character streams.", "name": "FilterWriter", "link": "FilterWriter"}, {"type": "Class", "desc": "This abstract class is the superclass of all classes representing an input stream of bytes.", "name": "InputStream", "link": "InputStream"}, {"type": "Class", "name": "InputStreamReader", "link": "InputStreamReader"}, {"type": "Class", "desc": "This class incorrectly assumes that bytes adequately represent       characters.", "name": "LineNumberInputStream", "link": "LineNumberInputStream"}, {"type": "Class", "desc": "A buffered character-input stream that keeps track of line numbers.", "name": "LineNumberReader", "link": "LineNumberReader"}, {"type": "Class", "desc": "An ObjectInputStream deserializes primitive data and objects previously written using an ObjectOutputStream.", "name": "ObjectInputStream", "link": "ObjectInputStream"}, {"type": "Class", "desc": "Provide access to the persistent fields read from the input stream.", "name": "ObjectInputStream.GetField", "link": "ObjectInputStream.GetField"}, {"type": "Class", "desc": "An ObjectOutputStream writes primitive data types and graphs of Java objects to an OutputStream.", "name": "ObjectOutputStream", "link": "ObjectOutputStream"}, {"type": "Class", "desc": "Provide programmatic access to the persistent fields to be written to ObjectOutput.", "name": "ObjectOutputStream.PutField", "link": "ObjectOutputStream.PutField"}, {"type": "Class", "desc": "Serialization's descriptor for classes.", "name": "ObjectStreamClass", "link": "ObjectStreamClass"}, {"type": "Class", "desc": "A description of a Serializable field from a Serializable class.", "name": "ObjectStreamField", "link": "ObjectStreamField"}, {"type": "Class", "desc": "This abstract class is the superclass of all classes representing an output stream of bytes.", "name": "OutputStream", "link": "OutputStream"}, {"type": "Class", "name": "OutputStreamWriter", "link": "OutputStreamWriter"}, {"type": "Class", "desc": "A piped input stream should be connected to a piped output stream; the piped input stream then provides whatever data bytes are written to the piped output stream.", "name": "PipedInputStream", "link": "PipedInputStream"}, {"type": "Class", "desc": "A piped output stream can be connected to a piped input stream to create a communications pipe.", "name": "PipedOutputStream", "link": "PipedOutputStream"}, {"type": "Class", "desc": "Piped character-input streams.", "name": "PipedReader", "link": "PipedReader"}, {"type": "Class", "desc": "Piped character-output streams.", "name": "PipedWriter", "link": "PipedWriter"}, {"type": "Class", "name": "PrintStream", "link": "PrintStream"}, {"type": "Class", "desc": "Prints formatted representations of objects to a text-output stream.", "name": "PrintWriter", "link": "PrintWriter"}, {"type": "Class", "name": "PushbackInputStream", "link": "PushbackInputStream"}, {"type": "Class", "desc": "A character-stream reader that allows characters to be pushed back into the stream.", "name": "PushbackReader", "link": "PushbackReader"}, {"type": "Class", "desc": "Instances of this class support both reading and writing to a random access file.", "name": "RandomAccessFile", "link": "RandomAccessFile"}, {"type": "Class", "desc": "Abstract class for reading character streams.", "name": "Reader", "link": "Reader"}, {"type": "Class", "name": "SequenceInputStream", "link": "SequenceInputStream"}, {"type": "Class", "desc": "This class is for Serializable permissions.", "name": "SerializablePermission", "link": "SerializablePermission"}, {"type": "Class", "name": "StreamTokenizer", "link": "StreamTokenizer"}, {"type": "Class", "desc": "This class does not properly convert characters into bytes.", "name": "StringBufferInputStream", "link": "StringBufferInputStream"}, {"type": "Class", "desc": "A character stream whose source is a string.", "name": "StringReader", "link": "StringReader"}, {"type": "Class", "desc": "A character stream that collects its output in a string buffer, which can then be used to construct a string.", "name": "StringWriter", "link": "StringWriter"}, {"type": "Class", "desc": "Abstract class for writing to character streams.", "name": "Writer", "link": "Writer"}, {"type": "Exception", "desc": "Base class for character conversion exceptions.", "name": "CharConversionException", "link": "CharConversionException"}, {"type": "Exception", "desc": "Signals that an end of file or end of stream has been reached unexpectedly during input.", "name": "EOFException", "link": "EOFException"}, {"type": "Exception", "desc": "Signals that an attempt to open the file denoted by a specified pathname has failed.", "name": "FileNotFoundException", "link": "FileNotFoundException"}, {"type": "Exception", "desc": "Signals that an I/O operation has been interrupted.", "name": "InterruptedIOException", "link": "InterruptedIOException"}, {"type": "Exception", "desc": "Thrown when the Serialization runtime detects one of the following problems with a Class.", "name": "InvalidClassException", "link": "InvalidClassException"}, {"type": "Exception", "desc": "Indicates that one or more deserialized objects failed validation tests.", "name": "InvalidObjectException", "link": "InvalidObjectException"}, {"type": "Exception", "desc": "Signals that an I/O exception of some sort has occurred.", "name": "IOException", "link": "IOException"}, {"type": "Exception", "desc": "Thrown when serialization or deserialization is not active.", "name": "NotActiveException", "link": "NotActiveException"}, {"type": "Exception", "desc": "Thrown when an instance is required to have a Serializable interface.", "name": "NotSerializableException", "link": "NotSerializableException"}, {"type": "Exception", "desc": "Superclass of all exceptions specific to Object Stream classes.", "name": "ObjectStreamException", "link": "ObjectStreamException"}, {"type": "Exception", "desc": "Exception indicating the failure of an object read operation due to unread primitive data, or the end of data belonging to a serialized object in the stream.", "name": "OptionalDataException", "link": "OptionalDataException"}, {"type": "Exception", "desc": "Thrown when control information that was read from an object stream violates internal consistency checks.", "name": "StreamCorruptedException", "link": "StreamCorruptedException"}, {"type": "Exception", "desc": "Signals that a sync operation has failed.", "name": "SyncFailedException", "link": "SyncFailedException"}, {"type": "Exception", "name": "UncheckedIOException", "link": "UncheckedIOException"}, {"type": "Exception", "desc": "The Character Encoding is not supported.", "name": "UnsupportedEncodingException", "link": "UnsupportedEncodingException"}, {"type": "Exception", "name": "UTFDataFormatException", "link": "UTFDataFormatException"}, {"type": "Exception", "desc": "Signals that one of the ObjectStreamExceptions was thrown during a write operation.", "name": "WriteAbortedException", "link": "WriteAbortedException"}, {"type": "Error", "desc": "Thrown when a serious I/O error has occurred.", "name": "IOError", "link": "IOError"}], "desc": "Provides for system input and output through data streams, serialization and the file system. Unless otherwise noted, passing a null argument to a constructor or method in any class or interface in this package will cause a NullPointerException to be thrown. Package Specification  Java Object Serialization Specification  Related Documentation For overviews, tutorials, examples, guides, and tool documentation, please see: Serialization Enhancements "}