{"entries": [{"type": "Interface", "name": "Appendable", "link": "Appendable"}, {"type": "Interface", "desc": "An object that may hold resources (such as file or socket handles) until it is closed.", "name": "AutoCloseable", "link": "AutoCloseable"}, {"type": "Interface", "name": "CharSequence", "link": "CharSequence"}, {"type": "Interface", "name": "Cloneable", "link": "Cloneable"}, {"type": "Interface", "desc": "This interface imposes a total ordering on the objects of each class that implements it.", "name": null, "link": "Comparable"}, {"type": "Interface", "desc": "Implementing this interface allows an object to be the target of the \"for-each loop\" statement.", "name": null, "link": "Iterable"}, {"type": "Interface", "name": "Readable", "link": "Readable"}, {"type": "Interface", "name": "Runnable", "link": "Runnable"}, {"type": "Interface", "name": "Thread.UncaughtExceptionHandler", "link": "Thread.UncaughtExceptionHandler"}, {"type": "Class", "name": "Boolean", "link": "Boolean"}, {"type": "Class", "name": "Byte", "link": "Byte"}, {"type": "Class", "name": "Character", "link": "Character"}, {"type": "Class", "desc": "Instances of this class represent particular subsets of the Unicode character set.", "name": "Character.Subset", "link": "Character.Subset"}, {"type": "Class", "desc": "A family of character subsets representing the character blocks in the Unicode specification.", "name": "Character.UnicodeBlock", "link": "Character.UnicodeBlock"}, {"type": "Class", "name": null, "link": "Class"}, {"type": "Class", "desc": "A class loader is an object that is responsible for loading classes.", "name": "ClassLoader", "link": "ClassLoader"}, {"type": "Class", "desc": "Lazily associate a computed value with (potentially) every type.", "name": null, "link": "ClassValue"}, {"type": "Class", "name": "Compiler", "link": "Compiler"}, {"type": "Class", "name": "Double", "link": "Double"}, {"type": "Class", "desc": "This is the common base class of all Java language enumeration types.", "name": null, "link": "Enum"}, {"type": "Class", "name": "Float", "link": "Float"}, {"type": "Class", "name": null, "link": "InheritableThreadLocal"}, {"type": "Class", "name": "Integer", "link": "Integer"}, {"type": "Class", "name": "Long", "link": "Long"}, {"type": "Class", "name": "Math", "link": "Math"}, {"type": "Class", "name": "Number", "link": "Number"}, {"type": "Class", "name": "Object", "link": "Object"}, {"type": "Class", "name": "Package", "link": "Package"}, {"type": "Class", "name": "Process", "link": "Process"}, {"type": "Class", "desc": "This class is used to create operating system processes.", "name": "ProcessBuilder", "link": "ProcessBuilder"}, {"type": "Class", "desc": "Represents a source of subprocess input or a destination of subprocess output.", "name": "ProcessBuilder.Redirect", "link": "ProcessBuilder.Redirect"}, {"type": "Class", "name": "Runtime", "link": "Runtime"}, {"type": "Class", "desc": "This class is for runtime permissions.", "name": "RuntimePermission", "link": "RuntimePermission"}, {"type": "Class", "desc": "The security manager is a class that allows applications to implement a security policy.", "name": "SecurityManager", "link": "SecurityManager"}, {"type": "Class", "name": "Short", "link": "Short"}, {"type": "Class", "name": "StackTraceElement", "link": "StackTraceElement"}, {"type": "Class", "name": "StrictMath", "link": "StrictMath"}, {"type": "Class", "name": "String", "link": "String"}, {"type": "Class", "desc": "A thread-safe, mutable sequence of characters.", "name": "StringBuffer", "link": "StringBuffer"}, {"type": "Class", "desc": "A mutable sequence of characters.", "name": "StringBuilder", "link": "StringBuilder"}, {"type": "Class", "name": "System", "link": "System"}, {"type": "Class", "name": "Thread", "link": "Thread"}, {"type": "Class", "desc": "A thread group represents a set of threads.", "name": "ThreadGroup", "link": "ThreadGroup"}, {"type": "Class", "desc": "This class provides thread-local variables.", "name": null, "link": "ThreadLocal"}, {"type": "Class", "name": "Throwable", "link": "Throwable"}, {"type": "Class", "name": "Void", "link": "Void"}, {"type": "Enum", "name": "Character.UnicodeScript", "link": "Character.UnicodeScript"}, {"type": "Enum", "name": "ProcessBuilder.Redirect.Type", "link": "ProcessBuilder.Redirect.Type"}, {"type": "Enum", "desc": "A thread state.", "name": "Thread.State", "link": "Thread.State"}, {"type": "Exception", "desc": "Thrown when an exceptional arithmetic condition has occurred.", "name": "ArithmeticException", "link": "ArithmeticException"}, {"type": "Exception", "desc": "Thrown to indicate that an array has been accessed with an illegal index.", "name": "ArrayIndexOutOfBoundsException", "link": "ArrayIndexOutOfBoundsException"}, {"type": "Exception", "desc": "Thrown to indicate that an attempt has been made to store the wrong type of object into an array of objects.", "name": "ArrayStoreException", "link": "ArrayStoreException"}, {"type": "Exception", "desc": "Thrown to indicate that the code has attempted to cast an object to a subclass of which it is not an instance.", "name": "ClassCastException", "link": "ClassCastException"}, {"type": "Exception", "name": "ClassNotFoundException", "link": "ClassNotFoundException"}, {"type": "Exception", "name": "CloneNotSupportedException", "link": "CloneNotSupportedException"}, {"type": "Exception", "desc": "Thrown when an application tries to access an enum constant by name and the enum type contains no constant with the specified name.", "name": "EnumConstantNotPresentException", "link": "EnumConstantNotPresentException"}, {"type": "Exception", "name": "Exception", "link": "Exception"}, {"type": "Exception", "desc": "An IllegalAccessException is thrown when an application tries to reflectively create an instance (other than an array), set or get a field, or invoke a method, but the currently executing method does not have access to the definition of the specified class, field, method or constructor.", "name": "IllegalAccessException", "link": "IllegalAccessException"}, {"type": "Exception", "desc": "Thrown to indicate that a method has been passed an illegal or inappropriate argument.", "name": "IllegalArgumentException", "link": "IllegalArgumentException"}, {"type": "Exception", "desc": "Thrown to indicate that a thread has attempted to wait on an object's monitor or to notify other threads waiting on an object's monitor without owning the specified monitor.", "name": "IllegalMonitorStateException", "link": "IllegalMonitorStateException"}, {"type": "Exception", "desc": "Signals that a method has been invoked at an illegal or inappropriate time.", "name": "IllegalStateException", "link": "IllegalStateException"}, {"type": "Exception", "desc": "Thrown to indicate that a thread is not in an appropriate state for the requested operation.", "name": "IllegalThreadStateException", "link": "IllegalThreadStateException"}, {"type": "Exception", "desc": "Thrown to indicate that an index of some sort (such as to an array, to a string, or to a vector) is out of range.", "name": "IndexOutOfBoundsException", "link": "IndexOutOfBoundsException"}, {"type": "Exception", "name": "InstantiationException", "link": "InstantiationException"}, {"type": "Exception", "desc": "Thrown when a thread is waiting, sleeping, or otherwise occupied, and the thread is interrupted, either before or during the activity.", "name": "InterruptedException", "link": "InterruptedException"}, {"type": "Exception", "desc": "Thrown if an application tries to create an array with negative size.", "name": "NegativeArraySizeException", "link": "NegativeArraySizeException"}, {"type": "Exception", "desc": "Signals that the class doesn't have a field of a specified name.", "name": "NoSuchFieldException", "link": "NoSuchFieldException"}, {"type": "Exception", "desc": "Thrown when a particular method cannot be found.", "name": "NoSuchMethodException", "link": "NoSuchMethodException"}, {"type": "Exception", "name": "NullPointerException", "link": "NullPointerException"}, {"type": "Exception", "desc": "Thrown to indicate that the application has attempted to convert a string to one of the numeric types, but that the string does not have the appropriate format.", "name": "NumberFormatException", "link": "NumberFormatException"}, {"type": "Exception", "desc": "Common superclass of exceptions thrown by reflective operations in core reflection.", "name": "ReflectiveOperationException", "link": "ReflectiveOperationException"}, {"type": "Exception", "name": "RuntimeException", "link": "RuntimeException"}, {"type": "Exception", "desc": "Thrown by the security manager to indicate a security violation.", "name": "SecurityException", "link": "SecurityException"}, {"type": "Exception", "name": "StringIndexOutOfBoundsException", "link": "StringIndexOutOfBoundsException"}, {"type": "Exception", "desc": "Thrown when an application tries to access a type using a string representing the type's name, but no definition for the type with the specified name can be found.", "name": "TypeNotPresentException", "link": "TypeNotPresentException"}, {"type": "Exception", "desc": "Thrown to indicate that the requested operation is not supported.", "name": "UnsupportedOperationException", "link": "UnsupportedOperationException"}, {"type": "Error", "desc": "Thrown when an application tries to call an abstract method.", "name": "AbstractMethodError", "link": "AbstractMethodError"}, {"type": "Error", "desc": "Thrown to indicate that an assertion has failed.", "name": "AssertionError", "link": "AssertionError"}, {"type": "Error", "name": "BootstrapMethodError", "link": "BootstrapMethodError"}, {"type": "Error", "desc": "Thrown when the Java Virtual Machine detects a circularity in the superclass hierarchy of a class being loaded.", "name": "ClassCircularityError", "link": "ClassCircularityError"}, {"type": "Error", "desc": "Thrown when the Java Virtual Machine attempts to read a class file and determines that the file is malformed or otherwise cannot be interpreted as a class file.", "name": "ClassFormatError", "link": "ClassFormatError"}, {"type": "Error", "name": "Error", "link": "Error"}, {"type": "Error", "desc": "Signals that an unexpected exception has occurred in a static initializer.", "name": "ExceptionInInitializerError", "link": "ExceptionInInitializerError"}, {"type": "Error", "desc": "Thrown if an application attempts to access or modify a field, or to call a method that it does not have access to.", "name": "IllegalAccessError", "link": "IllegalAccessError"}, {"type": "Error", "desc": "Thrown when an incompatible class change has occurred to some class definition.", "name": "IncompatibleClassChangeError", "link": "IncompatibleClassChangeError"}, {"type": "Error", "name": "InstantiationError", "link": "InstantiationError"}, {"type": "Error", "desc": "Thrown to indicate some unexpected internal error has occurred in the Java Virtual Machine.", "name": "InternalError", "link": "InternalError"}, {"type": "Error", "name": "LinkageError", "link": "LinkageError"}, {"type": "Error", "name": "NoClassDefFoundError", "link": "NoClassDefFoundError"}, {"type": "Error", "desc": "Thrown if an application tries to access or modify a specified field of an object, and that object no longer has that field.", "name": "NoSuchFieldError", "link": "NoSuchFieldError"}, {"type": "Error", "desc": "Thrown if an application tries to call a specified method of a class (either static or instance), and that class no longer has a definition of that method.", "name": "NoSuchMethodError", "link": "NoSuchMethodError"}, {"type": "Error", "desc": "Thrown when the Java Virtual Machine cannot allocate an object because it is out of memory, and no more memory could be made available by the garbage collector.", "name": "OutOfMemoryError", "link": "OutOfMemoryError"}, {"type": "Error", "desc": "Thrown when a stack overflow occurs because an application recurses too deeply.", "name": "StackOverflowError", "link": "StackOverflowError"}, {"type": "Error", "name": "ThreadDeath", "link": "ThreadDeath"}, {"type": "Error", "desc": "Thrown when an unknown but serious exception has occurred in the Java Virtual Machine.", "name": "UnknownError", "link": "UnknownError"}, {"type": "Error", "name": "UnsatisfiedLinkError", "link": "UnsatisfiedLinkError"}, {"type": "Error", "desc": "Thrown when the Java Virtual Machine attempts to read a class file and determines that the major and minor version numbers in the file are not supported.", "name": "UnsupportedClassVersionError", "link": "UnsupportedClassVersionError"}, {"type": "Error", "desc": "Thrown when the \"verifier\" detects that a class file, though well formed, contains some sort of internal inconsistency or security problem.", "name": "VerifyError", "link": "VerifyError"}, {"type": "Error", "desc": "Thrown to indicate that the Java Virtual Machine is broken or has run out of resources necessary for it to continue operating.", "name": "VirtualMachineError", "link": "VirtualMachineError"}, {"type": "Annotation", "desc": "A program element annotated @Deprecated is one that programmers are discouraged from using, typically because it is dangerous, or because a better alternative exists.", "name": "Deprecated", "link": "Deprecated"}, {"type": "Annotation", "name": "FunctionalInterface", "link": "FunctionalInterface"}, {"type": "Annotation", "desc": "Indicates that a method declaration is intended to override a method declaration in a supertype.", "name": "Override", "link": "Override"}, {"type": "Annotation", "desc": "A programmer assertion that the body of the annotated method or constructor does not perform potentially unsafe operations on its varargs parameter.", "name": "SafeVarargs", "link": "SafeVarargs"}, {"type": "Annotation", "desc": "Indicates that the named compiler warnings should be suppressed in the annotated element (and in all program elements contained in the annotated element).", "name": "SuppressWarnings", "link": "SuppressWarnings"}], "desc": "Provides classes that are fundamental to the design of the Java programming language. The most important classes are Object, which is the root of the class hierarchy, and Class, instances of which represent classes at run time.  Frequently it is necessary to represent a value of primitive type as if it were an object. The wrapper classes Boolean, Character, Integer, Long, Float, and Double serve this purpose. An object of type Double, for example, contains a field whose type is double, representing that value in such a way that a reference to it can be stored in a variable of reference type. These classes also provide a number of methods for converting among primitive values, as well as supporting such standard methods as equals and hashCode. The Void class is a non-instantiable class that holds a reference to a Class object representing the type void.  The class Math provides commonly used mathematical functions such as sine, cosine, and square root. The classes String, StringBuffer, and StringBuilder similarly provide commonly used operations on character strings.  Classes ClassLoader, Process, ProcessBuilder, Runtime, SecurityManager, and System provide \"system operations\" that manage the dynamic loading of classes, creation of external processes, host environment inquiries such as the time of day, and enforcement of security policies.  Class Throwable encompasses objects that may be thrown by the throw statement. Subclasses of Throwable represent errors and exceptions.  Character Encodings  The specification of the java.nio.charset.Charset class describes the naming conventions for character encodings as well as the set of standard encodings that must be supported by every implementation of the Java platform."}