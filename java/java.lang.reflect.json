{"entries": [{"type": "Interface", "name": "AnnotatedArrayType", "link": "AnnotatedArrayType"}, {"type": "Interface", "desc": "Represents an annotated element of the program currently running in this VM.", "name": "AnnotatedElement", "link": "AnnotatedElement"}, {"type": "Interface", "name": "AnnotatedParameterizedType", "link": "AnnotatedParameterizedType"}, {"type": "Interface", "name": "AnnotatedType", "link": "AnnotatedType"}, {"type": "Interface", "name": "AnnotatedTypeVariable", "link": "AnnotatedTypeVariable"}, {"type": "Interface", "name": "AnnotatedWildcardType", "link": "AnnotatedWildcardType"}, {"type": "Interface", "name": "GenericArrayType", "link": "GenericArrayType"}, {"type": "Interface", "desc": "A common interface for all entities that declare type variables.", "name": "GenericDeclaration", "link": "GenericDeclaration"}, {"type": "Interface", "name": "InvocationHandler", "link": "InvocationHandler"}, {"type": "Interface", "desc": "Member is an interface that reflects identifying information about a single member (a field or a method) or a constructor.", "name": "Member", "link": "Member"}, {"type": "Interface", "desc": "ParameterizedType represents a parameterized type such as Collection<String>.", "name": "ParameterizedType", "link": "ParameterizedType"}, {"type": "Interface", "desc": "Type is the common superinterface for all types in the Java programming language.", "name": "Type", "link": "Type"}, {"type": "Interface", "desc": "TypeVariable is the common superinterface for type variables of kinds.", "name": null, "link": "TypeVariable"}, {"type": "Interface", "name": "WildcardType", "link": "WildcardType"}, {"type": "Class", "desc": "The AccessibleObject class is the base class for Field, Method and Constructor objects.", "name": "AccessibleObject", "link": "AccessibleObject"}, {"type": "Class", "name": "Array", "link": "Array"}, {"type": "Class", "name": null, "link": "Constructor"}, {"type": "Class", "name": "Executable", "link": "Executable"}, {"type": "Class", "name": "Field", "link": "Field"}, {"type": "Class", "name": "Method", "link": "Method"}, {"type": "Class", "name": "Modifier", "link": "Modifier"}, {"type": "Class", "desc": "Information about method parameters.", "name": "Parameter", "link": "Parameter"}, {"type": "Class", "name": "Proxy", "link": "Proxy"}, {"type": "Class", "desc": "The Permission class for reflective operations.", "name": "ReflectPermission", "link": "ReflectPermission"}, {"type": "Exception", "desc": "InvocationTargetException is a checked exception that wraps an exception thrown by an invoked method or constructor.", "name": "InvocationTargetException", "link": "InvocationTargetException"}, {"type": "Exception", "desc": "Thrown when a semantically malformed parameterized type is encountered by a reflective method that needs to instantiate it.", "name": "MalformedParameterizedTypeException", "link": "MalformedParameterizedTypeException"}, {"type": "Exception", "name": "MalformedParametersException", "link": "MalformedParametersException"}, {"type": "Exception", "name": "UndeclaredThrowableException", "link": "UndeclaredThrowableException"}, {"type": "Error", "desc": "Thrown when a syntactically malformed signature attribute is encountered by a reflective method that needs to interpret the generic signature information for a type, method or constructor.", "name": "GenericSignatureFormatError", "link": "GenericSignatureFormatError"}], "desc": "Provides classes and interfaces for obtaining reflective information about classes and objects. Reflection allows programmatic access to information about the fields, methods and constructors of loaded classes, and the use of reflected fields, methods, and constructors to operate on their underlying counterparts, within security restrictions.  AccessibleObject allows suppression of access checks if the necessary ReflectPermission is available.  Array provides static methods to dynamically create and access arrays.  Classes in this package, along with java.lang.Class accommodate applications such as debuggers, interpreters, object inspectors, class browsers, and services such as Object Serialization and JavaBeans that need access to either the public members of a target object (based on its runtime class) or the members declared by a given class."}