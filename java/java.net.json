{"entries": [{"type": "Interface", "desc": "This interface defines a factory for content handlers.", "name": "ContentHandlerFactory", "link": "ContentHandlerFactory"}, {"type": "Interface", "desc": "CookiePolicy implementations decide which cookies should be accepted and which should be rejected.", "name": "CookiePolicy", "link": "CookiePolicy"}, {"type": "Interface", "desc": "A CookieStore object represents a storage for cookie.", "name": "CookieStore", "link": "CookieStore"}, {"type": "Interface", "desc": "This interface defines a factory for datagram socket implementations.", "name": "DatagramSocketImplFactory", "link": "DatagramSocketImplFactory"}, {"type": "Interface", "desc": "A simple interface which provides a mechanism to map between a file name and a MIME type string.", "name": "FileNameMap", "link": "FileNameMap"}, {"type": "Interface", "desc": "Represents a family of communication protocols.", "name": "ProtocolFamily", "link": "ProtocolFamily"}, {"type": "Interface", "desc": "This interface defines a factory for socket implementations.", "name": "SocketImplFactory", "link": "SocketImplFactory"}, {"type": "Interface", "desc": "A socket option associated with a socket.", "name": null, "link": "SocketOption"}, {"type": "Interface", "desc": "Interface of methods to get/set socket options.", "name": "SocketOptions", "link": "SocketOptions"}, {"type": "Interface", "name": "URLStreamHandlerFactory", "link": "URLStreamHandlerFactory"}, {"type": "Class", "desc": "The class Authenticator represents an object that knows how to obtain authentication for a network connection.", "name": "Authenticator", "link": "Authenticator"}, {"type": "Class", "desc": "Represents channels for storing resources in the ResponseCache.", "name": "CacheRequest", "link": "CacheRequest"}, {"type": "Class", "desc": "Represent channels for retrieving resources from the ResponseCache.", "name": "CacheResponse", "link": "CacheResponse"}, {"type": "Class", "name": "ContentHandler", "link": "ContentHandler"}, {"type": "Class", "desc": "A CookieHandler object provides a callback mechanism to hook up a HTTP state management policy implementation into the HTTP protocol handler.", "name": "CookieHandler", "link": "CookieHandler"}, {"type": "Class", "name": "CookieManager", "link": "CookieManager"}, {"type": "Class", "desc": "This class represents a datagram packet.", "name": "DatagramPacket", "link": "DatagramPacket"}, {"type": "Class", "desc": "This class represents a socket for sending and receiving datagram packets.", "name": "DatagramSocket", "link": "DatagramSocket"}, {"type": "Class", "desc": "Abstract datagram and multicast socket implementation base class.", "name": "DatagramSocketImpl", "link": "DatagramSocketImpl"}, {"type": "Class", "desc": "An HttpCookie object represents an HTTP cookie, which carries state information between server and user agent.", "name": "HttpCookie", "link": "HttpCookie"}, {"type": "Class", "desc": "A URLConnection with support for HTTP-specific features.", "name": "HttpURLConnection", "link": "HttpURLConnection"}, {"type": "Class", "desc": "Provides methods to convert internationalized domain names (IDNs) between a normal Unicode representation and an ASCII Compatible Encoding (ACE) representation.", "name": "IDN", "link": "IDN"}, {"type": "Class", "desc": "This class represents an Internet Protocol version 4 (IPv4) address.", "name": "Inet4Address", "link": "Inet4Address"}, {"type": "Class", "desc": "This class represents an Internet Protocol version 6 (IPv6) address.", "name": "Inet6Address", "link": "Inet6Address"}, {"type": "Class", "desc": "This class represents an Internet Protocol (IP) address.", "name": "InetAddress", "link": "InetAddress"}, {"type": "Class", "desc": "This class implements an IP Socket Address (IP address + port number) It can also be a pair (hostname + port number), in which case an attempt will be made to resolve the hostname.", "name": "InetSocketAddress", "link": "InetSocketAddress"}, {"type": "Class", "desc": "This class represents a Network Interface address.", "name": "InterfaceAddress", "link": "InterfaceAddress"}, {"type": "Class", "desc": "A URL Connection to a Java ARchive (JAR) file or an entry in a JAR file.", "name": "JarURLConnection", "link": "JarURLConnection"}, {"type": "Class", "desc": "The multicast datagram socket class is useful for sending and receiving IP multicast packets.", "name": "MulticastSocket", "link": "MulticastSocket"}, {"type": "Class", "desc": "This class is for various network permissions.", "name": "NetPermission", "link": "NetPermission"}, {"type": "Class", "desc": "This class represents a Network Interface made up of a name, and a list of IP addresses assigned to this interface.", "name": "NetworkInterface", "link": "NetworkInterface"}, {"type": "Class", "desc": "The class PasswordAuthentication is a data holder that is used by Authenticator.", "name": "PasswordAuthentication", "link": "PasswordAuthentication"}, {"type": "Class", "desc": "This class represents a proxy setting, typically a type (http, socks) and a socket address.", "name": "Proxy", "link": "Proxy"}, {"type": "Class", "desc": "Selects the proxy server to use, if any, when connecting to the network resource referenced by a URL.", "name": "ProxySelector", "link": "ProxySelector"}, {"type": "Class", "desc": "Represents implementations of URLConnection caches.", "name": "ResponseCache", "link": "ResponseCache"}, {"type": "Class", "desc": "Represents a cache response originally retrieved through secure means, such as TLS.", "name": "SecureCacheResponse", "link": "SecureCacheResponse"}, {"type": "Class", "desc": "This class implements server sockets.", "name": "ServerSocket", "link": "ServerSocket"}, {"type": "Class", "desc": "This class implements client sockets (also called just \"sockets\").", "name": "Socket", "link": "Socket"}, {"type": "Class", "desc": "This class represents a Socket Address with no protocol attachment.", "name": "SocketAddress", "link": "SocketAddress"}, {"type": "Class", "name": "SocketImpl", "link": "SocketImpl"}, {"type": "Class", "desc": "This class represents access to a network via sockets.", "name": "SocketPermission", "link": "SocketPermission"}, {"type": "Class", "name": "StandardSocketOptions", "link": "StandardSocketOptions"}, {"type": "Class", "desc": "Represents a Uniform Resource Identifier (URI) reference.", "name": "URI", "link": "URI"}, {"type": "Class", "name": "URL", "link": "URL"}, {"type": "Class", "desc": "This class loader is used to load classes and resources from a search path of URLs referring to both JAR files and directories.", "name": "URLClassLoader", "link": "URLClassLoader"}, {"type": "Class", "name": "URLConnection", "link": "URLConnection"}, {"type": "Class", "desc": "Utility class for HTML form decoding.", "name": "URLDecoder", "link": "URLDecoder"}, {"type": "Class", "desc": "Utility class for HTML form encoding.", "name": "URLEncoder", "link": "URLEncoder"}, {"type": "Class", "desc": "Represents permission to access a resource or set of resources defined by a given url, and for a given set of user-settable request methods and request headers.", "name": "URLPermission", "link": "URLPermission"}, {"type": "Class", "name": "URLStreamHandler", "link": "URLStreamHandler"}, {"type": "Enum", "desc": "The type of the entity requesting authentication.", "name": "Authenticator.RequestorType", "link": "Authenticator.RequestorType"}, {"type": "Enum", "desc": "Represents the proxy type.", "name": "Proxy.Type", "link": "Proxy.Type"}, {"type": "Enum", "desc": "Defines the standard families of communication protocols.", "name": "StandardProtocolFamily", "link": "StandardProtocolFamily"}, {"type": "Exception", "desc": "Signals that an error occurred while attempting to bind a socket to a local address and port.", "name": "BindException", "link": "BindException"}, {"type": "Exception", "desc": "Signals that an error occurred while attempting to connect a socket to a remote address and port.", "name": "ConnectException", "link": "ConnectException"}, {"type": "Exception", "desc": "Thrown to indicate that a HTTP request needs to be retried but cannot be retried automatically, due to streaming mode being enabled.", "name": "HttpRetryException", "link": "HttpRetryException"}, {"type": "Exception", "desc": "Thrown to indicate that a malformed URL has occurred.", "name": "MalformedURLException", "link": "MalformedURLException"}, {"type": "Exception", "desc": "Signals that an error occurred while attempting to connect a socket to a remote address and port.", "name": "NoRouteToHostException", "link": "NoRouteToHostException"}, {"type": "Exception", "desc": "Signals that an ICMP Port Unreachable message has been received on a connected datagram.", "name": "PortUnreachableException", "link": "PortUnreachableException"}, {"type": "Exception", "desc": "Thrown to indicate that there is an error in the underlying protocol, such as a TCP error.", "name": "ProtocolException", "link": "ProtocolException"}, {"type": "Exception", "desc": "Thrown to indicate that there is an error creating or accessing a Socket.", "name": "SocketException", "link": "SocketException"}, {"type": "Exception", "desc": "Signals that a timeout has occurred on a socket read or accept.", "name": "SocketTimeoutException", "link": "SocketTimeoutException"}, {"type": "Exception", "desc": "Thrown to indicate that the IP address of a host could not be determined.", "name": "UnknownHostException", "link": "UnknownHostException"}, {"type": "Exception", "desc": "Thrown to indicate that an unknown service exception has occurred.", "name": "UnknownServiceException", "link": "UnknownServiceException"}, {"type": "Exception", "desc": "Checked exception thrown to indicate that a string could not be parsed as a URI reference.", "name": "URISyntaxException", "link": "URISyntaxException"}], "desc": "Provides the classes for implementing networking applications.  The java.net package can be roughly divided in two sections: A Low Level API, which deals with the        following abstractions: Addresses, which are networking identifiers,        like IP addresses. Sockets, which are basic bidirectional data communication        mechanisms. Interfaces, which describe network interfaces.  A High Level API, which deals with the following      abstractions: URIs, which represent        Universal Resource Identifiers. URLs, which represent        Universal Resource Locators. Connections, which represents connections to the resource        pointed to by URLs.  Addresses Addresses are used throughout the java.net APIs as either host   identifiers, or socket endpoint identifiers. The InetAddress class is the abstraction representing an   IP (Internet Protocol) address. It has two subclasses:  Inet4Address for IPv4 addresses. Inet6Address for IPv6 addresses. But, in most cases, there is no need to deal directly with the subclasses,   as the InetAddress abstraction should cover most of the needed   functionality. About IPv6 Not all systems have support for the IPv6 protocol, and while the Java   networking stack will attempt to detect it and use it transparently when   available, it is also possible to disable its use with a system property.   In the case where IPv6 is not available, or explicitly disabled,   Inet6Address are not valid arguments for most networking operations any   more. While methods like InetAddress.getByName(java.lang.String) are   guaranteed not to return an Inet6Address when looking up host names, it   is possible, by passing literals, to create such an object. In which   case, most methods, when called with an Inet6Address will throw an   Exception. Sockets Sockets are means to establish a communication link between machines over   the network. The java.net package provides 4 kinds of Sockets: Socket is a TCP client API, and will typically       be used to connect to a remote host. ServerSocket is a TCP server API, and will       typically accept       connections from client sockets. DatagramSocket is a UDP endpoint API and is used       to send and       receive datagram packets. MulticastSocket is a subclass of       DatagramSocket used when dealing with multicast       groups. Sending and receiving with TCP sockets is done through InputStreams and   OutputStreams which can be obtained via the   Socket.getInputStream() and   Socket.getOutputStream() methods. Interfaces The NetworkInterface class provides APIs to browse and   query all the networking interfaces (e.g. ethernet connection or PPP   endpoint) of the local machine. It is through that class that you can   check if any of the local interfaces is configured to support IPv6. Note, all conforming implementations must support at least one   NetworkInterface object, which must either be connected to a   network, or be a \"loopback\" interface that can only communicate with   entities on the same machine. High level API A number of classes in the java.net package do provide for a much higher   level of abstraction and allow for easy access to resources on the   network. The classes are:  URI is the class representing a       Universal Resource Identifier, as specified in RFC 2396.       As the name indicates, this is just an Identifier and doesn't       provide directly the means to access the resource. URL is the class representing a       Universal Resource Locator, which is both an older concept for       URIs and a means to access the resources. URLConnection is created from a URL and is the       communication link used to access the resource pointed by the       URL. This abstract class will delegate most of the work to the       underlying protocol handlers like http or https. HttpURLConnection is a subclass of URLConnection       and provides some additional functionalities specific to the       HTTP protocol. The recommended usage is to use URI to identify   resources, then convert it into a URL when it is time to   access the resource. From that URL, you can either get the   URLConnection for fine control, or get directly the   InputStream. Here is an example:  URI uri = new URI(\"http://java.sun.com/\"); URL url = uri.toURL(); InputStream in = url.openStream();  Protocol Handlers As mentioned, URL and URLConnection rely on protocol handlers which must be present, otherwise an Exception is thrown. This is the major difference with URIs which only identify resources, and therefore don't need to have access to the protocol handler. So, while it is possible to create an URI with any kind of protocol scheme (e.g. myproto://myhost.mydomain/resource/), a similar URL will try to instantiate the handler for the specified protocol; if it doesn't exist an exception will be thrown. By default the protocol handlers are loaded dynamically from the default   location. It is, however, possible to add to the search path by setting   the java.protocol.handler.pkgs system property. For instance if   it is set to myapp.protocols, then the URL code will try, in the   case of http, first to load myapp.protocols.http.Handler, then,   if this fails, http.Handler from the default location. Note that the Handler class has to be a subclass of the abstract   class URLStreamHandler. Additional Specification        Networking System Properties "}