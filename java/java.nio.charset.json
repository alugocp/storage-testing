{"entries": [{"type": "Class", "name": "Charset", "link": "Charset"}, {"type": "Class", "desc": "An engine that can transform a sequence of bytes in a specific charset into a sequence of sixteen-bit Unicode characters.", "name": "CharsetDecoder", "link": "CharsetDecoder"}, {"type": "Class", "desc": "An engine that can transform a sequence of sixteen-bit Unicode characters into a sequence of bytes in a specific charset.", "name": "CharsetEncoder", "link": "CharsetEncoder"}, {"type": "Class", "desc": "A description of the result state of a coder.", "name": "CoderResult", "link": "CoderResult"}, {"type": "Class", "desc": "A typesafe enumeration for coding-error actions.", "name": "CodingErrorAction", "link": "CodingErrorAction"}, {"type": "Class", "name": "StandardCharsets", "link": "StandardCharsets"}, {"type": "Exception", "desc": "Checked exception thrown when a character encoding or decoding error occurs.", "name": "CharacterCodingException", "link": "CharacterCodingException"}, {"type": "Exception", "name": "IllegalCharsetNameException", "link": "IllegalCharsetNameException"}, {"type": "Exception", "desc": "Checked exception thrown when an input byte sequence is not legal for given charset, or an input character sequence is not a legal sixteen-bit Unicode sequence.", "name": "MalformedInputException", "link": "MalformedInputException"}, {"type": "Exception", "desc": "Checked exception thrown when an input character (or byte) sequence is valid but cannot be mapped to an output byte (or character) sequence.", "name": "UnmappableCharacterException", "link": "UnmappableCharacterException"}, {"type": "Exception", "desc": "Unchecked exception thrown when no support is available for a requested charset.", "name": "UnsupportedCharsetException", "link": "UnsupportedCharsetException"}, {"type": "Error", "name": "CoderMalfunctionError", "link": "CoderMalfunctionError"}], "desc": "Defines charsets, decoders, and encoders, for translating between bytes and Unicode characters.  Class nameDescription Charset A named mapping between charactersand bytes CharsetDecoder Decodes bytes into characters CharsetEncoder  Encodes characters into bytes CoderResult  Describes coder results CodingErrorAction  Describes actions to take whencoding errors are detected  A charset is named mapping between sequences of sixteen-bit Unicode characters and sequences of bytes, in the sense defined in RFC 2278. A decoder is an engine which transforms bytes in a specific charset into characters, and an encoder is an engine which transforms characters into bytes. Encoders and decoders operate on byte and character buffers. They are collectively referred to as coders.  The Charset class defines methods for creating coders for a given charset and for retrieving the various names associated with a charset. It also defines static methods for testing whether a particular charset is supported, for locating charset instances by name, and for constructing a map that contains every charset for which support is available in the current Java virtual machine.  Most users will not use these classes directly; instead they will use the existing charset-related constructors and methods in the String class, together with the existing InputStreamReader and OutputStreamWriter classes, all of whose implementations have been reworked to make use of the charset facilities defined in this package. A small number of changes have been made to the InputStreamReader and OutputStreamWriter classes in order to allow explicit charset objects to be specified in the construction of instances of those classes.  Support for new charsets can be made available via the interface defined in the CharsetProvider class in the java.nio.charset.spi package.  Unless otherwise noted, passing a null argument to a constructor or method in any class or interface in this package will cause a NullPointerException to be thrown."}