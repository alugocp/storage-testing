{"entries": [{"type": "Interface", "desc": "This interface specifies constraints for cryptographic algorithms, keys (key sizes), and other algorithm parameters.", "name": "AlgorithmConstraints", "link": "AlgorithmConstraints"}, {"type": "Interface", "desc": "A new certificate handling package is created in the Java platform.", "name": "Certificate", "link": "Certificate"}, {"type": "Interface", "name": "DomainCombiner", "link": "DomainCombiner"}, {"type": "Interface", "desc": " This interface represents a guard, which is an object that is used to protect access to another object.", "name": "Guard", "link": "Guard"}, {"type": "Interface", "desc": "The Key interface is the top-level interface for all keys.", "name": "Key", "link": "Key"}, {"type": "Interface", "name": "KeyStore.Entry", "link": "KeyStore.Entry"}, {"type": "Interface", "desc": "An attribute associated with a keystore entry.", "name": "KeyStore.Entry.Attribute", "link": "KeyStore.Entry.Attribute"}, {"type": "Interface", "name": "KeyStore.LoadStoreParameter", "link": "KeyStore.LoadStoreParameter"}, {"type": "Interface", "desc": "A marker interface for keystore protection parameters.", "name": "KeyStore.ProtectionParameter", "link": "KeyStore.ProtectionParameter"}, {"type": "Interface", "desc": "This represents a marker interface for Policy parameters.", "name": "Policy.Parameters", "link": "Policy.Parameters"}, {"type": "Interface", "desc": "This interface represents the abstract notion of a principal, which can be used to represent any entity, such as an individual, a corporation, and a login id.", "name": "Principal", "link": "Principal"}, {"type": "Interface", "desc": "A private key.", "name": "PrivateKey", "link": "PrivateKey"}, {"type": "Interface", "desc": "A computation to be performed with privileges enabled.", "name": null, "link": "PrivilegedAction"}, {"type": "Interface", "desc": "A computation to be performed with privileges enabled, that throws one or more checked exceptions.", "name": null, "link": "PrivilegedExceptionAction"}, {"type": "Interface", "desc": "A public key.", "name": "PublicKey", "link": "PublicKey"}, {"type": "Class", "desc": "An AccessControlContext is used to make system resource access decisions based on the context it encapsulates.", "name": "AccessControlContext", "link": "AccessControlContext"}, {"type": "Class", "desc": " The AccessController class is used for access control operations and decisions.", "name": "AccessController", "link": "AccessController"}, {"type": "Class", "name": "AlgorithmParameterGenerator", "link": "AlgorithmParameterGenerator"}, {"type": "Class", "name": "AlgorithmParameterGeneratorSpi", "link": "AlgorithmParameterGeneratorSpi"}, {"type": "Class", "desc": "This class is used as an opaque representation of cryptographic parameters.", "name": "AlgorithmParameters", "link": "AlgorithmParameters"}, {"type": "Class", "name": "AlgorithmParametersSpi", "link": "AlgorithmParametersSpi"}, {"type": "Class", "desc": "The AllPermission is a permission that implies all other permissions.", "name": "AllPermission", "link": "AllPermission"}, {"type": "Class", "desc": "This class defines login and logout methods for a provider.", "name": "AuthProvider", "link": "AuthProvider"}, {"type": "Class", "desc": "The BasicPermission class extends the Permission class, and can be used as the base class for permissions that want to follow the same naming convention as BasicPermission.", "name": "BasicPermission", "link": "BasicPermission"}, {"type": "Class", "desc": "This class encapsulates information about a code signer.", "name": "CodeSigner", "link": "CodeSigner"}, {"type": "Class", "desc": "This class extends the concept of a codebase to encapsulate not only the location (URL) but also the certificate chains that were used to verify signed code originating from that location.", "name": "CodeSource", "link": "CodeSource"}, {"type": "Class", "desc": "A transparent stream that updates the associated message digest using the bits going through the stream.", "name": "DigestInputStream", "link": "DigestInputStream"}, {"type": "Class", "desc": "A transparent stream that updates the associated message digest using the bits going through the stream.", "name": "DigestOutputStream", "link": "DigestOutputStream"}, {"type": "Class", "desc": "Configuration data that specifies the keystores in a keystore domain.", "name": "DomainLoadStoreParameter", "link": "DomainLoadStoreParameter"}, {"type": "Class", "desc": "A GuardedObject is an object that is used to protect access to another object.", "name": "GuardedObject", "link": "GuardedObject"}, {"type": "Class", "desc": "This class is no longer used.", "name": "Identity", "link": "Identity"}, {"type": "Class", "desc": "This class is no longer used.", "name": "IdentityScope", "link": "IdentityScope"}, {"type": "Class", "name": "KeyFactory", "link": "KeyFactory"}, {"type": "Class", "name": "KeyFactorySpi", "link": "KeyFactorySpi"}, {"type": "Class", "desc": "This class is a simple holder for a key pair (a public key and a private key).", "name": "KeyPair", "link": "KeyPair"}, {"type": "Class", "desc": "The KeyPairGenerator class is used to generate pairs of public and private keys.", "name": "KeyPairGenerator", "link": "KeyPairGenerator"}, {"type": "Class", "name": "KeyPairGeneratorSpi", "link": "KeyPairGeneratorSpi"}, {"type": "Class", "desc": "Standardized representation for serialized Key objects.", "name": "KeyRep", "link": "KeyRep"}, {"type": "Class", "desc": "This class represents a storage facility for cryptographic keys and certificates.", "name": "KeyStore", "link": "KeyStore"}, {"type": "Class", "desc": "A description of a to-be-instantiated KeyStore object.", "name": "KeyStore.Builder", "link": "KeyStore.Builder"}, {"type": "Class", "desc": "A ProtectionParameter encapsulating a CallbackHandler.", "name": "KeyStore.CallbackHandlerProtection", "link": "KeyStore.CallbackHandlerProtection"}, {"type": "Class", "name": "KeyStore.PasswordProtection", "link": "KeyStore.PasswordProtection"}, {"type": "Class", "name": "KeyStore.PrivateKeyEntry", "link": "KeyStore.PrivateKeyEntry"}, {"type": "Class", "name": "KeyStore.SecretKeyEntry", "link": "KeyStore.SecretKeyEntry"}, {"type": "Class", "name": "KeyStore.TrustedCertificateEntry", "link": "KeyStore.TrustedCertificateEntry"}, {"type": "Class", "name": "KeyStoreSpi", "link": "KeyStoreSpi"}, {"type": "Class", "desc": "This MessageDigest class provides applications the functionality of a message digest algorithm, such as SHA-1 or SHA-256.", "name": "MessageDigest", "link": "MessageDigest"}, {"type": "Class", "name": "MessageDigestSpi", "link": "MessageDigestSpi"}, {"type": "Class", "desc": "Abstract class for representing access to a system resource.", "name": "Permission", "link": "Permission"}, {"type": "Class", "desc": "Abstract class representing a collection of Permission objects.", "name": "PermissionCollection", "link": "PermissionCollection"}, {"type": "Class", "desc": "This class represents a heterogeneous collection of Permissions.", "name": "Permissions", "link": "Permissions"}, {"type": "Class", "desc": "An attribute associated with a PKCS12 keystore entry.", "name": "PKCS12Attribute", "link": "PKCS12Attribute"}, {"type": "Class", "desc": "A Policy object is responsible for determining whether code executing in the Java runtime environment has permission to perform a security-sensitive operation.", "name": "Policy", "link": "Policy"}, {"type": "Class", "name": "PolicySpi", "link": "PolicySpi"}, {"type": "Class", "desc": "The ProtectionDomain class encapsulates the characteristics of a domain, which encloses a set of classes whose instances are granted a set of permissions when being executed on behalf of a given set of Principals.", "name": "ProtectionDomain", "link": "ProtectionDomain"}, {"type": "Class", "desc": "This class represents a \"provider\" for the Java Security API, where a provider implements some or all parts of Java Security.", "name": "Provider", "link": "Provider"}, {"type": "Class", "desc": "The description of a security service.", "name": "Provider.Service", "link": "Provider.Service"}, {"type": "Class", "desc": "This class extends ClassLoader with additional support for defining classes with an associated code source and permissions which are retrieved by the system policy by default.", "name": "SecureClassLoader", "link": "SecureClassLoader"}, {"type": "Class", "desc": "This class provides a cryptographically strong random number generator (RNG).", "name": "SecureRandom", "link": "SecureRandom"}, {"type": "Class", "name": "SecureRandomSpi", "link": "SecureRandomSpi"}, {"type": "Class", "desc": "This class centralizes all security properties and common security methods.", "name": "Security", "link": "Security"}, {"type": "Class", "desc": "This class is for security permissions.", "name": "SecurityPermission", "link": "SecurityPermission"}, {"type": "Class", "desc": "The Signature class is used to provide applications the functionality of a digital signature algorithm.", "name": "Signature", "link": "Signature"}, {"type": "Class", "name": "SignatureSpi", "link": "SignatureSpi"}, {"type": "Class", "desc": " SignedObject is a class for the purpose of creating authentic runtime objects whose integrity cannot be compromised without being detected.", "name": "SignedObject", "link": "SignedObject"}, {"type": "Class", "desc": "This class is no longer used.", "name": "Signer", "link": "Signer"}, {"type": "Class", "desc": "This class encapsulates information about a signed timestamp.", "name": "Timestamp", "link": "Timestamp"}, {"type": "Class", "desc": "The UnresolvedPermission class is used to hold Permissions that were \"unresolved\" when the Policy was initialized.", "name": "UnresolvedPermission", "link": "UnresolvedPermission"}, {"type": "Class", "desc": "A parameter that contains a URI pointing to data intended for a PolicySpi or ConfigurationSpi implementation.", "name": "URIParameter", "link": "URIParameter"}, {"type": "Enum", "desc": "An enumeration of cryptographic primitives.", "name": "CryptoPrimitive", "link": "CryptoPrimitive"}, {"type": "Enum", "desc": "Key type.", "name": "KeyRep.Type", "link": "KeyRep.Type"}, {"type": "Exception", "desc": " This exception is thrown by the AccessController to indicate that a requested access (to a critical system resource such as the file system or the network) is denied.", "name": "AccessControlException", "link": "AccessControlException"}, {"type": "Exception", "desc": "This is the generic Message Digest exception.", "name": "DigestException", "link": "DigestException"}, {"type": "Exception", "name": "GeneralSecurityException", "link": "GeneralSecurityException"}, {"type": "Exception", "desc": "This is the exception for invalid or inappropriate algorithm parameters.", "name": "InvalidAlgorithmParameterException", "link": "InvalidAlgorithmParameterException"}, {"type": "Exception", "desc": "This is the exception for invalid Keys (invalid encoding, wrong length, uninitialized, etc).", "name": "InvalidKeyException", "link": "InvalidKeyException"}, {"type": "Exception", "desc": "This exception, designed for use by the JCA/JCE engine classes, is thrown when an invalid parameter is passed to a method.", "name": "InvalidParameterException", "link": "InvalidParameterException"}, {"type": "Exception", "desc": "This is the basic key exception.", "name": "KeyException", "link": "KeyException"}, {"type": "Exception", "desc": "This is the general key management exception for all operations dealing with key management.", "name": "KeyManagementException", "link": "KeyManagementException"}, {"type": "Exception", "desc": "This is the generic KeyStore exception.", "name": "KeyStoreException", "link": "KeyStoreException"}, {"type": "Exception", "desc": "This exception is thrown when a particular cryptographic algorithm is requested but is not available in the environment.", "name": "NoSuchAlgorithmException", "link": "NoSuchAlgorithmException"}, {"type": "Exception", "desc": "This exception is thrown when a particular security provider is requested but is not available in the environment.", "name": "NoSuchProviderException", "link": "NoSuchProviderException"}, {"type": "Exception", "name": "PrivilegedActionException", "link": "PrivilegedActionException"}, {"type": "Exception", "desc": "A runtime exception for Provider exceptions (such as misconfiguration errors or unrecoverable internal errors), which may be subclassed by Providers to throw specialized, provider-specific runtime errors.", "name": "ProviderException", "link": "ProviderException"}, {"type": "Exception", "desc": "This is the generic Signature exception.", "name": "SignatureException", "link": "SignatureException"}, {"type": "Exception", "desc": "This exception is thrown if an entry in the keystore cannot be recovered.", "name": "UnrecoverableEntryException", "link": "UnrecoverableEntryException"}, {"type": "Exception", "desc": "This exception is thrown if a key in the keystore cannot be recovered.", "name": "UnrecoverableKeyException", "link": "UnrecoverableKeyException"}], "desc": "Provides the classes and interfaces for the security framework. This includes classes that implement an easily configurable, fine-grained access control security architecture. This package also supports the generation and storage of cryptographic public key pairs, as well as a number of exportable cryptographic operations including those for message digest and signature generation. Finally, this package provides classes that support signed/guarded objects and secure random number generation.  Many of the classes provided in this package (the cryptographic and secure random number generator classes in particular) are provider-based. The class itself defines a programming interface to which applications may write. The implementations themselves may then be written by independent third-party vendors and plugged in seamlessly as needed. Therefore application developers may take advantage of any number of provider-based implementations without having to add or rewrite code.  Package Specification  Java\u2122   Cryptography Architecture (JCA) Reference Guide PKCS #8: Private-Key Information Syntax Standard, Version 1.2,   November 1993 Java\u2122   Cryptography Architecture Standard Algorithm Name   Documentation Related Documentation  For further documentation, please see:  Java\u2122   SE Platform Security Architecture How to Implement a Provider in the   Java\u2122 Cryptography Architecture       Default Policy Implementation and Policy File Syntax       Permissions in the   Java\u2122 SE Development Kit (JDK)       Summary of Tools for   Java\u2122 Platform Security    keytool   (    for Solaris/Linux)   (    for Windows)    jarsigner   (    for Solaris/Linux)   (    for Windows)    "}