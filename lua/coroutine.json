{"entries": [{"desc": "Creates a new coroutine, with body f. f must be a function. Returns this new coroutine, an object with type \"thread\".", "name": "coroutine.create (f)", "type": "function"}, {"desc": "Returns true when the running coroutine can yield. A running coroutine is yieldable if it is not the main thread and it is not inside a non-yieldable C function.", "name": "coroutine.isyieldable ()", "type": "function"}, {"desc": "Starts or continues the execution of coroutine co. The first time you resume a coroutine, it starts running its body. The values val1, ... are passed as the arguments to the body function. If the coroutine has yielded, resume restarts it; the values val1, ... are passed as the results from the yield. If the coroutine runs without any errors, resume returns true plus any values passed to yield (when the coroutine yields) or any values returned by the body function (when the coroutine terminates). If there is any error, resume returns false plus the error message.", "name": "coroutine.resume (co [, val1, \u00b7\u00b7\u00b7])", "type": "function"}, {"desc": "Returns the running coroutine plus a boolean, true when the running coroutine is the main one.", "name": "coroutine.running ()", "type": "function"}, {"desc": "Returns the status of coroutine co, as a string: \"running\", if the coroutine is running (that is, it called status); \"suspended\", if the coroutine is suspended in a call to yield, or if it has not started running yet; \"normal\" if the coroutine is active but not running (that is, it has resumed another coroutine); and \"dead\" if the coroutine has finished its body function, or if it has stopped with an error.", "name": "coroutine.status (co)", "type": "function"}, {"desc": "Creates a new coroutine, with body f. f must be a function. Returns a function that resumes the coroutine each time it is called. Any arguments passed to the function behave as the extra arguments to resume. Returns the same values returned by resume, except the first boolean. In case of error, propagates the error.", "name": "coroutine.wrap (f)", "type": "function"}, {"desc": "Suspends the execution of the calling coroutine. Any arguments to yield are passed as extra results to resume.", "name": "coroutine.yield (\u00b7\u00b7\u00b7)", "type": "function"}]}