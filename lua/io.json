{"entries": [{"desc": "Equivalent to file:close(). Without a file, closes the default output file.", "name": "io.close ([file])", "type": "function"}, {"desc": "Equivalent to io.output():flush().", "name": "io.flush ()", "type": "function"}, {"desc": "When called with a file name, it opens the named file (in text mode), and sets its handle as the default input file. When called with a file handle, it simply sets this file handle as the default input file. When called without arguments, it returns the current default input file. In case of errors this function raises the error, instead of returning an error code.", "name": "io.input ([file])", "type": "function"}, {"desc": "Opens the given file name in read mode and returns an iterator function that works like file:lines(\u00b7\u00b7\u00b7) over the opened file. When the iterator function detects the end of file, it returns no values (to finish the loop) and automatically closes the file. The call io.lines() (with no file name) is equivalent to io.input():lines(\"*l\"); that is, it iterates over the lines of the default input file. In this case, the iterator does not close the file when the loop ends. In case of errors this function raises the error, instead of returning an error code.", "name": "io.lines ([filename, \u00b7\u00b7\u00b7])", "type": "function"}, {"desc": "This function opens a file, in the mode specified in the string mode. In case of success, it returns a new file handle. The mode string can be any of the following: \"r\": read mode (the default); \"w\": write mode; \"a\": append mode; \"r+\": update mode, all previous data is preserved; \"w+\": update mode, all previous data is erased; \"a+\": append update mode, previous data is preserved, writing is only allowed at the end of file. The mode string can also have a 'b' at the end, which is needed in some systems to open the file in binary mode.", "name": "io.open (filename [, mode])", "type": "function"}, {"desc": "Similar to io.input, but operates over the default output file.", "name": "io.output ([file])", "type": "function"}, {"desc": "This function is system dependent and is not available on all platforms. Starts program prog in a separated process and returns a file handle that you can use to read data from this program (if mode is \"r\", the default) or to write data to this program (if mode is \"w\").", "name": "io.popen (prog [, mode])", "type": "function"}, {"desc": "Equivalent to io.input():read(\u00b7\u00b7\u00b7).", "name": "io.read (\u00b7\u00b7\u00b7)", "type": "function"}, {"desc": "In case of success, returns a handle for a temporary file. This file is opened in update mode and it is automatically removed when the program ends.", "name": "io.tmpfile ()", "type": "function"}, {"desc": "Checks whether obj is a valid file handle. Returns the string \"file\" if obj is an open file handle, \"closed file\" if obj is a closed file handle, or nil if obj is not a file handle.", "name": "io.type (obj)", "type": "function"}, {"desc": "Equivalent to io.output():write(\u00b7\u00b7\u00b7).", "name": "io.write (\u00b7\u00b7\u00b7)", "type": "function"}]}