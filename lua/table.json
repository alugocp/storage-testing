{"entries": [{"desc": "Given a list where all elements are strings or numbers, returns the string list[i]..sep..list[i+1] \u00b7\u00b7\u00b7 sep..list[j]. The default value for sep is the empty string, the default for i is 1, and the default for j is #list. If i is greater than j, returns the empty string.", "name": "table.concat (list [, sep [, i [, j]]])", "type": "function"}, {"desc": "Inserts element value at position pos in list, shifting up the elements list[pos], list[pos+1], \u00b7\u00b7\u00b7, list[#list]. The default value for pos is #list+1, so that a call table.insert(t,x) inserts x at the end of list t.", "name": "table.insert (list, [pos,] value)", "type": "function"}, {"desc": "Moves elements from table a1 to table a2, performing the equivalent to the following multiple assignment: a2[t],\u00b7\u00b7\u00b7 = a1[f],\u00b7\u00b7\u00b7,a1[e]. The default for a2 is a1. The destination range can overlap with the source range. The number of elements to be moved must fit in a Lua integer. Returns the destination table a2.", "name": "table.move (a1, f, e, t [,a2])", "type": "function"}, {"desc": "Returns a new table with all arguments stored into keys 1, 2, etc. and with a field \"n\" with the total number of arguments. Note that the resulting table may not be a sequence.", "name": "table.pack (\u00b7\u00b7\u00b7)", "type": "function"}, {"desc": "Removes from list the element at position pos, returning the value of the removed element. When pos is an integer between 1 and #list, it shifts down the elements list[pos+1], list[pos+2], \u00b7\u00b7\u00b7, list[#list] and erases element list[#list]; The index pos can also be 0 when #list is 0, or #list + 1; in those cases, the function erases the element list[pos]. The default value for pos is #list, so that a call table.remove(l) removes the last element of list l.", "name": "table.remove (list [, pos])", "type": "function"}, {"desc": "Sorts list elements in a given order, in-place, from list[1] to list[#list]. If comp is given, then it must be a function that receives two list elements and returns true when the first element must come before the second in the final order (so that, after the sort, i < j implies not comp(list[j],list[i])). If comp is not given, then the standard Lua operator < is used instead. Note that the comp function must define a strict partial order over the elements in the list; that is, it must be asymmetric and transitive. Otherwise, no valid sort may be possible. The sort algorithm is not stable: elements considered equal by the given order may have their relative positions changed by the sort.", "name": "table.sort (list [, comp])", "type": "function"}, {"desc": "Returns the elements from the given list. This function is equivalent to return list[i], list[i+1], \u00b7\u00b7\u00b7, list[j] By default, i is 1 and j is #list.", "name": "table.unpack (list [, i [, j]])", "type": "function"}]}