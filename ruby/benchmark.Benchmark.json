{"entries": [{"type": "constant", "name": "CAPTION", "desc": "The default caption string (heading above the output times)."}, {"type": "constant", "name": "FORMAT", "desc": "The default format string used to display times.  See also Benchmark::Tms#format."}, {"type": "constant", "name": "VERSION", "desc": ""}, {"type": "public class method", "name": "benchmark(caption = \"\", label_width = nil, format = nil, *labels)", "desc": "Invokes the block with a Benchmark::Report object, which may be used to collect and report on the results of individual benchmark tests. Reserves label_width leading spaces for labels on each line. Prints caption at the top of the report, and uses format to format each line. Returns an array of Benchmark::Tms objects."}, {"type": "public class method", "name": "bm(label_width = 0, *labels)", "desc": "A simple interface to the benchmark method, bm generates sequential reports with labels. label_width and labels parameters have the same meaning as for benchmark."}, {"type": "public class method", "name": "bmbm(width = 0)", "desc": "Sometimes benchmark results are skewed because code executed earlier encounters different garbage collection overheads than that run later. bmbm attempts to minimize this effect by running the tests twice, the first time as a rehearsal in order to get the runtime environment stable, the second time for real. GC.start is executed before the start of each of the real timings; the cost of this is not included in the timings. In reality, though, there's only so much that bmbm can do, and the results are not guaranteed to be isolated from garbage collection and other effects."}, {"type": "public class method", "name": "measure(label = \"\")", "desc": "Returns the time used to execute the given block as a Benchmark::Tms object. Takes label option."}, {"type": "public class method", "name": "realtime()", "desc": "Returns the elapsed real time used to execute the given block."}]}