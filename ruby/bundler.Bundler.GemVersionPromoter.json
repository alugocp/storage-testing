{"entries": [{"type": "constant", "name": "DEBUG", "desc": ""}, {"type": "attribute", "name": "level", "desc": " "}, {"type": "attribute", "name": "locked_specs", "desc": " "}, {"type": "attribute", "name": "prerelease_specified", "desc": " "}, {"type": "attribute", "name": "strict", "desc": " By default, strict is false, meaning every available version of a gem is returned from sort_versions. The order gives preference to the requested level (:patch, :minor, :major) but in complicated requirement cases some gems will by necessity by promoted past the requested level, or even reverted to older versions. If strict is set to true, the results from #sort_versions will be truncated, eliminating any version outside the current level scope. This can lead to unexpected outcomes or even VersionConflict exceptions that report a version of a gem not existing for versions that indeed do existing in the referenced source. "}, {"type": "attribute", "name": "unlock_gems", "desc": " "}, {"type": "public class method", "name": "new(locked_specs = SpecSet.new([]), unlock_gems = [])", "desc": "Given a list of #locked_specs and a list of gems to unlock creates a GemVersionPromoter instance."}, {"type": "public instance method", "name": "level=(value)", "desc": "@param value [Symbol] One of three Symbols: :major, :minor or :patch."}, {"type": "public instance method", "name": "major?()", "desc": "@return [bool] Convenience method for testing value of level variable."}, {"type": "public instance method", "name": "minor?()", "desc": "@return [bool] Convenience method for testing value of level variable."}, {"type": "public instance method", "name": "sort_versions(dep, spec_groups)", "desc": "Given a Dependency and an Array of SpecGroups of available versions for a gem, this method will return the Array of SpecGroups sorted (and possibly truncated if strict is true) in an order to give preference to the current level (:major, :minor or :patch) when resolution is deciding what versions best resolve all dependencies in the bundle. @param dep [Dependency] The Dependency of the gem. @param spec_groups [SpecGroup] An array of SpecGroups for the same gem"}]}