{"entries": [{"type": "attribute", "name": "explicit_requirements", "desc": " @return [Array<Object>] the explicit requirements that required this vertex  "}, {"type": "attribute", "name": "incoming_edges", "desc": " @return [Array<Edge>] the edges of {#graph} that have `self` as their {Edge#destination} "}, {"type": "attribute", "name": "name", "desc": " @return [String] the name of the vertex "}, {"type": "attribute", "name": "outgoing_edges", "desc": " @return [Array<Edge>] the edges of {#graph} that have `self` as their {Edge#origin} "}, {"type": "attribute", "name": "payload", "desc": " @return [Object] the payload the vertex holds "}, {"type": "attribute", "name": "root", "desc": " @return [Boolean] whether the vertex is considered a root vertex "}, {"type": "attribute", "name": "root?", "desc": " @return [Boolean] whether the vertex is considered a root vertex "}, {"type": "public class method", "name": "new(name, payload)", "desc": "Initializes a vertex with the given name and payload. @param [String] name see {#name} @param [Object] payload see {#payload}"}, {"type": "public instance method", "name": "==(other)", "desc": "@return [Boolean] whether the two vertices are equal, determined"}, {"type": "public instance method", "name": "ancestor?(other)", "desc": "Is there a path from `other` to `self` following edges in the dependency graph? @return true iff there is a path following edges within this {#graph}"}, {"type": "public instance method", "name": "descendent?(other)", "desc": ""}, {"type": "public instance method", "name": "eql?(other)", "desc": ""}, {"type": "public instance method", "name": "hash()", "desc": "@return [Fixnum] a hash for the vertex based upon its {#name}"}, {"type": "public instance method", "name": "inspect()", "desc": "@return [String] a string suitable for debugging"}, {"type": "public instance method", "name": "is_reachable_from?(other)", "desc": ""}, {"type": "public instance method", "name": "path_to?(other)", "desc": "Is there a path from `self` to `other` following edges in the dependency graph? @return true iff there is a path following edges within this {#graph}"}, {"type": "public instance method", "name": "predecessors()", "desc": "@return [Array<Vertex>] the vertices of {#graph} that have an edge with"}, {"type": "public instance method", "name": "recursive_predecessors()", "desc": "@return [Set<Vertex>] the vertices of {#graph} where `self` is a"}, {"type": "public instance method", "name": "recursive_successors()", "desc": "@return [Set<Vertex>] the vertices of {#graph} where `self` is an"}, {"type": "public instance method", "name": "requirements()", "desc": "@return [Array<Object>] all of the requirements that required"}, {"type": "public instance method", "name": "shallow_eql?(other)", "desc": "@param  [Vertex] other the other vertex to compare to @return [Boolean] whether the two vertices are equal, determined"}, {"type": "public instance method", "name": "successors()", "desc": "@return [Array<Vertex>] the vertices of {#graph} that have an edge with"}, {"type": "alias", "name": "descendent?(other)", "desc": "             Alias for: path_to? "}, {"type": "alias", "name": "eql?(other)", "desc": "             Alias for: == "}, {"type": "alias", "name": "is_reachable_from?(other)", "desc": "             Alias for: ancestor? "}]}