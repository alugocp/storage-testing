{"entries": [{"type": "constant", "name": "Edge", "desc": "A directed edge of a {DependencyGraph} @attr [Vertex] origin The origin of\nthe directed edge @attr [Vertex] destination The destination of the\ndirected edge @attr [Object] requirement The requirement the directed edge\nrepresents"}, {"type": "attribute", "name": "log", "desc": " @return [Log] the op log for this graph "}, {"type": "attribute", "name": "vertices", "desc": " @return [{String => Vertex}] the vertices of the dependency graph, keyed by {Vertex#name} "}, {"type": "public class method", "name": "new()", "desc": "Initializes an empty dependency graph"}, {"type": "public class method", "name": "tsort(vertices)", "desc": "Topologically sorts the given vertices. @param [Enumerable<Vertex>] vertices the vertices to be sorted, which must"}, {"type": "public instance method", "name": "==(other)", "desc": "@return [Boolean] whether the two dependency graphs are equal, determined"}, {"type": "public instance method", "name": "add_child_vertex(name, payload, parent_names, requirement)", "desc": "@param [String] name @param [Object] payload @param [Array<String>] parent_names @param [Object] requirement the requirement that is requiring the child @return [void]"}, {"type": "public instance method", "name": "add_edge(origin, destination, requirement)", "desc": "Adds a new {Edge} to the dependency graph @param [Vertex] origin @param [Vertex] destination @param [Object] requirement the requirement that this edge represents @return [Edge] the added edge"}, {"type": "public instance method", "name": "add_vertex(name, payload, root = false)", "desc": "Adds a vertex with the given name, or updates the existing one. @param [String] name @param [Object] payload @return [Vertex] the vertex that was added to `self`"}, {"type": "public instance method", "name": "delete_edge(edge)", "desc": "Deletes an {Edge} from the dependency graph @param [Edge] edge @return [Void]"}, {"type": "public instance method", "name": "detach_vertex_named(name)", "desc": "Detaches the {#vertex_named} `name` {Vertex} from the graph, recursively removing any non-root vertices that were orphaned in the process @param [String] name @return [Array<Vertex>] the vertices which have been detached"}, {"type": "public instance method", "name": "each()", "desc": "Enumerates through the vertices of the graph. @return [Array<Vertex>] The graph's vertices."}, {"type": "public instance method", "name": "initialize_copy(other)", "desc": "Initializes a copy of a {DependencyGraph}, ensuring that all {#vertices} are properly copied. @param [DependencyGraph] other the graph to copy."}, {"type": "public instance method", "name": "inspect()", "desc": "@return [String] a string suitable for debugging"}, {"type": "public instance method", "name": "rewind_to(tag)", "desc": "Rewinds the graph to the state tagged as `tag` @param  [Object] tag the tag to rewind to @return [Void]"}, {"type": "public instance method", "name": "root_vertex_named(name)", "desc": "@param [String] name @return [Vertex,nil] the root vertex with the given name"}, {"type": "public instance method", "name": "set_payload(name, payload)", "desc": "Sets the payload of the vertex with the given name @param [String] name the name of the vertex @param [Object] payload the payload @return [Void]"}, {"type": "public instance method", "name": "tag(tag)", "desc": "Tags the current state of the dependency as the given tag @param  [Object] tag an opaque tag for the current state of the graph @return [Void]"}, {"type": "public instance method", "name": "to_dot(options = {})", "desc": "@param [Hash] options options for dot output. @return [String] Returns a dot format representation of the graph"}, {"type": "public instance method", "name": "tsort_each_child(vertex, &block)", "desc": "@!visibility private"}, {"type": "public instance method", "name": "tsort_each_node()", "desc": "@!visibility private"}, {"type": "public instance method", "name": "vertex_named(name)", "desc": "@param [String] name @return [Vertex,nil] the vertex with the given name"}, {"type": "alias", "name": "tsort_each_node()", "desc": "             Alias for: each "}]}