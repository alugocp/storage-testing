{"entries": [{"type": "public instance method", "name": "<=>(other)", "desc": "We compare UnwindDetails when choosing which state to unwind to. If two options have the same state_index we prefer the one most removed from a requirement that caused the conflict. Both options would unwind to the same state, but a `grandparent` option will filter out fewer of its possibilities after doing so - where a state is both a `parent` and a `grandparent` to requirements that have caused a conflict this is the correct behaviour. @param [UnwindDetail] other UnwindDetail to be compared @return [Integer] integer specifying ordering"}, {"type": "public instance method", "name": "all_requirements()", "desc": "@return [Array] array of all the requirements that led to the need for"}, {"type": "public instance method", "name": "reversed_requirement_tree_index()", "desc": "@return [Integer] index of state requirement in reversed requirement tree"}, {"type": "public instance method", "name": "sub_dependencies_to_avoid()", "desc": "@return [Array] array of sub-dependencies to avoid when choosing a"}, {"type": "public instance method", "name": "unwinding_to_primary_requirement?()", "desc": "@return [Boolean] where the requirement of the state we're unwinding"}]}