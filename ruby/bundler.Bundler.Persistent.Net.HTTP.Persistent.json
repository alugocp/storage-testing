{"entries": [{"type": "constant", "name": "DEFAULT_POOL_SIZE", "desc": ""}, {"type": "constant", "name": "VERSION", "desc": "The version of Bundler::Persistent::Net::HTTP::Persistent you\nare using"}, {"type": "attribute", "name": "ca_file", "desc": " An SSL certificate authority.  Setting this will set #verify_mode to VERIFY_PEER. "}, {"type": "attribute", "name": "ca_path", "desc": " A directory of SSL certificates to be used as certificate authorities. Setting this will set #verify_mode to VERIFY_PEER. "}, {"type": "attribute", "name": "cert", "desc": " This client's OpenSSL::X509::Certificate "}, {"type": "attribute", "name": "cert_store", "desc": " An SSL certificate store.  Setting this will override the default certificate store.  See #verify_mode for more information. "}, {"type": "attribute", "name": "certificate", "desc": " This client's OpenSSL::X509::Certificate "}, {"type": "attribute", "name": "ciphers", "desc": " The ciphers allowed for SSL connections "}, {"type": "attribute", "name": "debug_output", "desc": " Sends #debug_output to this IO via Net::HTTP#set_debug_output. Never use this method in production code, it causes a serious security hole. "}, {"type": "attribute", "name": "headers", "desc": " Headers that are added to every request using Net::HTTP#add_field "}, {"type": "attribute", "name": "http_versions", "desc": " Maps host:port to an HTTP version.  This allows us to enable version specific features. "}, {"type": "attribute", "name": "idle_timeout", "desc": " Maximum time an unused connection can remain idle before being automatically closed. "}, {"type": "attribute", "name": "keep_alive", "desc": " The value sent in the Keep-Alive header.  Defaults to 30.  Not needed for HTTP/1.1 servers. This may not work correctly for HTTP/1.0 servers This method may be removed in a future version as RFC 2616 does not require this header. "}, {"type": "attribute", "name": "key", "desc": " This client's SSL private key "}, {"type": "attribute", "name": "max_requests", "desc": " Maximum number of requests on a connection before it is considered expired and automatically closed. "}, {"type": "attribute", "name": "max_version", "desc": " Maximum SSL version to use, e.g. :TLS1_2 By default, the version will be negotiated automatically between client and server.  Ruby 2.5 and newer only. "}, {"type": "attribute", "name": "min_version", "desc": " Minimum SSL version to use, e.g. :TLS1_1 By default, the version will be negotiated automatically between client and server.  Ruby 2.5 and newer only. "}, {"type": "attribute", "name": "name", "desc": " A name for this connection.  Allows you to keep your connections apart from everybody else's. "}, {"type": "attribute", "name": "no_proxy", "desc": " List of host suffixes which will not be proxied "}, {"type": "attribute", "name": "open_timeout", "desc": " Seconds to wait until a connection is opened.  See Net::HTTP#open_timeout "}, {"type": "attribute", "name": "override_headers", "desc": " Headers that are added to every request using Net::HTTP#[]= "}, {"type": "attribute", "name": "private_key", "desc": " This client's SSL private key "}, {"type": "attribute", "name": "proxy_uri", "desc": " The URL through which requests will be proxied "}, {"type": "attribute", "name": "read_timeout", "desc": " Seconds to wait until reading one block.  See Net::HTTP#read_timeout "}, {"type": "attribute", "name": "retry_change_requests", "desc": " Enable retries of non-idempotent requests that change data (e.g. POST requests) when the server has disconnected. This will in the worst case lead to multiple requests with the same data, but it may be useful for some applications.  Take care when enabling this option to ensure it is safe to POST or perform other non-idempotent requests to the server. "}, {"type": "attribute", "name": "reuse_ssl_sessions", "desc": " By default SSL sessions are reused to avoid extra SSL handshakes.  Set this to false if you have problems communicating with an HTTPS server like: SSL_connect [...] read finished A: unexpected message (OpenSSL::SSL::SSLError) "}, {"type": "attribute", "name": "socket_options", "desc": " An array of options for Socket#setsockopt. By default the TCP_NODELAY option is set on sockets. To set additional options append them to this array: http.socket_options << [Socket::SOL_SOCKET, Socket::SO_KEEPALIVE, 1]  "}, {"type": "attribute", "name": "ssl_timeout", "desc": " SSL session lifetime "}, {"type": "attribute", "name": "ssl_version", "desc": " SSL version to use. By default, the version will be negotiated automatically between client and server.  Ruby 1.9 and newer only. Deprecated since Ruby 2.5. "}, {"type": "attribute", "name": "verify_callback", "desc": " SSL verification callback.  Used when #ca_file or #ca_path is set. "}, {"type": "attribute", "name": "verify_depth", "desc": " Sets the depth of SSL certificate verification "}, {"type": "attribute", "name": "verify_mode", "desc": " HTTPS verify mode.  Defaults to OpenSSL::SSL::VERIFY_PEER which verifies the server certificate. If no #ca_file, #ca_path or #cert_store is set the default system certificate store is used. You can use verify_mode to override any default values. "}, {"type": "attribute", "name": "write_timeout", "desc": " Seconds to wait until writing one block.  See Net::HTTP#write_timeout "}, {"type": "public class method", "name": "detect_idle_timeout(uri, max = 10)", "desc": "Use this method to detect the idle timeout of the host at uri. The value returned can be used to configure idle_timeout.  max controls the maximum idle timeout to detect."}, {"type": "public class method", "name": "new(name: nil, proxy: nil, pool_size: DEFAULT_POOL_SIZE)", "desc": "Creates a new Bundler::Persistent::Net::HTTP::Persistent."}, {"type": "public instance method", "name": "ca_file=(file)", "desc": "Sets the SSL certificate authority file."}, {"type": "public instance method", "name": "ca_path=(path)", "desc": "Sets the SSL certificate authority path."}, {"type": "public instance method", "name": "can_retry?(req)", "desc": "Is the request req idempotent or is #retry_change_requests allowed."}, {"type": "public instance method", "name": "cert=(certificate)", "desc": "For Net::HTTP parity"}, {"type": "public instance method", "name": "cert_store=(store)", "desc": "Overrides the default SSL certificate store used for verifying connections."}, {"type": "public instance method", "name": "certificate=(certificate)", "desc": "Sets this client's OpenSSL::X509::Certificate"}, {"type": "public instance method", "name": "ciphers=(ciphers)", "desc": "The ciphers allowed for SSL connections"}, {"type": "public instance method", "name": "connection_for(uri)", "desc": "Creates a new connection for uri"}, {"type": "public instance method", "name": "error_message(connection)", "desc": "Returns an error message containing the number of requests performed on this connection"}, {"type": "public instance method", "name": "escape(str)", "desc": "Bundler::URI::escape wrapper"}, {"type": "public instance method", "name": "expired?(connection)", "desc": "Returns true if the connection should be reset due to an idle timeout, or maximum request count, false otherwise."}, {"type": "public instance method", "name": "finish(connection)", "desc": "Finishes the Net::HTTP connection"}, {"type": "public instance method", "name": "http_version(uri)", "desc": "Returns the HTTP protocol version for uri"}, {"type": "public instance method", "name": "idempotent?(req)", "desc": "Is req idempotent according to RFC 2616?"}, {"type": "public instance method", "name": "key=(key)", "desc": "For Net::HTTP parity"}, {"type": "public instance method", "name": "max_version=(max_version)", "desc": "maximum SSL version to use"}, {"type": "public instance method", "name": "min_version=(min_version)", "desc": "Minimum SSL version to use"}, {"type": "public instance method", "name": "normalize_uri(uri)", "desc": "Adds \u201chttp://\u201d to the String uri if it is missing."}, {"type": "public instance method", "name": "private_key=(key)", "desc": "Sets this client's SSL private key"}, {"type": "public instance method", "name": "proxy=(proxy)", "desc": "Sets the proxy server.  The proxy may be the Bundler::URI of the proxy server, the symbol :ENV which will read the proxy from the environment or nil to disable use of a proxy.  See proxy_from_env for details on setting the proxy from the environment."}, {"type": "public instance method", "name": "proxy_bypass?(host, port)", "desc": "Returns true when proxy should by bypassed for host."}, {"type": "public instance method", "name": "proxy_from_env()", "desc": "Creates a Bundler::URI for an HTTP proxy server from ENV variables."}, {"type": "public instance method", "name": "reconnect()", "desc": "Forces reconnection of HTTP connections."}, {"type": "public instance method", "name": "reconnect_ssl()", "desc": "Forces reconnection of SSL connections."}, {"type": "public instance method", "name": "request(uri, req = nil, &block)", "desc": "Makes a request on uri.  If req is nil a Net::HTTP::Get is performed against uri."}, {"type": "public instance method", "name": "reset(connection)", "desc": "Finishes then restarts the Net::HTTP connection"}, {"type": "public instance method", "name": "shutdown()", "desc": "Shuts down all connections"}, {"type": "public instance method", "name": "ssl(connection)", "desc": "Enables SSL on connection"}, {"type": "public instance method", "name": "ssl_timeout=(ssl_timeout)", "desc": "SSL session lifetime"}, {"type": "public instance method", "name": "ssl_version=(ssl_version)", "desc": "SSL version to use"}, {"type": "public instance method", "name": "start(http)", "desc": "Starts the Net::HTTP connection"}, {"type": "public instance method", "name": "unescape(str)", "desc": "Bundler::URI::unescape wrapper"}, {"type": "public instance method", "name": "verify_callback=(callback)", "desc": "SSL verification callback."}, {"type": "public instance method", "name": "verify_depth=(verify_depth)", "desc": "Sets the depth of SSL certificate verification"}, {"type": "public instance method", "name": "verify_mode=(verify_mode)", "desc": "Sets the HTTPS verify mode.  Defaults to OpenSSL::SSL::VERIFY_PEER."}, {"type": "alias", "name": "cert=(certificate)", "desc": "             Alias for: certificate= "}, {"type": "alias", "name": "key=(key)", "desc": "             Alias for: private_key= "}]}