{"entries": [{"type": "attribute", "name": "dependency_names", "desc": " "}, {"type": "attribute", "name": "name", "desc": " "}, {"type": "attribute", "name": "options", "desc": " "}, {"type": "attribute", "name": "uri", "desc": " "}, {"type": "public class method", "name": "new(opts)", "desc": ""}, {"type": "public instance method", "name": "==(other)", "desc": "This shall check if two source object represent the same source."}, {"type": "public instance method", "name": "app_cache_dirname()", "desc": "Name of directory where plugin the is expected to cache the gems when cache is called."}, {"type": "public instance method", "name": "app_cache_path(custom_path = nil)", "desc": "The full path where the plugin should cache the gem so that it can be installed latter."}, {"type": "public instance method", "name": "bundler_plugin_api_source?()", "desc": "@private Returns true"}, {"type": "public instance method", "name": "cache(spec, custom_path = nil)", "desc": "This method is called while caching to save copy of the gems that the source can resolve to path provided by `app_cache_app`so that they can be reinstalled from the cache without querying the remote (i.e. an alternative to remote)"}, {"type": "public instance method", "name": "cached!()", "desc": "Set internal representation to fetch the gems/specs from app cache."}, {"type": "public instance method", "name": "can_lock?(spec)", "desc": "Note: Do not override if you don't know what you are doing."}, {"type": "public instance method", "name": "double_check_for(*)", "desc": "@private This API on source might not be stable, and for now we expect plugins to download all specs in `#specs`, so we implement the method for compatibility purposes and leave it undocumented (and don't support) overriding it)"}, {"type": "public instance method", "name": "eql?(other)", "desc": "When overriding `eql?` please preserve the behaviour as mentioned in docstring for `==` method."}, {"type": "public instance method", "name": "fetch_gemspec_files()", "desc": "This is used by the default `spec` method to constructs the Specification objects for the gems and versions that can be installed by this source plugin."}, {"type": "public instance method", "name": "gem_install_dir()", "desc": "Note: Do not override if you don't know what you are doing."}, {"type": "public instance method", "name": "hash()", "desc": "When overriding `hash` please preserve the behaviour as mentioned in docstring for `==` method, i.e. two methods equal by above comparison should have same hash."}, {"type": "public instance method", "name": "include?(other)", "desc": "Note: Do not override if you don't know what you are doing."}, {"type": "public instance method", "name": "install(spec, opts)", "desc": "Install the gem specified by the spec at appropriate path. `install_path` provides a sufficient default, if the source can only satisfy one gem,  but is not binding."}, {"type": "public instance method", "name": "install_path()", "desc": "A default installation path to install a single gem. If the source servers multiple gems, it's not of much use and the source should one of its own."}, {"type": "public instance method", "name": "installed?()", "desc": "A helper method, not necessary if not used internally."}, {"type": "public instance method", "name": "options_to_lock()", "desc": "Options to be saved in the lockfile so that the source plugin is able to check out same version of gem later."}, {"type": "public instance method", "name": "post_install(spec, disable_exts = false)", "desc": "It builds extensions, generates bins and installs them for the spec provided."}, {"type": "public instance method", "name": "remote!()", "desc": "Set internal representation to fetch the gems/specs from remote."}, {"type": "public instance method", "name": "root()", "desc": "It is used to obtain the full_gem_path."}, {"type": "public instance method", "name": "specs()", "desc": "Parses the gemspec files to find the specs for the gems that can be satisfied by the source."}, {"type": "public instance method", "name": "to_lock()", "desc": "Generates the content to be entered into the lockfile. Saves type and remote and also calls to `options_to_lock`."}, {"type": "public instance method", "name": "to_s()", "desc": ""}, {"type": "public instance method", "name": "unlock!()", "desc": "This is called to update the spec and installation."}, {"type": "public instance method", "name": "unmet_deps()", "desc": "Used by definition."}, {"type": "public instance method", "name": "uri_hash()", "desc": ""}, {"type": "alias", "name": "eql?(other)", "desc": "             Alias for: == "}]}