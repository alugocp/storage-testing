{"entries": [{"type": "constant", "name": "WARNINGS", "desc": "Injects the given content into a file. Different from #gsub_file, this method is\nreversible.\nParameters\u00b6 \u2191\ndestination<String>\n\nRelative path to the destination root\ndata<String>\n\nData to add to the file. Can be given as a block.\nconfig<Hash>\n\ngive :verbose => false to not log the status and the flag for injection\n(:after or :before) or :force => true for insert two or more times the\nsame content.\n\nExamples\u00b6 \u2191\ninsert_into_file \"config/environment.rb\", \"config.gem :thor\", :after => \"Rails::Initializer.run do |config|\\n\"\n\ninsert_into_file \"config/environment.rb\", :after => \"Rails::Initializer.run do |config|\\n\" do\n  gems = ask \"Which gems would you like to add?\"\n  gems.split(\" \").map{ |gem| \"  config.gem :#{gem}\" }.join(\"\\n\")\nend\n"}, {"type": "constant", "name": "destination<String>\n\nRelative path to the destination root\ndata<String>\n\nData to add to the file. Can be given as a block.\nconfig<Hash>\n\ngive :verbose => false to not log the status and the flag for injection\n(:after or :before) or :force => true for insert two or more times the\nsame content.\n", "desc": ""}, {"type": "constant", "name": "data<String>\n\nData to add to the file. Can be given as a block.\nconfig<Hash>\n\ngive :verbose => false to not log the status and the flag for injection\n(:after or :before) or :force => true for insert two or more times the\nsame content.\n", "desc": ""}, {"type": "constant", "name": "config<Hash>\n\ngive :verbose => false to not log the status and the flag for injection\n(:after or :before) or :force => true for insert two or more times the\nsame content.\n", "desc": ""}, {"type": "attribute", "name": "behavior", "desc": " "}, {"type": "public class method", "name": "new(args = [], options = {}, config = {})", "desc": "Extends initializer to add more configuration options."}, {"type": "public instance method", "name": "add_file(destination, *args, &block)", "desc": ""}, {"type": "public instance method", "name": "add_link(destination, *args)", "desc": ""}, {"type": "public instance method", "name": "append_file(path, *args, &block)", "desc": ""}, {"type": "public instance method", "name": "append_to_file(path, *args, &block)", "desc": "Append text to a file. Since it depends on #insert_into_file, it's reversible."}, {"type": "public instance method", "name": "apply(path, config = {})", "desc": "Loads an external file and execute it in the instance binding."}, {"type": "public instance method", "name": "chmod(path, mode, config = {})", "desc": "Changes the mode of the given file or directory."}, {"type": "public instance method", "name": "comment_lines(path, flag, *args)", "desc": "Comment all lines matching a given regex.  It will leave the space which existed before the beginning of the line in tact and will insert a single space after the comment hash."}, {"type": "public instance method", "name": "copy_file(source, *args, &block)", "desc": ""}, {"type": "public instance method", "name": "create_file(destination, *args, &block)", "desc": "Create a new file relative to the destination root with the given data, which is the return value of a block or a data string."}, {"type": "public instance method", "name": "create_link(destination, *args)", "desc": "Create a new file relative to the destination root from the given source."}, {"type": "public instance method", "name": "destination_root()", "desc": "Returns the root for this thor class (also aliased as destination root)."}, {"type": "public instance method", "name": "destination_root=(root)", "desc": "Sets the root for this thor class. Relatives path are added to the directory where the script was invoked and expanded."}, {"type": "public instance method", "name": "directory(source, *args, &block)", "desc": "Copies recursively the files from source directory to root directory. If any of the files finishes with .tt, it's considered to be a template and is placed in the destination without the extension .tt. If any empty directory is found, it's copied and all .empty_directory files are ignored. If any file name is wrapped within % signs, the text within the % signs will be executed as a method and replaced with the returned value. Let's suppose a doc directory with the following files:"}, {"type": "public instance method", "name": "empty_directory(destination, config = {})", "desc": "Creates an empty directory."}, {"type": "public instance method", "name": "find_in_source_paths(file)", "desc": "Receives a file or directory and search for it in the source paths."}, {"type": "public instance method", "name": "get(source, *args, &block)", "desc": "Gets the content at the given address and places it at the given relative destination. If a block is given instead of destination, the content of the url is yielded and used as location."}, {"type": "public instance method", "name": "gsub_file(path, flag, *args, &block)", "desc": "Run a regular expression replacement on a file."}, {"type": "public instance method", "name": "in_root()", "desc": "Goes to the root and execute the given block."}, {"type": "public instance method", "name": "inject_into_class(path, klass, *args, &block)", "desc": "Injects text right after the class definition. Since it depends on #insert_into_file, it's reversible."}, {"type": "public instance method", "name": "inject_into_file(destination, *args, &block)", "desc": ""}, {"type": "public instance method", "name": "inject_into_module(path, module_name, *args, &block)", "desc": "Injects text right after the module definition. Since it depends on #insert_into_file, it's reversible."}, {"type": "public instance method", "name": "insert_into_file(destination, *args, &block)", "desc": ""}, {"type": "public instance method", "name": "inside(dir = \"\", config = {}, &block)", "desc": "Do something in the root or on a provided subfolder. If a relative path is given it's referenced from the current root. The full path is yielded to the block you provide. The path is set back to the previous path when the method exits."}, {"type": "public instance method", "name": "link_file(source, *args)", "desc": "Links the file from the relative source to the relative destination. If the destination is not given it's assumed to be equal to the source."}, {"type": "public instance method", "name": "prepend_file(path, *args, &block)", "desc": ""}, {"type": "public instance method", "name": "prepend_to_file(path, *args, &block)", "desc": "Prepend text to a file. Since it depends on #insert_into_file, it's reversible."}, {"type": "public instance method", "name": "relative_to_original_destination_root(path, remove_dot = true)", "desc": "Returns the given path relative to the absolute root (ie, root where the script started)."}, {"type": "public instance method", "name": "remove_dir(path, config = {})", "desc": ""}, {"type": "public instance method", "name": "remove_file(path, config = {})", "desc": "Removes a file at the given location."}, {"type": "public instance method", "name": "run(command, config = {})", "desc": "Executes a command returning the contents of the command."}, {"type": "public instance method", "name": "run_ruby_script(command, config = {})", "desc": "Executes a ruby script (taking into account WIN32 platform quirks)."}, {"type": "public instance method", "name": "source_paths()", "desc": "Holds source paths in instance so they can be manipulated."}, {"type": "public instance method", "name": "template(source, *args, &block)", "desc": "Gets an ERB template at the relative source, executes it and makes a copy at the relative destination. If the destination is not given it's assumed to be equal to the source removing .tt from the filename."}, {"type": "public instance method", "name": "thor(command, *args)", "desc": "Run a thor command. A hash of options can be given and it's converted to switches."}, {"type": "public instance method", "name": "uncomment_lines(path, flag, *args)", "desc": "Uncomment all lines matching a given regex.  It will leave the space which existed before the comment hash in tact but will remove any spacing between the comment hash and the beginning of the line."}, {"type": "alias", "name": "add_file(destination, *args, &block)", "desc": "             Alias for: create_file "}, {"type": "alias", "name": "add_link(destination, *args)", "desc": "             Alias for: create_link "}, {"type": "alias", "name": "append_file(path, *args, &block)", "desc": "             Alias for: append_to_file "}, {"type": "alias", "name": "inject_into_file(destination, *args, &block)", "desc": "             Alias for: insert_into_file "}, {"type": "alias", "name": "prepend_file(path, *args, &block)", "desc": "             Alias for: prepend_to_file "}, {"type": "alias", "name": "remove_dir(path, config = {})", "desc": "             Alias for: remove_file "}]}