{"entries": [{"type": "public instance method", "name": "all_commands()", "desc": "Returns the commands for this Bundler::Thor class and all subclasses."}, {"type": "public instance method", "name": "all_tasks()", "desc": ""}, {"type": "public instance method", "name": "allow_incompatible_default_type!()", "desc": "If you want to use defaults that don't match the type of an option, either specify `check_default_type: false` or call `allow_incompatible_default_type!`"}, {"type": "public instance method", "name": "argument(name, options = {})", "desc": "Adds an argument to the class and creates an attr_accessor for it."}, {"type": "public instance method", "name": "arguments()", "desc": "Returns this class arguments, looking up in the ancestors chain."}, {"type": "public instance method", "name": "check_default_type!()", "desc": "If you want to raise an error when the default value of an option does not match the type call check_default_type! This will be the default; for compatibility a deprecation warning is issued if necessary."}, {"type": "public instance method", "name": "check_unknown_options!()", "desc": "If you want to raise an error for unknown options, call check_unknown_options! This is disabled by default to allow dynamic invocations."}, {"type": "public instance method", "name": "class_option(name, options = {})", "desc": "Adds an option to the set of class options"}, {"type": "public instance method", "name": "class_options(options = nil)", "desc": "Adds a bunch of options to the set of class options."}, {"type": "public instance method", "name": "commands()", "desc": "Returns the commands for this Bundler::Thor class."}, {"type": "public instance method", "name": "exit_on_failure?()", "desc": "A flag that makes the process exit with status 1 if any error happens."}, {"type": "public instance method", "name": "group(name = nil)", "desc": "Defines the group. This is used when thor list is invoked so you can specify that only commands from a pre-defined group will be shown. Defaults to standard."}, {"type": "public instance method", "name": "namespace(name = nil)", "desc": "Sets the namespace for the Bundler::Thor or Bundler::Thor::Group class. By default the namespace is retrieved from the class name. If your Bundler::Thor class is named Scripts::MyScript, the help method, for example, will be called as:"}, {"type": "public instance method", "name": "no_commands(&block)", "desc": "All methods defined inside the given block are not added as commands."}, {"type": "public instance method", "name": "no_commands?()", "desc": ""}, {"type": "public instance method", "name": "no_commands_context()", "desc": ""}, {"type": "public instance method", "name": "no_tasks(&block)", "desc": ""}, {"type": "public instance method", "name": "public_command(*names)", "desc": "Allows to use private methods from parent in child classes as commands."}, {"type": "public instance method", "name": "public_task(*names)", "desc": ""}, {"type": "public instance method", "name": "remove_argument(*names)", "desc": "Removes a previous defined argument. If :undefine is given, undefine accessors as well."}, {"type": "public instance method", "name": "remove_class_option(*names)", "desc": "Removes a previous defined class option."}, {"type": "public instance method", "name": "remove_command(*names)", "desc": "Removes a given command from this Bundler::Thor class. This is usually done if you are inheriting from another class and don't want it to be available anymore."}, {"type": "public instance method", "name": "remove_task(*names)", "desc": ""}, {"type": "public instance method", "name": "start(given_args = ARGV, config = {})", "desc": "Parses the command and options from the given args, instantiate the class and invoke the command. This method is used when the arguments must be parsed from an array. If you are inside Ruby and want to use a Bundler::Thor class, you can simply initialize it:"}, {"type": "public instance method", "name": "strict_args_position!()", "desc": "If you want only strict string args (useful when cascading thor classes), call strict_args_position! This is disabled by default to allow dynamic invocations."}, {"type": "public instance method", "name": "tasks()", "desc": ""}, {"type": "alias", "name": "all_tasks()", "desc": "             Alias for: all_commands "}, {"type": "alias", "name": "no_tasks(&block)", "desc": "             Alias for: no_commands "}, {"type": "alias", "name": "public_task(*names)", "desc": "             Alias for: public_command "}, {"type": "alias", "name": "remove_task(*names)", "desc": "             Alias for: remove_command "}, {"type": "alias", "name": "tasks()", "desc": "             Alias for: commands "}]}