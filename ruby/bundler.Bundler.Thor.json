{"entries": [{"type": "constant", "name": "DynamicTask", "desc": "A dynamic command that handles method missing scenarios."}, {"type": "constant", "name": "HELP_MAPPINGS", "desc": "Shortcuts for help."}, {"type": "constant", "name": "HiddenTask", "desc": "A command that is hidden in help messages but still invocable."}, {"type": "constant", "name": "TEMPLATE_EXTNAME", "desc": ""}, {"type": "constant", "name": "THOR_RESERVED_WORDS", "desc": "Bundler::Thor methods that should not be overwritten by the user."}, {"type": "constant", "name": "Task", "desc": ""}, {"type": "constant", "name": "VERSION", "desc": ""}, {"type": "public class method", "name": "check_unknown_options!(options = {})", "desc": "Extend check unknown options to accept a hash of conditions."}, {"type": "public class method", "name": "command_help(shell, command_name)", "desc": "Prints help information for the given command."}, {"type": "public class method", "name": "default_command(meth = nil)", "desc": "Sets the default command when thor is executed without an explicit command to be called."}, {"type": "public class method", "name": "default_task(meth = nil)", "desc": ""}, {"type": "public class method", "name": "desc(usage, description, options = {})", "desc": "Defines the usage and the description of the next command."}, {"type": "public class method", "name": "disable_required_check!(*command_names)", "desc": "Disable the check for required options for the given commands. This is useful if you have a command that does not need the required options to work, like help."}, {"type": "public class method", "name": "help(shell, subcommand = false)", "desc": "Prints help information for this class."}, {"type": "public class method", "name": "long_desc(long_description, options = {})", "desc": "Defines the long description of the next command."}, {"type": "public class method", "name": "map(mappings = nil, **kw)", "desc": "Maps an input to a command. If you define:"}, {"type": "public class method", "name": "method_option(name, options = {})", "desc": "Adds an option to the set of method options. If :for is given as option, it allows you to change the options from a previous defined command."}, {"type": "public class method", "name": "method_options(options = nil)", "desc": "Declares the options for the next command to be declared."}, {"type": "public class method", "name": "option(name, options = {})", "desc": ""}, {"type": "public class method", "name": "options(options = nil)", "desc": ""}, {"type": "public class method", "name": "package_name(name, _ = {})", "desc": "Allows for custom \u201cCommand\u201d package naming."}, {"type": "public class method", "name": "printable_commands(all = true, subcommand = false)", "desc": "Returns commands ready to be printed."}, {"type": "public class method", "name": "printable_tasks(all = true, subcommand = false)", "desc": ""}, {"type": "public class method", "name": "register(klass, subcommand_name, usage, description, options = {})", "desc": "Registers another Bundler::Thor subclass as a command."}, {"type": "public class method", "name": "stop_on_unknown_option!(*command_names)", "desc": "Stop parsing of options as soon as an unknown option or a regular argument is encountered.  All remaining arguments are passed to the command. This is useful if you have a command that can receive arbitrary additional options, and where those additional options should not be handled by Bundler::Thor."}, {"type": "public class method", "name": "subcommand(subcommand, subcommand_class)", "desc": ""}, {"type": "public class method", "name": "subcommand_classes()", "desc": ""}, {"type": "public class method", "name": "subcommands()", "desc": ""}, {"type": "public class method", "name": "subtask(subcommand, subcommand_class)", "desc": ""}, {"type": "public class method", "name": "subtasks()", "desc": ""}, {"type": "public class method", "name": "task_help(shell, command_name)", "desc": ""}, {"type": "public instance method", "name": "help(command = nil, subcommand = false)", "desc": ""}]}