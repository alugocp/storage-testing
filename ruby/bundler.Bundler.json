{"entries": [{"type": "constant", "name": "Deprecate", "desc": ""}, {"type": "constant", "name": "FREEBSD", "desc": ""}, {"type": "constant", "name": "NULL", "desc": ""}, {"type": "constant", "name": "ORIGINAL_ENV", "desc": ""}, {"type": "constant", "name": "SUDO_MUTEX", "desc": ""}, {"type": "constant", "name": "VERSION", "desc": ""}, {"type": "constant", "name": "WINDOWS", "desc": ""}, {"type": "constant", "name": "YamlLibrarySyntaxError", "desc": ""}, {"type": "public class method", "name": "URI(uri)", "desc": "Returns uri converted to an Bundler::URI object."}, {"type": "public class method", "name": "app_cache(custom_path = nil)", "desc": ""}, {"type": "public class method", "name": "app_config_path()", "desc": ""}, {"type": "public class method", "name": "bin_path()", "desc": "Returns absolute location of where binstubs are installed to."}, {"type": "public class method", "name": "bundle_path()", "desc": "Returns absolute path of where gems are installed on the filesystem."}, {"type": "public class method", "name": "bundler_major_version()", "desc": ""}, {"type": "public class method", "name": "clean_env()", "desc": "@deprecated Use `unbundled_env` instead"}, {"type": "public class method", "name": "clean_exec(*args)", "desc": "@deprecated Use `unbundled_exec` instead"}, {"type": "public class method", "name": "clean_system(*args)", "desc": "@deprecated Use `unbundled_system` instead"}, {"type": "public class method", "name": "clear_gemspec_cache()", "desc": ""}, {"type": "public class method", "name": "configure()", "desc": ""}, {"type": "public class method", "name": "configured_bundle_path()", "desc": ""}, {"type": "public class method", "name": "current_ruby()", "desc": "Returns current version of Ruby"}, {"type": "public class method", "name": "default_bundle_dir()", "desc": ""}, {"type": "public class method", "name": "default_gemfile()", "desc": ""}, {"type": "public class method", "name": "default_lockfile()", "desc": ""}, {"type": "public class method", "name": "definition(unlock = nil)", "desc": "Returns an instance of Bundler::Definition for given Gemfile and lockfile"}, {"type": "public class method", "name": "environment()", "desc": ""}, {"type": "public class method", "name": "feature_flag()", "desc": ""}, {"type": "public class method", "name": "frozen_bundle?()", "desc": ""}, {"type": "public class method", "name": "git_present?()", "desc": ""}, {"type": "public class method", "name": "home()", "desc": ""}, {"type": "public class method", "name": "install_path()", "desc": ""}, {"type": "public class method", "name": "load()", "desc": ""}, {"type": "public class method", "name": "load_gemspec(file, validate = false)", "desc": ""}, {"type": "public class method", "name": "load_gemspec_uncached(file, validate = false)", "desc": ""}, {"type": "public class method", "name": "load_marshal(data)", "desc": ""}, {"type": "public class method", "name": "local_platform()", "desc": ""}, {"type": "public class method", "name": "locked_gems()", "desc": ""}, {"type": "public class method", "name": "mkdir_p(path, options = {})", "desc": ""}, {"type": "public class method", "name": "original_env()", "desc": "@return [Hash] Environment present before Bundler was activated"}, {"type": "public class method", "name": "original_exec(*args)", "desc": "Run a `Kernel.exec` to a subcommand with the environment present before Bundler was activated"}, {"type": "public class method", "name": "original_system(*args)", "desc": "Run subcommand with the environment present before Bundler was activated"}, {"type": "public class method", "name": "read_file(file)", "desc": ""}, {"type": "public class method", "name": "require(*groups)", "desc": "Setups Bundler environment (see ::setup) if it is not already set, and loads all gems from groups specified. Unlike ::setup, can be called multiple times with different groups (if they were allowed by setup)."}, {"type": "public class method", "name": "require_thor_actions()", "desc": ""}, {"type": "public class method", "name": "requires_sudo?()", "desc": ""}, {"type": "public class method", "name": "reset!()", "desc": ""}, {"type": "public class method", "name": "reset_paths!()", "desc": ""}, {"type": "public class method", "name": "reset_rubygems!()", "desc": ""}, {"type": "public class method", "name": "rm_rf(path)", "desc": ""}, {"type": "public class method", "name": "root()", "desc": ""}, {"type": "public class method", "name": "ruby_scope()", "desc": ""}, {"type": "public class method", "name": "rubygems()", "desc": ""}, {"type": "public class method", "name": "settings()", "desc": ""}, {"type": "public class method", "name": "setup(*groups)", "desc": "Turns on the Bundler runtime. After Bundler.setup call, all load or require of the gems would be allowed only if they are part of the Gemfile or Ruby's standard library. If the versions specified in Gemfile, only those versions would be loaded."}, {"type": "public class method", "name": "specs_path()", "desc": ""}, {"type": "public class method", "name": "sudo(str)", "desc": ""}, {"type": "public class method", "name": "system_bindir()", "desc": ""}, {"type": "public class method", "name": "tmp(name = Process.pid.to_s)", "desc": ""}, {"type": "public class method", "name": "ui()", "desc": ""}, {"type": "public class method", "name": "ui=(ui)", "desc": ""}, {"type": "public class method", "name": "unbundled_env()", "desc": "@return [Hash] Environment with all bundler-related variables removed"}, {"type": "public class method", "name": "unbundled_exec(*args)", "desc": "Run a `Kernel.exec` to a subcommand in an environment with all bundler related variables removed"}, {"type": "public class method", "name": "unbundled_system(*args)", "desc": "Run subcommand in an environment with all bundler related variables removed"}, {"type": "public class method", "name": "use_system_gems?()", "desc": ""}, {"type": "public class method", "name": "user_bundle_path(dir = \"home\")", "desc": ""}, {"type": "public class method", "name": "user_cache()", "desc": ""}, {"type": "public class method", "name": "user_home()", "desc": ""}, {"type": "public class method", "name": "which(executable)", "desc": ""}, {"type": "public class method", "name": "with_clean_env()", "desc": "@deprecated Use `with_unbundled_env` instead"}, {"type": "public class method", "name": "with_friendly_errors()", "desc": ""}, {"type": "public class method", "name": "with_original_env()", "desc": "Run block with environment present before Bundler was activated"}, {"type": "public class method", "name": "with_unbundled_env()", "desc": "Run block with all bundler-related variables removed"}]}