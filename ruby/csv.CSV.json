{"entries": [{"type": "constant", "name": "ConverterEncoding", "desc": "The encoding used by all converters."}, {"type": "constant", "name": "Converters", "desc": "This Hash holds the built-in converters of CSV that\ncan be accessed by name. You can select Converters with #convert or through the\noptions Hash passed to ::new.\n:integer\n\nConverts any field Integer() accepts.\n:float\n\nConverts any field Float() accepts.\n:numeric\n\nA combination of :integer and :float.\n:date\n\nConverts any field Date::parse() accepts.\n:date_time\n\nConverts any field DateTime::parse() accepts.\n:all\n\nAll built-in converters.  A combination of :date_time and\n:numeric.\n\nAll built-in converters transcode field data to UTF-8 before attempting a\nconversion.  If your data cannot be transcoded to UTF-8 the conversion will\nfail and the field will remain unchanged.\nThis Hash is intentionally left unfrozen and users should feel free to add\nvalues to it that can be accessed by all CSV\nobjects.\nTo add a combo field, the value should be an Array of names.  Combo fields\ncan be nested with other combo fields."}, {"type": "constant", "name": ":integer\n\nConverts any field Integer() accepts.\n:float\n\nConverts any field Float() accepts.\n:numeric\n\nA combination of :integer and :float.\n:date\n\nConverts any field Date::parse() accepts.\n:date_time\n\nConverts any field DateTime::parse() accepts.\n:all\n\nAll built-in converters.  A combination of :date_time and\n:numeric.\n", "desc": ""}, {"type": "constant", "name": ":float\n\nConverts any field Float() accepts.\n:numeric\n\nA combination of :integer and :float.\n:date\n\nConverts any field Date::parse() accepts.\n:date_time\n\nConverts any field DateTime::parse() accepts.\n:all\n\nAll built-in converters.  A combination of :date_time and\n:numeric.\n", "desc": ""}, {"type": "constant", "name": ":numeric\n\nA combination of :integer and :float.\n:date\n\nConverts any field Date::parse() accepts.\n:date_time\n\nConverts any field DateTime::parse() accepts.\n:all\n\nAll built-in converters.  A combination of :date_time and\n:numeric.\n", "desc": ""}, {"type": "constant", "name": ":date\n\nConverts any field Date::parse() accepts.\n:date_time\n\nConverts any field DateTime::parse() accepts.\n:all\n\nAll built-in converters.  A combination of :date_time and\n:numeric.\n", "desc": ""}, {"type": "constant", "name": ":date_time\n\nConverts any field DateTime::parse() accepts.\n:all\n\nAll built-in converters.  A combination of :date_time and\n:numeric.\n", "desc": ""}, {"type": "constant", "name": ":all\n\nAll built-in converters.  A combination of :date_time and\n:numeric.\n", "desc": ""}, {"type": "constant", "name": "DEFAULT_OPTIONS", "desc": "The options used when no overrides are given by calling code. They are:\n:col_sep\n\n\",\"\n:row_sep\n\n:auto\n:quote_char\n\n'\"'\n:field_size_limit\n\nnil\n:converters\n\nnil\n:unconverted_fields\n\nnil\n:headers\n\nfalse\n:return_headers\n\nfalse\n:header_converters\n\nnil\n:skip_blanks\n\nfalse\n:force_quotes\n\nfalse\n:skip_lines\n\nnil\n:liberal_parsing\n\nfalse\n:quote_empty\n\ntrue\n"}, {"type": "constant", "name": ":col_sep\n\n\",\"\n:row_sep\n\n:auto\n:quote_char\n\n'\"'\n:field_size_limit\n\nnil\n:converters\n\nnil\n:unconverted_fields\n\nnil\n:headers\n\nfalse\n:return_headers\n\nfalse\n:header_converters\n\nnil\n:skip_blanks\n\nfalse\n:force_quotes\n\nfalse\n:skip_lines\n\nnil\n:liberal_parsing\n\nfalse\n:quote_empty\n\ntrue\n", "desc": ""}, {"type": "constant", "name": ":row_sep\n\n:auto\n:quote_char\n\n'\"'\n:field_size_limit\n\nnil\n:converters\n\nnil\n:unconverted_fields\n\nnil\n:headers\n\nfalse\n:return_headers\n\nfalse\n:header_converters\n\nnil\n:skip_blanks\n\nfalse\n:force_quotes\n\nfalse\n:skip_lines\n\nnil\n:liberal_parsing\n\nfalse\n:quote_empty\n\ntrue\n", "desc": ""}, {"type": "constant", "name": ":quote_char\n\n'\"'\n:field_size_limit\n\nnil\n:converters\n\nnil\n:unconverted_fields\n\nnil\n:headers\n\nfalse\n:return_headers\n\nfalse\n:header_converters\n\nnil\n:skip_blanks\n\nfalse\n:force_quotes\n\nfalse\n:skip_lines\n\nnil\n:liberal_parsing\n\nfalse\n:quote_empty\n\ntrue\n", "desc": ""}, {"type": "constant", "name": ":field_size_limit\n\nnil\n:converters\n\nnil\n:unconverted_fields\n\nnil\n:headers\n\nfalse\n:return_headers\n\nfalse\n:header_converters\n\nnil\n:skip_blanks\n\nfalse\n:force_quotes\n\nfalse\n:skip_lines\n\nnil\n:liberal_parsing\n\nfalse\n:quote_empty\n\ntrue\n", "desc": ""}, {"type": "constant", "name": ":converters\n\nnil\n:unconverted_fields\n\nnil\n:headers\n\nfalse\n:return_headers\n\nfalse\n:header_converters\n\nnil\n:skip_blanks\n\nfalse\n:force_quotes\n\nfalse\n:skip_lines\n\nnil\n:liberal_parsing\n\nfalse\n:quote_empty\n\ntrue\n", "desc": ""}, {"type": "constant", "name": ":unconverted_fields\n\nnil\n:headers\n\nfalse\n:return_headers\n\nfalse\n:header_converters\n\nnil\n:skip_blanks\n\nfalse\n:force_quotes\n\nfalse\n:skip_lines\n\nnil\n:liberal_parsing\n\nfalse\n:quote_empty\n\ntrue\n", "desc": ""}, {"type": "constant", "name": ":headers\n\nfalse\n:return_headers\n\nfalse\n:header_converters\n\nnil\n:skip_blanks\n\nfalse\n:force_quotes\n\nfalse\n:skip_lines\n\nnil\n:liberal_parsing\n\nfalse\n:quote_empty\n\ntrue\n", "desc": ""}, {"type": "constant", "name": ":return_headers\n\nfalse\n:header_converters\n\nnil\n:skip_blanks\n\nfalse\n:force_quotes\n\nfalse\n:skip_lines\n\nnil\n:liberal_parsing\n\nfalse\n:quote_empty\n\ntrue\n", "desc": ""}, {"type": "constant", "name": ":header_converters\n\nnil\n:skip_blanks\n\nfalse\n:force_quotes\n\nfalse\n:skip_lines\n\nnil\n:liberal_parsing\n\nfalse\n:quote_empty\n\ntrue\n", "desc": ""}, {"type": "constant", "name": ":skip_blanks\n\nfalse\n:force_quotes\n\nfalse\n:skip_lines\n\nnil\n:liberal_parsing\n\nfalse\n:quote_empty\n\ntrue\n", "desc": ""}, {"type": "constant", "name": ":force_quotes\n\nfalse\n:skip_lines\n\nnil\n:liberal_parsing\n\nfalse\n:quote_empty\n\ntrue\n", "desc": ""}, {"type": "constant", "name": ":skip_lines\n\nnil\n:liberal_parsing\n\nfalse\n:quote_empty\n\ntrue\n", "desc": ""}, {"type": "constant", "name": ":liberal_parsing\n\nfalse\n:quote_empty\n\ntrue\n", "desc": ""}, {"type": "constant", "name": ":quote_empty\n\ntrue\n", "desc": ""}, {"type": "constant", "name": "DateMatcher", "desc": "A Regexp used to find and convert some common Date formats."}, {"type": "constant", "name": "DateTimeMatcher", "desc": "A Regexp used to find and convert some common DateTime formats."}, {"type": "constant", "name": "FieldInfo", "desc": "A FieldInfo Struct contains details about\na field's position in the data source it was read from.  CSV will pass this Struct to some blocks that make\ndecisions based on field structure.  See CSV.convert_fields() for an\nexample.\nindex\n\nThe zero-based index of the field in its row.\nline\n\nThe line of the data source this row is from.\nheader\n\nThe header for the column, when available.\n"}, {"type": "constant", "name": "index\n\nThe zero-based index of the field in its row.\nline\n\nThe line of the data source this row is from.\nheader\n\nThe header for the column, when available.\n", "desc": ""}, {"type": "constant", "name": "line\n\nThe line of the data source this row is from.\nheader\n\nThe header for the column, when available.\n", "desc": ""}, {"type": "constant", "name": "header\n\nThe header for the column, when available.\n", "desc": ""}, {"type": "constant", "name": "HeaderConverters", "desc": "This Hash holds the built-in header converters of CSV that can be accessed by name. You can select HeaderConverters with #header_convert or through the\noptions Hash passed to ::new.\n:downcase\n\nCalls downcase() on the header String.\n:symbol\n\nLeading/trailing spaces are dropped, string is downcased, remaining spaces\nare replaced with underscores, non-word characters are dropped, and finally\nto_sym() is called.\n\nAll built-in header converters transcode header data to UTF-8 before\nattempting a conversion. If your data cannot be transcoded to UTF-8 the\nconversion will fail and the header will remain unchanged.\nThis Hash is intentionally left unfrozen and users should feel free to add\nvalues to it that can be accessed by all CSV\nobjects.\nTo add a combo field, the value should be an Array of names. Combo fields\ncan be nested with other combo fields."}, {"type": "constant", "name": ":downcase\n\nCalls downcase() on the header String.\n:symbol\n\nLeading/trailing spaces are dropped, string is downcased, remaining spaces\nare replaced with underscores, non-word characters are dropped, and finally\nto_sym() is called.\n", "desc": ""}, {"type": "constant", "name": ":symbol\n\nLeading/trailing spaces are dropped, string is downcased, remaining spaces\nare replaced with underscores, non-word characters are dropped, and finally\nto_sym() is called.\n", "desc": ""}, {"type": "constant", "name": "VERSION", "desc": "The version of the installed library."}, {"type": "attribute", "name": "encoding", "desc": " The Encoding CSV is parsing or writing in.  This will be the Encoding you receive parsed data in and/or the Encoding data will be written in. "}, {"type": "public class method", "name": "filter( **options ) { |row| ... }click to toggle source", "desc": ""}, {"type": "public class method", "name": "foreach(path, mode=\"r\", **options, &block)", "desc": "This method is intended as the primary interface for reading CSV files. You pass a path and any options you wish to set for the read. Each row of file will be passed to the provided block in turn."}, {"type": "public class method", "name": "generate( str, **options ) { |csv| ... }click to toggle source", "desc": ""}, {"type": "public class method", "name": "generate_line(row, **options)", "desc": "This method is a shortcut for converting a single row (Array) into a CSV String."}, {"type": "public class method", "name": "instance(data = $stdout, **options)", "desc": "This method will return a CSV instance, just like ::new, but the instance will be cached and returned for all future calls to this method for the same data object (tested by Object#object_id()) with the same options."}, {"type": "public class method", "name": "new(data, col_sep: \",\", row_sep: :auto, quote_char: '\"', field_size_limit: nil, converters: nil, unconverted_fields: nil, headers: false, return_headers: false, write_headers: nil, header_converters: nil, skip_blanks: false, force_quotes: false, skip_lines: nil, liberal_parsing: false, internal_encoding: nil, external_encoding: nil, encoding: nil, nil_value: nil, empty_value: \"\", quote_empty: true, write_converters: nil, write_nil_value: nil, write_empty_value: \"\", strip: false)", "desc": "This constructor will wrap either a String or IO object passed in data for reading and/or writing. In addition to the CSV instance methods, several IO methods are delegated. (See ::open for a complete list.) If you pass a String for data, you can later retrieve it (after writing to it, for example) with CSV.string()."}, {"type": "public class method", "name": "open( filename, mode = \"rb\", **options ) { |faster_csv| ... }click to toggle source", "desc": ""}, {"type": "public class method", "name": "parse( str, **options ) { |row| ... }click to toggle source", "desc": ""}, {"type": "public class method", "name": "parse_line(line, **options)", "desc": "This method is a shortcut for converting a single line of a CSV String into an Array. Note that if line contains multiple rows, anything beyond the first row is ignored."}, {"type": "public class method", "name": "read(path, **options)", "desc": "Use to slurp a CSV file into an Array of Arrays. Pass the path to the file and any options ::new understands. This method also understands an additional :encoding parameter that you can use to specify the Encoding of the data in the file to be read. You must provide this unless your data is in Encoding::default_external(). CSV will use this to determine how to parse the data. You may provide a second Encoding to have the data transcoded as it is read. For example, encoding: \"UTF-32BE:UTF-8\" would read UTF-32BE data from the file but transcode it to UTF-8 before CSV parses it."}, {"type": "public class method", "name": "readlines(path, **options)", "desc": "Alias for ::read."}, {"type": "public class method", "name": "table(path, **options)", "desc": "A shortcut for:"}, {"type": "public instance method", "name": "<<(row)", "desc": "The primary write method for wrapped Strings and IOs, row (an Array or CSV::Row) is converted to CSV and appended to the data source. When a CSV::Row is passed, only the row's fields() are appended to the output."}, {"type": "public instance method", "name": "add_row(row)", "desc": ""}, {"type": "public instance method", "name": "binmode?()", "desc": ""}, {"type": "public instance method", "name": "col_sep()", "desc": "The encoded :col_sep used in parsing and writing. See ::new for details."}, {"type": "public instance method", "name": "convert( name )click to toggle source", "desc": ""}, {"type": "public instance method", "name": "converters()", "desc": "Returns the current list of converters in effect. See ::new for details. Built-in converters will be returned by name, while others will be returned as is."}, {"type": "public instance method", "name": "each(&block)", "desc": "Yields each row of the data source in turn."}, {"type": "public instance method", "name": "eof()", "desc": ""}, {"type": "public instance method", "name": "eof?()", "desc": ""}, {"type": "public instance method", "name": "field_size_limit()", "desc": "The limit for field size, if any. See ::new for details."}, {"type": "public instance method", "name": "flock(*args)", "desc": ""}, {"type": "public instance method", "name": "force_quotes?()", "desc": "Returns true if all output fields are quoted. See ::new for details."}, {"type": "public instance method", "name": "gets()", "desc": ""}, {"type": "public instance method", "name": "header_convert( name )click to toggle source", "desc": ""}, {"type": "public instance method", "name": "header_converters()", "desc": "Returns the current list of converters in effect for headers. See ::new for details. Built-in converters will be returned by name, while others will be returned as is."}, {"type": "public instance method", "name": "header_row?()", "desc": "Returns true if the next row read will be a header row."}, {"type": "public instance method", "name": "headers()", "desc": "Returns nil if headers will not be used, true if they will but have not yet been read, or the actual headers after they have been read. See ::new for details."}, {"type": "public instance method", "name": "inspect()", "desc": "Returns a simplified description of the key CSV attributes in an ASCII compatible String."}, {"type": "public instance method", "name": "ioctl(*args)", "desc": ""}, {"type": "public instance method", "name": "liberal_parsing?()", "desc": "Returns true if illegal input is handled. See ::new for details."}, {"type": "public instance method", "name": "line()", "desc": "The last row read from this file."}, {"type": "public instance method", "name": "lineno()", "desc": "The line number of the last row read from this file. Fields with nested line-end characters will not affect this count."}, {"type": "public instance method", "name": "path()", "desc": ""}, {"type": "public instance method", "name": "puts(row)", "desc": ""}, {"type": "public instance method", "name": "quote_char()", "desc": "The encoded :quote_char used in parsing and writing. See ::new for details."}, {"type": "public instance method", "name": "read()", "desc": "Slurps the remaining rows and returns an Array of Arrays."}, {"type": "public instance method", "name": "readline()", "desc": ""}, {"type": "public instance method", "name": "readlines()", "desc": ""}, {"type": "public instance method", "name": "return_headers?()", "desc": "Returns true if headers will be returned as a row of results. See ::new for details."}, {"type": "public instance method", "name": "rewind()", "desc": "Rewinds the underlying IO object and resets CSV's lineno() counter."}, {"type": "public instance method", "name": "row_sep()", "desc": "The encoded :row_sep used in parsing and writing. See ::new for details."}, {"type": "public instance method", "name": "shift()", "desc": "The primary read method for wrapped Strings and IOs, a single row is pulled from the data source, parsed and returned as an Array of fields (if header rows are not used) or a CSV::Row (when header rows are used)."}, {"type": "public instance method", "name": "skip_blanks?()", "desc": "Returns true blank lines are skipped by the parser. See ::new for details."}, {"type": "public instance method", "name": "skip_lines()", "desc": "The regex marking a line as a comment. See ::new for details."}, {"type": "public instance method", "name": "stat(*args)", "desc": ""}, {"type": "public instance method", "name": "to_i()", "desc": ""}, {"type": "public instance method", "name": "to_io()", "desc": ""}, {"type": "public instance method", "name": "unconverted_fields?()", "desc": "Returns true if unconverted_fields() to parsed results. See ::new for details."}, {"type": "public instance method", "name": "write_headers?()", "desc": "Returns true if headers are written in output. See ::new for details."}, {"type": "alias", "name": "add_row(row)", "desc": "             Alias for: << "}, {"type": "alias", "name": "eof()", "desc": "             Alias for: eof? "}, {"type": "alias", "name": "gets()", "desc": "             Alias for: shift "}, {"type": "alias", "name": "puts(row)", "desc": "             Alias for: << "}, {"type": "alias", "name": "readline()", "desc": "             Alias for: shift "}, {"type": "alias", "name": "readlines()", "desc": "             Alias for: read "}]}