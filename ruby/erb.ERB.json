{"entries": [{"type": "constant", "name": "NOT_GIVEN", "desc": ""}, {"type": "constant", "name": "ZERO_SAFE_LEVELS", "desc": ""}, {"type": "attribute", "name": "encoding", "desc": " The encoding to eval "}, {"type": "attribute", "name": "filename", "desc": " The optional filename argument passed to Kernel#eval when the ERB code is run "}, {"type": "attribute", "name": "lineno", "desc": " The optional lineno argument passed to Kernel#eval when the ERB code is run "}, {"type": "attribute", "name": "src", "desc": " The Ruby code generated by ERB "}, {"type": "public class method", "name": "new(str, safe_level=NOT_GIVEN, legacy_trim_mode=NOT_GIVEN, legacy_eoutvar=NOT_GIVEN, trim_mode: nil, eoutvar: '_erbout')", "desc": "Constructs a new ERB object with the template specified in str."}, {"type": "public class method", "name": "version()", "desc": "Returns revision information for the erb.rb module."}, {"type": "public instance method", "name": "def_class(superklass=Object, methodname='result')", "desc": "Define unnamed class which has methodname as instance method, and return it."}, {"type": "public instance method", "name": "def_method(mod, methodname, fname='(ERB)')", "desc": "Define methodname as instance method of mod from compiled Ruby source."}, {"type": "public instance method", "name": "def_module(methodname='erb')", "desc": "Create unnamed module, define methodname as instance method of it, and return it."}, {"type": "public instance method", "name": "location=((filename, lineno))", "desc": "Sets optional filename and line number that will be used in ERB code evaluation and error reporting. See also filename= and lineno="}, {"type": "public instance method", "name": "make_compiler(trim_mode)", "desc": "Creates a new compiler for ERB.  See ERB::Compiler.new for details"}, {"type": "public instance method", "name": "result(b=new_toplevel)", "desc": "Executes the generated ERB code to produce a completed template, returning the results of that code.  (See ::new for details on how this process can be affected by safe_level.)"}, {"type": "public instance method", "name": "result_with_hash(hash)", "desc": "Render a template on a new toplevel binding with local variables specified by a Hash object."}, {"type": "public instance method", "name": "run(b=new_toplevel)", "desc": "Generate results and print them. (see #result)"}, {"type": "public instance method", "name": "set_eoutvar(compiler, eoutvar = '_erbout')", "desc": "Can be used to set eoutvar as described in ::new.  It's probably easier to just use the constructor though, since calling this method requires the setup of an ERB compiler object."}]}