{"entries": [{"type": "constant", "name": "DEFAULT", "desc": "DEFAULT\nA predefined pseudo-handle of RTLD_DEFAULT\nWhich will find the first occurrence of the desired symbol using the\ndefault library search order"}, {"type": "constant", "name": "NEXT", "desc": "NEXT\nA predefined pseudo-handle of RTLD_NEXT\nWhich will find the next occurrence of a function in the search order after\nthe current library."}, {"type": "constant", "name": "RTLD_GLOBAL", "desc": "RTLD_GLOBAL\nrtld Fiddle::Handle flag.\nThe symbols defined by this library will be made available for symbol\nresolution of subsequently loaded libraries."}, {"type": "constant", "name": "RTLD_LAZY", "desc": "RTLD_LAZY\nrtld Fiddle::Handle flag.\nPerform lazy binding.  Only resolve symbols as the code that references\nthem is executed.  If the  symbol is never referenced, then it is never\nresolved.  (Lazy binding is only performed for function references;\nreferences to variables are always immediately bound when the library is\nloaded.)"}, {"type": "constant", "name": "RTLD_NOW", "desc": "RTLD_NOW\nrtld Fiddle::Handle flag.\nIf this value is specified or the environment variable LD_BIND_NOW is set\nto a nonempty string, all undefined symbols in the library are resolved\nbefore Fiddle.dlopen returns. \nIf this cannot be done an error is returned."}, {"type": "public class method", "name": "sym(name)click to toggle source", "desc": "Get the address as an Integer for the function named name.  The function is searched via dlsym on RTLD_NEXT."}, {"type": "public class method", "name": "new(library = nil, flags = Fiddle::RTLD_LAZY | Fiddle::RTLD_GLOBAL)click to toggle source", "desc": "Create a new handler that opens library with flags."}, {"type": "public class method", "name": "sym(name)click to toggle source", "desc": "Get the address as an Integer for the function named name."}, {"type": "public instance method", "name": "sym(name)click to toggle source", "desc": "Get the address as an Integer for the function named name."}, {"type": "public instance method", "name": "closeclick to toggle source", "desc": "Close this handle."}, {"type": "public instance method", "name": "close_enabled?click to toggle source", "desc": "Returns true if dlclose() will be called when this handle is garbage collected."}, {"type": "public instance method", "name": "disable_closeclick to toggle source", "desc": "Disable a call to dlclose() when this handle is garbage collected."}, {"type": "public instance method", "name": "enable_closeclick to toggle source", "desc": "Enable a call to dlclose() when this handle is garbage collected."}, {"type": "public instance method", "name": "sym(name)click to toggle source", "desc": "Get the address as an Integer for the function named name."}, {"type": "public instance method", "name": "to_iclick to toggle source", "desc": "Returns the memory address for this handle."}]}