{"entries": [{"type": "public instance method", "name": "[](name)", "desc": "Returns the function mapped to name, that was created by either #extern or #bind"}, {"type": "public instance method", "name": "bind(signature, *opts, &blk)", "desc": "Creates a global method from the given C signature using the given opts as bind parameters with the given block."}, {"type": "public instance method", "name": "bind_function(name, ctype, argtype, call_type = nil, &block)", "desc": "Returns a new closure wrapper for the name function."}, {"type": "public instance method", "name": "create_value(ty, val=nil)", "desc": "Creates a class to wrap the C struct with the value ty"}, {"type": "public instance method", "name": "dlload(*libs)", "desc": "Creates an array of handlers for the given libs, can be an instance of Fiddle::Handle, Fiddle::Importer, or will create a new instance of Fiddle::Handle using Fiddle.dlopen"}, {"type": "public instance method", "name": "extern(signature, *opts)", "desc": "Creates a global method from the given C signature."}, {"type": "public instance method", "name": "handler()", "desc": "The Fiddle::CompositeHandler instance"}, {"type": "public instance method", "name": "import_function(name, ctype, argtype, call_type = nil)", "desc": "Returns a new Fiddle::Function instance at the memory address of the given name function."}, {"type": "public instance method", "name": "import_symbol(name)", "desc": "Returns a new Fiddle::Pointer instance at the memory address of the given name symbol."}, {"type": "public instance method", "name": "import_value(ty, addr)", "desc": "Returns a new instance of the C struct with the value ty at the addr address."}, {"type": "public instance method", "name": "sizeof(ty)", "desc": "Returns the sizeof ty, using Fiddle::CParser#parse_ctype to determine the C type and the appropriate Fiddle constant."}, {"type": "public instance method", "name": "struct(signature)", "desc": "Creates a class to wrap the C struct described by signature."}, {"type": "public instance method", "name": "typealias(alias_type, orig_type)", "desc": "Sets the type alias for alias_type as orig_type"}, {"type": "public instance method", "name": "union(signature)", "desc": "Creates a class to wrap the C union described by signature."}, {"type": "public instance method", "name": "value(ty, val=nil)", "desc": ""}, {"type": "alias", "name": "value(ty, val=nil)", "desc": "             Alias for: create_value "}]}