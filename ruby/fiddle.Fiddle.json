{"entries": [{"type": "constant", "name": "ALIGN_CHAR", "desc": "ALIGN_CHAR\nThe alignment size of a char"}, {"type": "constant", "name": "ALIGN_DOUBLE", "desc": "ALIGN_DOUBLE\nThe alignment size of a double"}, {"type": "constant", "name": "ALIGN_FLOAT", "desc": "ALIGN_FLOAT\nThe alignment size of a float"}, {"type": "constant", "name": "ALIGN_INT", "desc": "ALIGN_INT\nThe alignment size of an int"}, {"type": "constant", "name": "ALIGN_INTPTR_T", "desc": "ALIGN_INTPTR_T\nThe alignment size of a intptr_t"}, {"type": "constant", "name": "ALIGN_LONG", "desc": "ALIGN_LONG\nThe alignment size of a long"}, {"type": "constant", "name": "ALIGN_LONG_LONG", "desc": "ALIGN_LONG_LONG\nThe alignment size of a long long"}, {"type": "constant", "name": "ALIGN_PTRDIFF_T", "desc": "ALIGN_PTRDIFF_T\nThe alignment size of a ptrdiff_t"}, {"type": "constant", "name": "ALIGN_SHORT", "desc": "ALIGN_SHORT\nThe alignment size of a short"}, {"type": "constant", "name": "ALIGN_SIZE_T", "desc": "ALIGN_SIZE_T\nThe alignment size of a size_t"}, {"type": "constant", "name": "ALIGN_SSIZE_T", "desc": "ALIGN_SSIZE_T\nThe alignment size of a ssize_t"}, {"type": "constant", "name": "ALIGN_UINTPTR_T", "desc": "ALIGN_UINTPTR_T\nThe alignment size of a uintptr_t"}, {"type": "constant", "name": "ALIGN_VOIDP", "desc": "ALIGN_VOIDP\nThe alignment size of a void*"}, {"type": "constant", "name": "BUILD_RUBY_PLATFORM", "desc": "BUILD_RUBY_PLATFORM\nPlatform built against (i.e. \u201cx86_64-linux\u201d, etc.)\nSee also RUBY_PLATFORM"}, {"type": "constant", "name": "RUBY_FREE", "desc": "RUBY_FREE\nAddress of the ruby_xfree() function"}, {"type": "constant", "name": "SIZEOF_CHAR", "desc": "SIZEOF_CHAR\nsize of a char"}, {"type": "constant", "name": "SIZEOF_DOUBLE", "desc": "SIZEOF_DOUBLE\nsize of a double"}, {"type": "constant", "name": "SIZEOF_FLOAT", "desc": "SIZEOF_FLOAT\nsize of a float"}, {"type": "constant", "name": "SIZEOF_INT", "desc": "SIZEOF_INT\nsize of an int"}, {"type": "constant", "name": "SIZEOF_INTPTR_T", "desc": "SIZEOF_INTPTR_T\nsize of a intptr_t"}, {"type": "constant", "name": "SIZEOF_LONG", "desc": "SIZEOF_LONG\nsize of a long"}, {"type": "constant", "name": "SIZEOF_LONG_LONG", "desc": "SIZEOF_LONG_LONG\nsize of a long long"}, {"type": "constant", "name": "SIZEOF_PTRDIFF_T", "desc": "SIZEOF_PTRDIFF_T\nsize of a ptrdiff_t"}, {"type": "constant", "name": "SIZEOF_SHORT", "desc": "SIZEOF_SHORT\nsize of a short"}, {"type": "constant", "name": "SIZEOF_SIZE_T", "desc": "SIZEOF_SIZE_T\nsize of a size_t"}, {"type": "constant", "name": "SIZEOF_SSIZE_T", "desc": "SIZEOF_SSIZE_T\nsize of a ssize_t"}, {"type": "constant", "name": "SIZEOF_UINTPTR_T", "desc": "SIZEOF_UINTPTR_T\nsize of a uintptr_t"}, {"type": "constant", "name": "SIZEOF_VOIDP", "desc": "SIZEOF_VOIDP\nsize of a void*"}, {"type": "constant", "name": "TYPE_CHAR", "desc": "TYPE_CHAR\nC type - char"}, {"type": "constant", "name": "TYPE_DOUBLE", "desc": "TYPE_DOUBLE\nC type - double"}, {"type": "constant", "name": "TYPE_FLOAT", "desc": "TYPE_FLOAT\nC type - float"}, {"type": "constant", "name": "TYPE_INT", "desc": "TYPE_INT\nC type - int"}, {"type": "constant", "name": "TYPE_INTPTR_T", "desc": "TYPE_INTPTR_T\nC type - intptr_t"}, {"type": "constant", "name": "TYPE_LONG", "desc": "TYPE_LONG\nC type - long"}, {"type": "constant", "name": "TYPE_LONG_LONG", "desc": "TYPE_LONG_LONG\nC type - long long"}, {"type": "constant", "name": "TYPE_PTRDIFF_T", "desc": "TYPE_PTRDIFF_T\nC type - ptrdiff_t"}, {"type": "constant", "name": "TYPE_SHORT", "desc": "TYPE_SHORT\nC type - short"}, {"type": "constant", "name": "TYPE_SIZE_T", "desc": "TYPE_SIZE_T\nC type - size_t"}, {"type": "constant", "name": "TYPE_SSIZE_T", "desc": "TYPE_SSIZE_T\nC type - ssize_t"}, {"type": "constant", "name": "TYPE_UINTPTR_T", "desc": "TYPE_UINTPTR_T\nC type - uintptr_t"}, {"type": "constant", "name": "TYPE_VOID", "desc": "TYPE_VOID\nC type - void"}, {"type": "constant", "name": "TYPE_VOIDP", "desc": "TYPE_VOIDP\nC type - void*"}, {"type": "constant", "name": "WINDOWS", "desc": "Returns a boolean regarding whether the host is WIN32"}, {"type": "public class method", "name": "dlopen(library) => Fiddle::Handleclick to toggle source", "desc": "Creates a new handler that opens library, and returns an instance of Fiddle::Handle."}, {"type": "public class method", "name": "dlunwrap(addr)click to toggle source", "desc": "Returns the hexadecimal representation of a memory pointer address addr"}, {"type": "public class method", "name": "dlwrap(val)click to toggle source", "desc": "Returns a memory pointer of a function's hexadecimal address location val"}, {"type": "public class method", "name": "free(addr)click to toggle source", "desc": "Free the memory at address addr"}, {"type": "public class method", "name": "last_error()", "desc": "Returns the last Error of the current executing Thread or nil if none"}, {"type": "public class method", "name": "last_error=(error)", "desc": "Sets the last Error of the current executing Thread to error"}, {"type": "public class method", "name": "malloc(size)click to toggle source", "desc": "Allocate size bytes of memory and return the integer memory address for the allocated memory."}, {"type": "public class method", "name": "realloc(addr, size)click to toggle source", "desc": "Change the size of the memory allocated at the memory location addr to size bytes.  Returns the memory address of the reallocated memory, which may be different than the address passed in."}, {"type": "public class method", "name": "win32_last_error()", "desc": "Returns the last win32 Error of the current executing Thread or nil if none"}, {"type": "public class method", "name": "win32_last_error=(error)", "desc": "Sets the last win32 Error of the current executing Thread to error"}]}