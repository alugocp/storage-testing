{"entries": [{"type": "constant", "name": "VERSION", "desc": ""}, {"type": "public class method", "name": "cd(dir, verbose: nil)", "desc": "Changes the current directory to the directory dir."}, {"type": "public class method", "name": "chdir(dir, verbose: nil)", "desc": ""}, {"type": "public class method", "name": "chmod(mode, list, noop: nil, verbose: nil)", "desc": "Changes permission bits on the named files (in list) to the bit pattern represented by mode."}, {"type": "public class method", "name": "chmod_R(mode, list, noop: nil, verbose: nil, force: nil)", "desc": "Changes permission bits on the named files (in list) to the bit pattern represented by mode."}, {"type": "public class method", "name": "chown(user, group, list, noop: nil, verbose: nil)", "desc": "Changes owner and group on the named files (in list) to the user user and the group group.  user and group may be an ID (Integer/String) or a name (String). If user or group is nil, this method does not change the attribute."}, {"type": "public class method", "name": "chown_R(user, group, list, noop: nil, verbose: nil, force: nil)", "desc": "Changes owner and group on the named files (in list) to the user user and the group group recursively. user and group may be an ID (Integer/String) or a name (String).  If user or group is nil, this method does not change the attribute."}, {"type": "public class method", "name": "cmp(a, b)", "desc": ""}, {"type": "public class method", "name": "collect_method(opt)", "desc": "Returns an Array of methods names which have the option opt."}, {"type": "public class method", "name": "commands()", "desc": "Returns an Array of names of high-level methods that accept any keyword arguments."}, {"type": "public class method", "name": "compare_file(a, b)", "desc": "Returns true if the contents of a file a and a file b are identical."}, {"type": "public class method", "name": "compare_stream(a, b)", "desc": "Returns true if the contents of a stream a and b are identical."}, {"type": "public class method", "name": "copy(src, dest, preserve: nil, noop: nil, verbose: nil)", "desc": ""}, {"type": "public class method", "name": "copy_entry(src, dest, preserve = false, dereference_root = false, remove_destination = false)", "desc": "Copies a file system entry src to dest. If src is a directory, this method copies its contents recursively. This method preserves file types, c.f. symlink, directory\u2026 (FIFO, device files and etc. are not supported yet)"}, {"type": "public class method", "name": "copy_file(src, dest, preserve = false, dereference = true)", "desc": "Copies file contents of src to dest. Both of src and dest must be a path name."}, {"type": "public class method", "name": "copy_stream(src, dest)", "desc": "Copies stream src to dest. src must respond to read(n) and dest must respond to write(str)."}, {"type": "public class method", "name": "cp(src, dest, preserve: nil, noop: nil, verbose: nil)", "desc": "Copies a file content src to dest.  If dest is a directory, copies src to dest/src."}, {"type": "public class method", "name": "cp_lr(src, dest, noop: nil, verbose: nil, dereference_root: true, remove_destination: false)", "desc": "Hard link src to dest. If src is a directory, this method links all its contents recursively. If dest is a directory, links src to dest/src."}, {"type": "public class method", "name": "cp_r(src, dest, preserve: nil, noop: nil, verbose: nil, dereference_root: true, remove_destination: nil)", "desc": "Copies src to dest. If src is a directory, this method copies all its contents recursively. If dest is a directory, copies src to dest/src."}, {"type": "public class method", "name": "getwd()", "desc": ""}, {"type": "public class method", "name": "have_option?(mid, opt)", "desc": "Returns true if the method mid have an option opt."}, {"type": "public class method", "name": "identical?(a, b)", "desc": ""}, {"type": "public class method", "name": "install(src, dest, mode: nil, owner: nil, group: nil, preserve: nil, noop: nil, verbose: nil)", "desc": "If src is not same as dest, copies it and changes the permission mode to mode.  If dest is a directory, destination is dest/src. This method removes destination before copy."}, {"type": "public class method", "name": "link(src, dest, force: nil, noop: nil, verbose: nil)", "desc": ""}, {"type": "public class method", "name": "link_entry(src, dest, dereference_root = false, remove_destination = false)", "desc": "Hard links a file system entry src to dest. If src is a directory, this method links its contents recursively."}, {"type": "public class method", "name": "ln(target, link, force: nil, noop: nil, verbose: nil)click to toggle source", "desc": ""}, {"type": "public class method", "name": "ln_s(target, link, force: nil, noop: nil, verbose: nil)click to toggle source", "desc": ""}, {"type": "public class method", "name": "ln_sf(*args)click to toggle source", "desc": "Same as"}, {"type": "public class method", "name": "makedirs(list, mode: nil, noop: nil, verbose: nil)", "desc": ""}, {"type": "public class method", "name": "mkdir(list, mode: nil, noop: nil, verbose: nil)", "desc": "Creates one or more directories."}, {"type": "public class method", "name": "mkdir_p(list, mode: nil, noop: nil, verbose: nil)", "desc": "Creates a directory and all its parent directories. For example,"}, {"type": "public class method", "name": "mkpath(list, mode: nil, noop: nil, verbose: nil)", "desc": ""}, {"type": "public class method", "name": "move(src, dest, force: nil, noop: nil, verbose: nil, secure: nil)", "desc": ""}, {"type": "public class method", "name": "mv(src, dest, force: nil, noop: nil, verbose: nil, secure: nil)", "desc": "Moves file(s) src to dest.  If file and dest exist on the different disk partition, the file is copied then the original file is removed."}, {"type": "public class method", "name": "options()", "desc": "Returns an Array of option names."}, {"type": "public class method", "name": "options_of(mid)", "desc": "Returns an Array of option names of the method mid."}, {"type": "public class method", "name": "pwd()", "desc": "Returns the name of the current directory."}, {"type": "public class method", "name": "remove(list, force: nil, noop: nil, verbose: nil)", "desc": ""}, {"type": "public class method", "name": "remove_dir(path, force = false)", "desc": "Removes a directory dir and its contents recursively. This method ignores StandardError if force is true."}, {"type": "public class method", "name": "remove_entry(path, force = false)", "desc": "This method removes a file system entry path. path might be a regular file, a directory, or something. If path is a directory, remove it recursively."}, {"type": "public class method", "name": "remove_entry_secure(path, force = false)", "desc": "This method removes a file system entry path.  path shall be a regular file, a directory, or something.  If path is a directory, remove it recursively.  This method is required to avoid TOCTTOU (time-of-check-to-time-of-use) local security vulnerability of rm_r. rm_r causes security hole when:"}, {"type": "public class method", "name": "remove_file(path, force = false)", "desc": "Removes a file path. This method ignores StandardError if force is true."}, {"type": "public class method", "name": "rm(list, force: nil, noop: nil, verbose: nil)", "desc": "Remove file(s) specified in list.  This method cannot remove directories. All StandardErrors are ignored when the :force option is set."}, {"type": "public class method", "name": "rm_f(list, noop: nil, verbose: nil)", "desc": "Equivalent to"}, {"type": "public class method", "name": "rm_r(list, force: nil, noop: nil, verbose: nil, secure: nil)", "desc": "remove files list[0] list[1]\u2026 If list[n] is a directory, removes its all contents recursively. This method ignores StandardError when :force option is set."}, {"type": "public class method", "name": "rm_rf(list, noop: nil, verbose: nil, secure: nil)", "desc": "Equivalent to"}, {"type": "public class method", "name": "rmdir(list, parents: nil, noop: nil, verbose: nil)", "desc": "Removes one or more directories."}, {"type": "public class method", "name": "rmtree(list, noop: nil, verbose: nil, secure: nil)", "desc": ""}, {"type": "public class method", "name": "safe_unlink(list, noop: nil, verbose: nil)", "desc": ""}, {"type": "public class method", "name": "symlink(src, dest, force: nil, noop: nil, verbose: nil)", "desc": ""}, {"type": "public class method", "name": "touch(list, noop: nil, verbose: nil, mtime: nil, nocreate: nil)", "desc": "Updates modification time (mtime) and access time (atime) of file(s) in list.  Files are created if they don't exist."}, {"type": "public class method", "name": "uptodate?(new, old_list)", "desc": "Returns true if new is newer than all old_list. Non-existent files are older than any file."}]}