{"entries": [{"type": "constant", "name": "Infinity", "desc": ""}, {"type": "constant", "name": "JSON_LOADED", "desc": ""}, {"type": "constant", "name": "MinusInfinity", "desc": ""}, {"type": "constant", "name": "NaN", "desc": ""}, {"type": "constant", "name": "UnparserError", "desc": "This exception is raised if a generator or unparser error occurs."}, {"type": "constant", "name": "VERSION", "desc": "JSON version"}, {"type": "attribute", "name": "create_id", "desc": " This is create identifier, which is used to decide if the json_create hook of a class should be called. It defaults to 'json_class'. "}, {"type": "attribute", "name": "dump_default_options", "desc": " The global default options for the #dump method: :max_nesting: false :allow_nan: true :allow_blank: true "}, {"type": "attribute", "name": "generator", "desc": " Returns the JSON generator module that is used by JSON. This is either JSON::Ext::Generator or JSON::Pure::Generator. "}, {"type": "attribute", "name": "load_default_options", "desc": " The global default options for the #load method: :max_nesting: false :allow_nan: true :allow_blank: true "}, {"type": "attribute", "name": "parser", "desc": " Returns the JSON parser class that is used by JSON. This is either JSON::Ext::Parser or JSON::Pure::Parser. "}, {"type": "attribute", "name": "state", "desc": " Returns the JSON generator state class that is used by JSON. This is either JSON::Ext::Generator::State or JSON::Pure::Generator::State. "}, {"type": "public class method", "name": "[](object, opts = {})", "desc": "If object is string-like, parse the string and return the parsed result as a Ruby data structure. Otherwise generate a JSON text from the Ruby data structure object and return it."}, {"type": "public class method", "name": "iconv(to, from, string)", "desc": "Encodes string using Ruby's String.encode"}, {"type": "public class method", "name": "restore(source, proc = nil, options = {})", "desc": ""}, {"type": "public instance method", "name": "dump(obj, anIO = nil, limit = nil)", "desc": "Dumps obj as a JSON string, i.e. calls generate on the object and returns the result."}, {"type": "public instance method", "name": "fast_generate(obj, opts = nil)", "desc": "Generate a JSON document from the Ruby data structure obj and return it. This method disables the checks for circles in Ruby objects."}, {"type": "public instance method", "name": "generate(obj, opts = nil)", "desc": "Generate a JSON document from the Ruby data structure obj and return it. state is * a JSON::State object,"}, {"type": "public instance method", "name": "load(source, proc = nil, options = {})", "desc": "Load a ruby data structure from a JSON source and return it. A source can either be a string-like object, an IO-like object, or an object responding to the read method. If proc was given, it will be called with any nested Ruby object as an argument recursively in depth first order. To modify the default options pass in the optional options argument as well."}, {"type": "public instance method", "name": "parse(source, opts = {})", "desc": "Parse the JSON document source into a Ruby data structure and return it."}, {"type": "public instance method", "name": "parse!(source, opts = {})", "desc": "Parse the JSON document source into a Ruby data structure and return it. The bang version of the parse method defaults to the more dangerous values for the opts hash, so be sure only to parse trusted source documents."}, {"type": "public instance method", "name": "pretty_generate(obj, opts = nil)", "desc": "Generate a JSON document from the Ruby data structure obj and return it. The returned document is a prettier form of the document returned by unparse."}, {"type": "public instance method", "name": "recurse_proc(result, &proc)", "desc": "Recursively calls passed Proc if the parsed data structure is an Array or Hash"}]}