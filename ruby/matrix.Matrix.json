{"entries": [{"type": "constant", "name": "VERSION", "desc": ""}, {"type": "attribute", "name": "rows", "desc": " instance creations "}, {"type": "public class method", "name": "I(n)", "desc": ""}, {"type": "public class method", "name": "[](*rows)", "desc": "Creates a matrix where each argument is a row."}, {"type": "public class method", "name": "build(row_count, column_count = row_count)", "desc": "Creates a matrix of size row_count x column_count. It fills the values by calling the given block, passing the current row and column. Returns an enumerator if no block is given."}, {"type": "public class method", "name": "column_vector(column)", "desc": "Creates a single-column matrix where the values of that column are as given in column."}, {"type": "public class method", "name": "columns(columns)", "desc": "Creates a matrix using columns as an array of column vectors."}, {"type": "public class method", "name": "combine(*matrices)", "desc": "Create a matrix by combining matrices entrywise, using the given block"}, {"type": "public class method", "name": "diagonal(*values)", "desc": "Creates a matrix where the diagonal elements are composed of values."}, {"type": "public class method", "name": "empty(row_count = 0, column_count = 0)", "desc": "Creates a empty matrix of row_count x column_count. At least one of row_count or column_count must be 0."}, {"type": "public class method", "name": "hstack(x, *matrices)", "desc": "Create a matrix by stacking matrices horizontally"}, {"type": "public class method", "name": "identity(n)", "desc": "Creates an n by n identity matrix."}, {"type": "public class method", "name": "new(rows, column_count = rows[0].size)", "desc": "::new is private; use ::rows, columns, [], etc\u2026 to create."}, {"type": "public class method", "name": "row_vector(row)", "desc": "Creates a single-row matrix where the values of that row are as given in row."}, {"type": "public class method", "name": "rows(rows, copy = true)", "desc": "Creates a matrix where rows is an array of arrays, each of which is a row of the matrix.  If the optional argument copy is false, use the given arrays as the internal structure of the matrix without copying."}, {"type": "public class method", "name": "scalar(n, value)", "desc": "Creates an n by n diagonal matrix where each diagonal element is value."}, {"type": "public class method", "name": "unit(n)", "desc": ""}, {"type": "public class method", "name": "vstack(x, *matrices)", "desc": "Create a matrix by stacking matrices vertically"}, {"type": "public class method", "name": "zero(row_count, column_count = row_count)", "desc": "Creates a zero matrix."}, {"type": "public instance method", "name": "combine(*matrices, &block)", "desc": ""}]}