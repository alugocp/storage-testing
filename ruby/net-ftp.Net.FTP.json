{"entries": [{"type": "constant", "name": "CASE_DEPENDENT_PARSER", "desc": ""}, {"type": "constant", "name": "CASE_INDEPENDENT_PARSER", "desc": ""}, {"type": "constant", "name": "DECIMAL_PARSER", "desc": ""}, {"type": "constant", "name": "FACT_PARSERS", "desc": ""}, {"type": "constant", "name": "OCTAL_PARSER", "desc": ""}, {"type": "constant", "name": "TIME_PARSER", "desc": ""}, {"type": "attribute", "name": "binary", "desc": " When true, transfers are performed in binary mode.  Default: true. "}, {"type": "attribute", "name": "debug_mode", "desc": " When true, all traffic to and from the server is written to +$stdout+.  Default: false. "}, {"type": "attribute", "name": "last_response", "desc": " The server's last response. "}, {"type": "attribute", "name": "last_response_code", "desc": " The server's last response code. "}, {"type": "attribute", "name": "lastresp", "desc": " The server's last response code. "}, {"type": "attribute", "name": "open_timeout", "desc": " Number of seconds to wait for the connection to open. Any number may be used, including Floats for fractional seconds. If the FTP object cannot open a connection in this many seconds, it raises a Net::OpenTimeout exception. The default value is nil. "}, {"type": "attribute", "name": "passive", "desc": " When true, the connection is in passive mode.  Default: true. "}, {"type": "attribute", "name": "read_timeout", "desc": " Number of seconds to wait for one block to be read (via one read(2) call). Any number may be used, including Floats for fractional seconds. If the FTP object cannot read data in this many seconds, it raises a Timeout::Error exception. The default value is 60 seconds. "}, {"type": "attribute", "name": "resume", "desc": " Sets or retrieves the resume status, which decides whether incomplete transfers are resumed or restarted.  Default: false. "}, {"type": "attribute", "name": "ssl_handshake_timeout", "desc": " Number of seconds to wait for the TLS handshake. Any number may be used, including Floats for fractional seconds. If the FTP object cannot complete the TLS handshake in this many seconds, it raises a Net::OpenTimeout exception. The default value is nil. If ssl_handshake_timeout is nil, open_timeout is used instead. "}, {"type": "attribute", "name": "welcome", "desc": " The server's welcome message. "}, {"type": "public class method", "name": "default_passive()", "desc": "When true, connections are in passive mode per default. Default: true."}, {"type": "public class method", "name": "default_passive=(value)", "desc": "When true, connections are in passive mode per default. Default: true."}, {"type": "public class method", "name": "Net::FTP.new(host = nil, options = {})click to toggle source", "desc": "Creates and returns a new FTP object. If a host is given, a connection is made."}, {"type": "public class method", "name": "open(host, *args)", "desc": "A synonym for FTP.new, but with a mandatory host parameter."}, {"type": "public instance method", "name": "abort()", "desc": "Aborts the previous command (ABOR command)."}, {"type": "public instance method", "name": "acct(account)", "desc": "Sends the ACCT command."}, {"type": "public instance method", "name": "binary=(newmode)", "desc": "A setter to toggle transfers in binary mode. newmode is either true or false"}, {"type": "public instance method", "name": "chdir(dirname)", "desc": "Changes the (remote) directory."}, {"type": "public instance method", "name": "close()", "desc": "Closes the connection.  Further operations are impossible until you open a new connection with connect."}, {"type": "public instance method", "name": "closed?()", "desc": "Returns true iff the connection is closed."}, {"type": "public instance method", "name": "connect(host, port = FTP_PORT)", "desc": "Establishes an FTP connection to host, optionally overriding the default port. If the environment variable SOCKS_SERVER is set, sets up the connection through a SOCKS proxy. Raises an exception (typically Errno::ECONNREFUSED) if the connection cannot be established."}, {"type": "public instance method", "name": "delete(filename)", "desc": "Deletes a file on the server."}, {"type": "public instance method", "name": "dir(*args)", "desc": ""}, {"type": "public instance method", "name": "features()", "desc": "Issues a FEAT command"}, {"type": "public instance method", "name": "get(remotefile, localfile = File.basename(remotefile), blocksize = DEFAULT_BLOCKSIZE)", "desc": "Retrieves remotefile in whatever mode the session is set (text or binary).  See gettextfile and getbinaryfile."}, {"type": "public instance method", "name": "getbinaryfile(remotefile, localfile = File.basename(remotefile), blocksize = DEFAULT_BLOCKSIZE)", "desc": "Retrieves remotefile in binary mode, storing the result in localfile. If localfile is nil, returns retrieved data. If a block is supplied, it is passed the retrieved data in blocksize chunks."}, {"type": "public instance method", "name": "getdir()", "desc": ""}, {"type": "public instance method", "name": "gettextfile(remotefile, localfile = File.basename(remotefile))", "desc": "Retrieves remotefile in ASCII (text) mode, storing the result in localfile. If localfile is nil, returns retrieved data. If a block is supplied, it is passed the retrieved data one line at a time."}, {"type": "public instance method", "name": "help(arg = nil)", "desc": "Issues the HELP command."}, {"type": "public instance method", "name": "list(*args)", "desc": "Returns an array of file information in the directory (the output is like `ls -l`).  If a block is given, it iterates through the listing."}, {"type": "public instance method", "name": "login(user = \"anonymous\", passwd = nil, acct = nil)", "desc": "Logs in to the remote host.  The session must have been previously connected.  If user is the string \u201canonymous\u201d and the password is nil, \u201canonymous@\u201d is used as a password.  If the acct parameter is not nil, an FTP ACCT command is sent following the successful login.  Raises an exception on error (typically Net::FTPPermError)."}, {"type": "public instance method", "name": "ls(*args)", "desc": ""}, {"type": "public instance method", "name": "mdtm(filename)", "desc": "Returns the raw last modification time of the (remote) file in the format \u201cYYYYMMDDhhmmss\u201d (MDTM command)."}, {"type": "public instance method", "name": "mkdir(dirname)", "desc": "Creates a remote directory."}, {"type": "public instance method", "name": "mlsd(pathname = nil)", "desc": "Returns an array of the entries of the directory specified by pathname. Each entry has the facts (e.g., size, last modification time, etc.) and the pathname. If a block is given, it iterates through the listing. If pathname is omitted, the current directory is assumed."}, {"type": "public instance method", "name": "mlst(pathname = nil)", "desc": "Returns data (e.g., size, last modification time, entry type, etc.) about the file or directory specified by pathname. If pathname is omitted, the current directory is assumed."}, {"type": "public instance method", "name": "mtime(filename, local = false)", "desc": "Returns the last modification time of the (remote) file.  If local is true, it is returned as a local time, otherwise it's a UTC time."}, {"type": "public instance method", "name": "nlst(dir = nil)", "desc": "Returns an array of filenames in the remote directory."}, {"type": "public instance method", "name": "noop()", "desc": "Issues a NOOP command."}, {"type": "public instance method", "name": "option(name, params = nil)", "desc": "Issues an OPTS command"}, {"type": "public instance method", "name": "put(localfile, remotefile = File.basename(localfile), blocksize = DEFAULT_BLOCKSIZE, &block)", "desc": "Transfers localfile to the server in whatever mode the session is set (text or binary).  See puttextfile and putbinaryfile."}, {"type": "public instance method", "name": "putbinaryfile(localfile, remotefile = File.basename(localfile), blocksize = DEFAULT_BLOCKSIZE)", "desc": "Transfers localfile to the server in binary mode, storing the result in remotefile. If a block is supplied, calls it, passing in the transmitted data in blocksize chunks."}, {"type": "public instance method", "name": "puttextfile(localfile, remotefile = File.basename(localfile))", "desc": "Transfers localfile to the server in ASCII (text) mode, storing the result in remotefile. If callback or an associated block is supplied, calls it, passing in the transmitted data one line at a time."}, {"type": "public instance method", "name": "pwd()", "desc": "Returns the current remote directory."}, {"type": "public instance method", "name": "quit()", "desc": "Exits the FTP session."}, {"type": "public instance method", "name": "read_timeout=(sec)", "desc": "Setter for the #read_timeout attribute."}, {"type": "public instance method", "name": "rename(fromname, toname)", "desc": "Renames a file on the server."}, {"type": "public instance method", "name": "retrbinary(cmd, blocksize, rest_offset = nil)", "desc": "Puts the connection into binary (image) mode, issues the given command, and fetches the data returned, passing it to the associated block in chunks of blocksize characters. Note that cmd is a server command (such as \u201cRETR myfile\u201d)."}, {"type": "public instance method", "name": "retrlines(cmd)", "desc": "Puts the connection into ASCII (text) mode, issues the given command, and passes the resulting data, one line at a time, to the associated block. If no block is given, prints the lines. Note that cmd is a server command (such as \u201cRETR myfile\u201d)."}, {"type": "public instance method", "name": "rmdir(dirname)", "desc": "Removes a remote directory."}, {"type": "public instance method", "name": "sendcmd(cmd)", "desc": "Sends a command and returns the response."}, {"type": "public instance method", "name": "set_socket(sock, get_greeting = true)", "desc": "Set the socket used to connect to the FTP server."}, {"type": "public instance method", "name": "site(arg)", "desc": "Issues a SITE command."}, {"type": "public instance method", "name": "size(filename)", "desc": "Returns the size of the given (remote) filename."}, {"type": "public instance method", "name": "status(pathname = nil)", "desc": "Returns the status (STAT command)."}, {"type": "public instance method", "name": "storbinary(cmd, file, blocksize, rest_offset = nil)", "desc": "Puts the connection into binary (image) mode, issues the given server-side command (such as \u201cSTOR myfile\u201d), and sends the contents of the file named file to the server. If the optional block is given, it also passes it the data, in chunks of blocksize characters."}, {"type": "public instance method", "name": "storlines(cmd, file)", "desc": "Puts the connection into ASCII (text) mode, issues the given server-side command (such as \u201cSTOR myfile\u201d), and sends the contents of the file named file to the server, one line at a time. If the optional block is given, it also passes it the lines."}, {"type": "public instance method", "name": "system()", "desc": "Returns system information."}, {"type": "public instance method", "name": "voidcmd(cmd)", "desc": "Sends a command and expect a response beginning with '2'."}, {"type": "alias", "name": "dir(*args)", "desc": "             Alias for: list "}, {"type": "alias", "name": "getdir()", "desc": "             Alias for: pwd "}, {"type": "alias", "name": "ls(*args)", "desc": "             Alias for: list "}]}