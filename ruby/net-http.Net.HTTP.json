{"entries": [{"type": "constant", "name": "ENVIRONMENT_VARIABLE_IS_MULTIUSER_SAFE", "desc": ""}, {"type": "constant", "name": "SSL_ATTRIBUTES", "desc": ""}, {"type": "constant", "name": "SSL_IVNAMES", "desc": ""}, {"type": "constant", "name": "STATUS_CODES", "desc": ""}, {"type": "attribute", "name": "proxy_address", "desc": " Address of proxy host. If Net::HTTP does not use a proxy, nil. "}, {"type": "attribute", "name": "proxy_pass", "desc": " User password for accessing proxy. If Net::HTTP does not use a proxy, nil. "}, {"type": "attribute", "name": "proxy_port", "desc": " Port number of proxy host. If Net::HTTP does not use a proxy, nil. "}, {"type": "attribute", "name": "proxy_user", "desc": " User name for accessing proxy. If Net::HTTP does not use a proxy, nil. "}, {"type": "attribute", "name": "address", "desc": " The DNS host name or IP address to connect to. "}, {"type": "attribute", "name": "ca_file", "desc": " Sets path of a CA certification file in PEM format. The file can contain several CA certificates. "}, {"type": "attribute", "name": "ca_path", "desc": " Sets path of a CA certification directory containing certifications in PEM format. "}, {"type": "attribute", "name": "cert", "desc": " Sets an OpenSSL::X509::Certificate object as client certificate. (This method is appeared in Michal Rokos's OpenSSL extension). "}, {"type": "attribute", "name": "cert_store", "desc": " Sets the X509::Store to verify peer certificate. "}, {"type": "attribute", "name": "ciphers", "desc": " Sets the available ciphers.  See OpenSSL::SSL::SSLContext#ciphers= "}, {"type": "attribute", "name": "close_on_empty_response", "desc": " "}, {"type": "attribute", "name": "continue_timeout", "desc": " Seconds to wait for 100 Continue response. If the HTTP object does not receive a response in this many seconds it sends the request body. The default value is nil. "}, {"type": "attribute", "name": "keep_alive_timeout", "desc": " Seconds to reuse the connection of the previous request. If the idle time is less than this Keep-Alive Timeout, Net::HTTP reuses the TCP/IP socket used by the previous communication. The default value is 2 seconds. "}, {"type": "attribute", "name": "key", "desc": " Sets an OpenSSL::PKey::RSA or OpenSSL::PKey::DSA object. (This method is appeared in Michal Rokos's OpenSSL extension.) "}, {"type": "attribute", "name": "local_host", "desc": " The local host used to establish the connection. "}, {"type": "attribute", "name": "local_port", "desc": " The local port used to establish the connection. "}, {"type": "attribute", "name": "max_retries", "desc": " "}, {"type": "attribute", "name": "max_version", "desc": " Sets the maximum SSL version.  See OpenSSL::SSL::SSLContext#max_version= "}, {"type": "attribute", "name": "min_version", "desc": " Sets the minimum SSL version.  See OpenSSL::SSL::SSLContext#min_version= "}, {"type": "attribute", "name": "open_timeout", "desc": " Number of seconds to wait for the connection to open. Any number may be used, including Floats for fractional seconds. If the HTTP object cannot open a connection in this many seconds, it raises a Net::OpenTimeout exception. The default value is 60 seconds. "}, {"type": "attribute", "name": "port", "desc": " The port number to connect to. "}, {"type": "attribute", "name": "proxy_address", "desc": " "}, {"type": "attribute", "name": "proxy_from_env", "desc": " "}, {"type": "attribute", "name": "proxy_pass", "desc": " "}, {"type": "attribute", "name": "proxy_port", "desc": " "}, {"type": "attribute", "name": "proxy_user", "desc": " "}, {"type": "attribute", "name": "read_timeout", "desc": " Number of seconds to wait for one block to be read (via one read(2) call). Any number may be used, including Floats for fractional seconds. If the HTTP object cannot read data in this many seconds, it raises a Net::ReadTimeout exception. The default value is 60 seconds. "}, {"type": "attribute", "name": "ssl_timeout", "desc": " Sets the SSL timeout seconds. "}, {"type": "attribute", "name": "ssl_version", "desc": " Sets the SSL version.  See OpenSSL::SSL::SSLContext#ssl_version= "}, {"type": "attribute", "name": "verify_callback", "desc": " Sets the verify callback for the server certification verification. "}, {"type": "attribute", "name": "verify_depth", "desc": " Sets the maximum depth for the certificate chain verification. "}, {"type": "attribute", "name": "verify_mode", "desc": " Sets the flags for server the certification verification at beginning of SSL/TLS session. OpenSSL::SSL::VERIFY_NONE or OpenSSL::SSL::VERIFY_PEER are acceptable. "}, {"type": "attribute", "name": "write_timeout", "desc": " Number of seconds to wait for one block to be written (via one write(2) call). Any number may be used, including Floats for fractional seconds. If the HTTP object cannot write data in this many seconds, it raises a Net::WriteTimeout exception. The default value is 60 seconds. Net::WriteTimeout is not raised on Windows. "}, {"type": "public class method", "name": "Proxy(p_addr = :ENV, p_port = nil, p_user = nil, p_pass = nil)", "desc": "Creates an HTTP proxy class which behaves like Net::HTTP, but performs all access via the specified proxy."}, {"type": "public class method", "name": "default_port()", "desc": "The default port to use for HTTP requests; defaults to 80."}, {"type": "public class method", "name": "get(uri_or_host, path = nil, port = nil)", "desc": "Sends a GET request to the target and returns the HTTP response as a string.  The target can either be specified as (uri), or as (host, path, port = 80); so:"}, {"type": "public class method", "name": "get_print(uri_or_host, path = nil, port = nil)", "desc": "Gets the body text from the target and outputs it to $stdout.  The target can either be specified as (uri), or as (host, path, port = 80); so:"}, {"type": "public class method", "name": "get_response(uri_or_host, path = nil, port = nil, &block)", "desc": "Sends a GET request to the target and returns the HTTP response as a Net::HTTPResponse object.  The target can either be specified as (uri), or as (host, path, port = 80); so:"}, {"type": "public class method", "name": "http_default_port()", "desc": "The default port to use for HTTP requests; defaults to 80."}, {"type": "public class method", "name": "https_default_port()", "desc": "The default port to use for HTTPS requests; defaults to 443."}, {"type": "public class method", "name": "is_version_1_2?()", "desc": ""}, {"type": "public class method", "name": "new(address, port = nil, p_addr = :ENV, p_port = nil, p_user = nil, p_pass = nil, p_no_proxy = nil)", "desc": "Creates a new Net::HTTP object without opening a TCP connection or HTTP session."}, {"type": "public class method", "name": "new(address, port = nil)", "desc": "Creates a new Net::HTTP object for the specified server address, without opening the TCP connection or initializing the HTTP session. The address should be a DNS hostname or IP address."}, {"type": "public class method", "name": "newobj(address, port = nil, p_addr = :ENV, p_port = nil, p_user = nil, p_pass = nil, p_no_proxy = nil)", "desc": ""}, {"type": "public class method", "name": "post(url, data, header = nil)", "desc": "Posts data to the specified URI object."}, {"type": "public class method", "name": "post_form(url, params)", "desc": "Posts HTML form data to the specified URI object. The form data must be provided as a Hash mapping from String to String. Example:"}, {"type": "public class method", "name": "proxy_class?()", "desc": "returns true if self is a class which was created by HTTP::Proxy."}, {"type": "public class method", "name": "start(address, port, p_addr, p_port, p_user, p_pass, &block)click to toggle source", "desc": ""}, {"type": "public class method", "name": "version_1_2()", "desc": "Turns on net/http 1.2 (Ruby 1.8) features. Defaults to ON in Ruby 1.8 or later."}, {"type": "public class method", "name": "version_1_2?()", "desc": "Returns true if net/http is in version 1.2 mode. Defaults to true."}, {"type": "public instance method", "name": "active?()", "desc": ""}, {"type": "public instance method", "name": "continue_timeout=(sec)", "desc": "Setter for the #continue_timeout attribute."}, {"type": "public instance method", "name": "copy(path, initheader = nil)", "desc": "Sends a COPY request to the path and gets a response, as an HTTPResponse object."}, {"type": "public instance method", "name": "delete(path, initheader = {'Depth' => 'Infinity'})", "desc": "Sends a DELETE request to the path and gets a response, as an HTTPResponse object."}, {"type": "public instance method", "name": "finish()", "desc": "Finishes the HTTP session and closes the TCP connection. Raises IOError if the session has not been started."}, {"type": "public instance method", "name": "get(path, initheader = nil, dest = nil)", "desc": "Retrieves data from path on the connected-to host which may be an absolute path String or a URI to extract the path from."}, {"type": "public instance method", "name": "get2(path, initheader = nil)", "desc": ""}, {"type": "public instance method", "name": "head(path, initheader = nil)", "desc": "Gets only the header from path on the connected-to host. header is a Hash like { 'Accept' => '/', \u2026 }."}, {"type": "public instance method", "name": "head2(path, initheader = nil, &block)", "desc": ""}, {"type": "public instance method", "name": "inspect()", "desc": ""}, {"type": "public instance method", "name": "ipaddr()", "desc": "The IP address to connect to/used to connect to"}, {"type": "public instance method", "name": "ipaddr=(addr)", "desc": "Set the IP address to connect to"}, {"type": "public instance method", "name": "lock(path, body, initheader = nil)", "desc": "Sends a LOCK request to the path and gets a response, as an HTTPResponse object."}, {"type": "public instance method", "name": "max_retries=(retries)", "desc": "Maximum number of times to retry an idempotent request in case of Net::ReadTimeout, IOError, EOFError, Errno::ECONNRESET, Errno::ECONNABORTED, Errno::EPIPE, OpenSSL::SSL::SSLError, Timeout::Error. Should be a non-negative integer number. Zero means no retries. The default value is 1."}, {"type": "public instance method", "name": "mkcol(path, body = nil, initheader = nil)", "desc": "Sends a MKCOL request to the path and gets a response, as an HTTPResponse object."}, {"type": "public instance method", "name": "move(path, initheader = nil)", "desc": "Sends a MOVE request to the path and gets a response, as an HTTPResponse object."}, {"type": "public instance method", "name": "options(path, initheader = nil)", "desc": "Sends a OPTIONS request to the path and gets a response, as an HTTPResponse object."}, {"type": "public instance method", "name": "patch(path, data, initheader = nil, dest = nil)", "desc": "Sends a PATCH request to the path and gets a response, as an HTTPResponse object."}, {"type": "public instance method", "name": "peer_cert()", "desc": "Returns the X.509 certificates the server presented."}, {"type": "public instance method", "name": "post(path, data, initheader = nil, dest = nil)", "desc": "Posts data (must be a String) to path. header must be a Hash like { 'Accept' => '/', \u2026 }."}, {"type": "public instance method", "name": "post2(path, data, initheader = nil)", "desc": ""}, {"type": "public instance method", "name": "propfind(path, body = nil, initheader = {'Depth' => '0'})", "desc": "Sends a PROPFIND request to the path and gets a response, as an HTTPResponse object."}, {"type": "public instance method", "name": "proppatch(path, body, initheader = nil)", "desc": "Sends a PROPPATCH request to the path and gets a response, as an HTTPResponse object."}, {"type": "public instance method", "name": "proxy?()", "desc": "True if requests for this connection will be proxied"}, {"type": "public instance method", "name": "proxy_address()", "desc": "The address of the proxy server, if one is configured."}, {"type": "public instance method", "name": "proxy_from_env?()", "desc": "True if the proxy for this connection is determined from the environment"}, {"type": "public instance method", "name": "proxy_pass()", "desc": "The password of the proxy server, if one is configured."}, {"type": "public instance method", "name": "proxy_port()", "desc": "The port of the proxy server, if one is configured."}, {"type": "public instance method", "name": "proxy_user()", "desc": "The username of the proxy server, if one is configured."}, {"type": "public instance method", "name": "proxyaddr()", "desc": ""}, {"type": "public instance method", "name": "proxyport()", "desc": ""}, {"type": "public instance method", "name": "read_timeout=(sec)", "desc": "Setter for the #read_timeout attribute."}, {"type": "public instance method", "name": "request(req, body = nil)", "desc": "Sends an HTTPRequest object req to the HTTP server."}, {"type": "public instance method", "name": "request_get(path, initheader = nil)", "desc": "Sends a GET request to the path. Returns the response as a Net::HTTPResponse object."}, {"type": "public instance method", "name": "request_head(path, initheader = nil, &block)", "desc": "Sends a HEAD request to the path and returns the response as a Net::HTTPResponse object."}, {"type": "public instance method", "name": "request_post(path, data, initheader = nil)", "desc": "Sends a POST request to the path."}, {"type": "public instance method", "name": "send_request(name, path, data = nil, header = nil)", "desc": "Sends an HTTP request to the HTTP server. Also sends a DATA string if data is given."}, {"type": "public instance method", "name": "set_debug_output(output)", "desc": "WARNING This method opens a serious security hole. Never use this method in production code."}, {"type": "public instance method", "name": "start()", "desc": "Opens a TCP connection and HTTP session."}, {"type": "public instance method", "name": "started?()", "desc": "Returns true if the HTTP session has been started."}, {"type": "public instance method", "name": "trace(path, initheader = nil)", "desc": "Sends a TRACE request to the path and gets a response, as an HTTPResponse object."}, {"type": "public instance method", "name": "unlock(path, body, initheader = nil)", "desc": "Sends a UNLOCK request to the path and gets a response, as an HTTPResponse object."}, {"type": "public instance method", "name": "use_ssl=(flag)", "desc": "Turn on/off SSL. This flag must be set before starting session. If you change use_ssl value after session started, a Net::HTTP object raises IOError."}, {"type": "public instance method", "name": "use_ssl?()", "desc": "Returns true if SSL/TLS is being used with HTTP."}, {"type": "public instance method", "name": "write_timeout=(sec)", "desc": "Setter for the #write_timeout attribute."}, {"type": "alias", "name": "active?()", "desc": "             Alias for: started? "}, {"type": "alias", "name": "get2(path, initheader = nil)", "desc": "             Alias for: request_get "}, {"type": "alias", "name": "head2(path, initheader = nil, &block)", "desc": "             Alias for: request_head "}, {"type": "alias", "name": "post2(path, data, initheader = nil)", "desc": "             Alias for: request_post "}, {"type": "alias", "name": "proxyaddr()", "desc": "             Alias for: proxy_address "}, {"type": "alias", "name": "proxyport()", "desc": "             Alias for: proxy_port "}]}