{"entries": [{"type": "constant", "name": "ANSWERED", "desc": "Flag indicating a message has been answered."}, {"type": "constant", "name": "Address", "desc": "Net::IMAP::Address represents electronic\nmail addresses.\nFields:\u00b6 \u2191\nname\n\nReturns the phrase from [RFC-822] mailbox.\nroute\n\nReturns the route from [RFC-822] route-addr.\nmailbox\n\nnil indicates end of [RFC-822] group. If non-nil and host is nil, returns\n[RFC-822] group name. Otherwise, returns [RFC-822] local-part.\nhost\n\nnil indicates [RFC-822] group syntax. Otherwise, returns [RFC-822] domain\nname.\n"}, {"type": "constant", "name": "name\n\nReturns the phrase from [RFC-822] mailbox.\nroute\n\nReturns the route from [RFC-822] route-addr.\nmailbox\n\nnil indicates end of [RFC-822] group. If non-nil and host is nil, returns\n[RFC-822] group name. Otherwise, returns [RFC-822] local-part.\nhost\n\nnil indicates [RFC-822] group syntax. Otherwise, returns [RFC-822] domain\nname.\n", "desc": ""}, {"type": "constant", "name": "route\n\nReturns the route from [RFC-822] route-addr.\nmailbox\n\nnil indicates end of [RFC-822] group. If non-nil and host is nil, returns\n[RFC-822] group name. Otherwise, returns [RFC-822] local-part.\nhost\n\nnil indicates [RFC-822] group syntax. Otherwise, returns [RFC-822] domain\nname.\n", "desc": ""}, {"type": "constant", "name": "mailbox\n\nnil indicates end of [RFC-822] group. If non-nil and host is nil, returns\n[RFC-822] group name. Otherwise, returns [RFC-822] local-part.\nhost\n\nnil indicates [RFC-822] group syntax. Otherwise, returns [RFC-822] domain\nname.\n", "desc": ""}, {"type": "constant", "name": "host\n\nnil indicates [RFC-822] group syntax. Otherwise, returns [RFC-822] domain\nname.\n", "desc": ""}, {"type": "constant", "name": "ContentDisposition", "desc": "Net::IMAP::ContentDisposition\nrepresents Content-Disposition fields.\nFields:\u00b6 \u2191\ndsp_type\n\nReturns the disposition type.\nparam\n\nReturns a hash that represents parameters of the Content-Disposition field.\n"}, {"type": "constant", "name": "dsp_type\n\nReturns the disposition type.\nparam\n\nReturns a hash that represents parameters of the Content-Disposition field.\n", "desc": ""}, {"type": "constant", "name": "param\n\nReturns a hash that represents parameters of the Content-Disposition field.\n", "desc": ""}, {"type": "constant", "name": "ContinuationRequest", "desc": "Net::IMAP::ContinuationRequest\nrepresents command continuation requests.\nThe command continuation request response is indicated by a \u201c+\u201d token\ninstead of a tag.  This form of response indicates that the server is ready\nto accept the continuation of a command from the client.  The remainder of\nthis response is a line of text.\ncontinue_req    ::= \"+\" SPACE (resp_text / base64)\nFields:\u00b6 \u2191\ndata\n\nReturns the data (Net::IMAP::ResponseText).\nraw_data\n\nReturns the raw data string.\n"}, {"type": "constant", "name": "data\n\nReturns the data (Net::IMAP::ResponseText).\nraw_data\n\nReturns the raw data string.\n", "desc": ""}, {"type": "constant", "name": "raw_data\n\nReturns the raw data string.\n", "desc": ""}, {"type": "constant", "name": "DATE_MONTH", "desc": ""}, {"type": "constant", "name": "DELETED", "desc": "Flag indicating a message has been marked for deletion.  This will occur\nwhen the mailbox is closed or expunged."}, {"type": "constant", "name": "DRAFT", "desc": "Flag indicating a message is only a draft or work-in-progress version."}, {"type": "constant", "name": "Envelope", "desc": "Net::IMAP::Envelope represents envelope\nstructures of messages.\nFields:\u00b6 \u2191\ndate\n\nReturns a string that represents the date.\nsubject\n\nReturns a string that represents the subject.\nfrom\n\nReturns an array of Net::IMAP::Address that\nrepresents the from.\nsender\n\nReturns an array of Net::IMAP::Address that\nrepresents the sender.\nreply_to\n\nReturns an array of Net::IMAP::Address that\nrepresents the reply-to.\nto\n\nReturns an array of Net::IMAP::Address that\nrepresents the to.\ncc\n\nReturns an array of Net::IMAP::Address that\nrepresents the cc.\nbcc\n\nReturns an array of Net::IMAP::Address that\nrepresents the bcc.\nin_reply_to\n\nReturns a string that represents the in-reply-to.\nmessage_id\n\nReturns a string that represents the message-id.\n"}, {"type": "constant", "name": "date\n\nReturns a string that represents the date.\nsubject\n\nReturns a string that represents the subject.\nfrom\n\nReturns an array of Net::IMAP::Address that\nrepresents the from.\nsender\n\nReturns an array of Net::IMAP::Address that\nrepresents the sender.\nreply_to\n\nReturns an array of Net::IMAP::Address that\nrepresents the reply-to.\nto\n\nReturns an array of Net::IMAP::Address that\nrepresents the to.\ncc\n\nReturns an array of Net::IMAP::Address that\nrepresents the cc.\nbcc\n\nReturns an array of Net::IMAP::Address that\nrepresents the bcc.\nin_reply_to\n\nReturns a string that represents the in-reply-to.\nmessage_id\n\nReturns a string that represents the message-id.\n", "desc": ""}, {"type": "constant", "name": "subject\n\nReturns a string that represents the subject.\nfrom\n\nReturns an array of Net::IMAP::Address that\nrepresents the from.\nsender\n\nReturns an array of Net::IMAP::Address that\nrepresents the sender.\nreply_to\n\nReturns an array of Net::IMAP::Address that\nrepresents the reply-to.\nto\n\nReturns an array of Net::IMAP::Address that\nrepresents the to.\ncc\n\nReturns an array of Net::IMAP::Address that\nrepresents the cc.\nbcc\n\nReturns an array of Net::IMAP::Address that\nrepresents the bcc.\nin_reply_to\n\nReturns a string that represents the in-reply-to.\nmessage_id\n\nReturns a string that represents the message-id.\n", "desc": ""}, {"type": "constant", "name": "from\n\nReturns an array of Net::IMAP::Address that\nrepresents the from.\nsender\n\nReturns an array of Net::IMAP::Address that\nrepresents the sender.\nreply_to\n\nReturns an array of Net::IMAP::Address that\nrepresents the reply-to.\nto\n\nReturns an array of Net::IMAP::Address that\nrepresents the to.\ncc\n\nReturns an array of Net::IMAP::Address that\nrepresents the cc.\nbcc\n\nReturns an array of Net::IMAP::Address that\nrepresents the bcc.\nin_reply_to\n\nReturns a string that represents the in-reply-to.\nmessage_id\n\nReturns a string that represents the message-id.\n", "desc": ""}, {"type": "constant", "name": "sender\n\nReturns an array of Net::IMAP::Address that\nrepresents the sender.\nreply_to\n\nReturns an array of Net::IMAP::Address that\nrepresents the reply-to.\nto\n\nReturns an array of Net::IMAP::Address that\nrepresents the to.\ncc\n\nReturns an array of Net::IMAP::Address that\nrepresents the cc.\nbcc\n\nReturns an array of Net::IMAP::Address that\nrepresents the bcc.\nin_reply_to\n\nReturns a string that represents the in-reply-to.\nmessage_id\n\nReturns a string that represents the message-id.\n", "desc": ""}, {"type": "constant", "name": "reply_to\n\nReturns an array of Net::IMAP::Address that\nrepresents the reply-to.\nto\n\nReturns an array of Net::IMAP::Address that\nrepresents the to.\ncc\n\nReturns an array of Net::IMAP::Address that\nrepresents the cc.\nbcc\n\nReturns an array of Net::IMAP::Address that\nrepresents the bcc.\nin_reply_to\n\nReturns a string that represents the in-reply-to.\nmessage_id\n\nReturns a string that represents the message-id.\n", "desc": ""}, {"type": "constant", "name": "to\n\nReturns an array of Net::IMAP::Address that\nrepresents the to.\ncc\n\nReturns an array of Net::IMAP::Address that\nrepresents the cc.\nbcc\n\nReturns an array of Net::IMAP::Address that\nrepresents the bcc.\nin_reply_to\n\nReturns a string that represents the in-reply-to.\nmessage_id\n\nReturns a string that represents the message-id.\n", "desc": ""}, {"type": "constant", "name": "cc\n\nReturns an array of Net::IMAP::Address that\nrepresents the cc.\nbcc\n\nReturns an array of Net::IMAP::Address that\nrepresents the bcc.\nin_reply_to\n\nReturns a string that represents the in-reply-to.\nmessage_id\n\nReturns a string that represents the message-id.\n", "desc": ""}, {"type": "constant", "name": "bcc\n\nReturns an array of Net::IMAP::Address that\nrepresents the bcc.\nin_reply_to\n\nReturns a string that represents the in-reply-to.\nmessage_id\n\nReturns a string that represents the message-id.\n", "desc": ""}, {"type": "constant", "name": "in_reply_to\n\nReturns a string that represents the in-reply-to.\nmessage_id\n\nReturns a string that represents the message-id.\n", "desc": ""}, {"type": "constant", "name": "message_id\n\nReturns a string that represents the message-id.\n", "desc": ""}, {"type": "constant", "name": "FLAGGED", "desc": "Flag indicating a message has been flagged for special or urgent attention."}, {"type": "constant", "name": "FetchData", "desc": "Net::IMAP::FetchData represents the\ncontents of the FETCH response.\nFields:\u00b6 \u2191\nseqno\n\nReturns the message sequence number. (Note: not the unique identifier, even\nfor the UID command response.)\nattr\n\nReturns a hash. Each key is a data item name, and each value is its value.\nThe current data items are:\nBODY\n\nA form of BODYSTRUCTURE without extension data.\nNet::IMAP::BodyTypeBasic, Net::IMAP::BodyTypeText, Net::IMAP::BodyTypeMessage, Net::IMAP::BodyTypeMultipart."}, {"type": "constant", "name": "seqno\n\nReturns the message sequence number. (Note: not the unique identifier, even\nfor the UID command response.)\nattr\n\nReturns a hash. Each key is a data item name, and each value is its value.\nThe current data items are:\nBODY\n\nA form of BODYSTRUCTURE without extension data.\nNet::IMAP::BodyTypeBasic, Net::IMAP::BodyTypeText, Net::IMAP::BodyTypeMessage, Net::IMAP::BodyTypeMultipart.", "desc": ""}, {"type": "constant", "name": "attr\n\nReturns a hash. Each key is a data item name, and each value is its value.\nThe current data items are:\nBODY\n\nA form of BODYSTRUCTURE without extension data.\nNet::IMAP::BodyTypeBasic, Net::IMAP::BodyTypeText, Net::IMAP::BodyTypeMessage, Net::IMAP::BodyTypeMultipart.", "desc": ""}, {"type": "constant", "name": "BODY\n\nA form of BODYSTRUCTURE without extension data.\nNet::IMAP::BodyTypeBasic, Net::IMAP::BodyTypeText, Net::IMAP::BodyTypeMessage, Net::IMAP::BodyTypeMultipart.", "desc": ""}, {"type": "constant", "name": "Net::IMAP::BodyTypeBasic, Net::IMAP::BodyTypeText, Net::IMAP::BodyTypeMessage, Net::IMAP::BodyTypeMultipart.", "desc": ""}, {"type": "attribute", "name": "client_thread", "desc": " The thread to receive exceptions. "}, {"type": "attribute", "name": "greeting", "desc": " Returns an initial greeting response from the server. "}, {"type": "attribute", "name": "open_timeout", "desc": " Seconds to wait until a connection is opened. If the IMAP object cannot open a connection within this time, it raises a Net::OpenTimeout exception. The default value is 30 seconds. "}, {"type": "attribute", "name": "response_handlers", "desc": " Returns all response handlers. "}, {"type": "attribute", "name": "responses", "desc": " Returns recorded untagged responses.  For example: imap.select(\"inbox\") p imap.responses[\"EXISTS\"][-1] #=> 2 p imap.responses[\"UIDVALIDITY\"][-1] #=> 968263756  "}, {"type": "public class method", "name": "add_authenticator(auth_type, authenticator)", "desc": "Adds an authenticator for #authenticate.  auth_type is the type of authentication this authenticator supports (for instance, \u201cLOGIN\u201d).  The authenticator is an object which defines a process() method to handle authentication with the server.  See Net::IMAP::LoginAuthenticator, Net::IMAP::CramMD5Authenticator, and Net::IMAP::DigestMD5Authenticator for examples."}, {"type": "public class method", "name": "debug()", "desc": "Returns the debug mode."}, {"type": "public class method", "name": "debug=(val)", "desc": "Sets the debug mode."}, {"type": "public class method", "name": "decode_utf7(s)", "desc": "Decode a string from modified UTF-7 format to UTF-8."}, {"type": "public class method", "name": "default_imap_port()", "desc": ""}, {"type": "public class method", "name": "default_imaps_port()", "desc": ""}, {"type": "public class method", "name": "default_port()", "desc": "The default port for IMAP connections, port 143"}, {"type": "public class method", "name": "default_ssl_port()", "desc": ""}, {"type": "public class method", "name": "default_tls_port()", "desc": "The default port for IMAPS connections, port 993"}, {"type": "public class method", "name": "encode_utf7(s)", "desc": "Encode a string from UTF-8 format to modified UTF-7."}, {"type": "public class method", "name": "format_date(time)", "desc": "Formats time as an IMAP-style date."}, {"type": "public class method", "name": "format_datetime(time)", "desc": "Formats time as an IMAP-style date-time."}, {"type": "public class method", "name": "max_flag_count()", "desc": "Returns the max number of flags interned to symbols."}, {"type": "public class method", "name": "max_flag_count=(count)", "desc": "Sets the max number of flags interned to symbols."}, {"type": "public class method", "name": "Net::IMAP.new(host, options = {})click to toggle source", "desc": "Creates a new Net::IMAP object and connects it to the specified host."}, {"type": "public instance method", "name": "add_response_handler(handler = nil, &block)", "desc": "Adds a response handler. For example, to detect when the server sends a new EXISTS response (which normally indicates new messages being added to the mailbox), add the following handler after selecting the mailbox:"}, {"type": "public instance method", "name": "append(mailbox, message, flags = nil, date_time = nil)", "desc": "Sends a APPEND command to append the message to the end of the mailbox. The optional flags argument is an array of flags initially passed to the new message.  The optional date_time argument specifies the creation time to assign to the new message; it defaults to the current time. For example:"}, {"type": "public instance method", "name": "authenticate(auth_type, *args)", "desc": "Sends an AUTHENTICATE command to authenticate the client. The auth_type parameter is a string that represents the authentication mechanism to be used. Currently Net::IMAP supports the authentication mechanisms:"}, {"type": "public instance method", "name": "capability()", "desc": "Sends a CAPABILITY command, and returns an array of capabilities that the server supports.  Each capability is a string.  See [IMAP] for a list of possible capabilities."}, {"type": "public instance method", "name": "check()", "desc": "Sends a CHECK command to request a checkpoint of the currently selected mailbox.  This performs implementation-specific housekeeping; for instance, reconciling the mailbox's in-memory and on-disk state."}, {"type": "public instance method", "name": "close()", "desc": "Sends a CLOSE command to close the currently selected mailbox. The CLOSE command permanently removes from the mailbox all messages that have the Deleted flag set."}, {"type": "public instance method", "name": "copy(set, mailbox)", "desc": "Sends a COPY command to copy the specified message(s) to the end of the specified destination mailbox. The set parameter is a number, an array of numbers, or a Range object. The number is a message sequence number."}, {"type": "public instance method", "name": "create(mailbox)", "desc": "Sends a CREATE command to create a new mailbox."}, {"type": "public instance method", "name": "delete(mailbox)", "desc": "Sends a DELETE command to remove the mailbox."}, {"type": "public instance method", "name": "disconnect()", "desc": "Disconnects from the server."}, {"type": "public instance method", "name": "disconnected?()", "desc": "Returns true if disconnected from the server."}, {"type": "public instance method", "name": "examine(mailbox)", "desc": "Sends a EXAMINE command to select a mailbox so that messages in the mailbox can be accessed.  Behaves the same as select(), except that the selected mailbox is identified as read-only."}, {"type": "public instance method", "name": "expunge()", "desc": "Sends a EXPUNGE command to permanently remove from the currently selected mailbox all messages that have the Deleted flag set."}, {"type": "public instance method", "name": "fetch(set, attr, mod = nil)", "desc": "Sends a FETCH command to retrieve data associated with a message in the mailbox."}, {"type": "public instance method", "name": "getacl(mailbox)", "desc": "Send the GETACL command along with a specified mailbox. If this mailbox exists, an array containing objects of Net::IMAP::MailboxACLItem will be returned."}, {"type": "public instance method", "name": "getquota(mailbox)", "desc": "Sends the GETQUOTA command along with specified mailbox. If this mailbox exists, then an array containing a Net::IMAP::MailboxQuota object is returned.  This command is generally only available to server admin."}, {"type": "public instance method", "name": "getquotaroot(mailbox)", "desc": "Sends the GETQUOTAROOT command along with the specified mailbox. This command is generally available to both admin and user. If this mailbox exists, it returns an array containing objects of type Net::IMAP::MailboxQuotaRoot and Net::IMAP::MailboxQuota."}, {"type": "public instance method", "name": "idle(timeout = nil, &response_handler)", "desc": "Sends an IDLE command that waits for notifications of new or expunged messages.  Yields responses from the server during the IDLE."}, {"type": "public instance method", "name": "idle_done()", "desc": "Leaves IDLE."}, {"type": "public instance method", "name": "list(refname, mailbox)", "desc": "Sends a LIST command, and returns a subset of names from the complete set of all names available to the client. refname provides a context (for instance, a base directory in a directory-based mailbox hierarchy).  mailbox specifies a mailbox or (via wildcards) mailboxes under that context. Two wildcards may be used in mailbox: '*', which matches all characters including the hierarchy delimiter (for instance, '/' on a UNIX-hosted directory-based mailbox hierarchy); and '%', which matches all characters except the hierarchy delimiter."}, {"type": "public instance method", "name": "login(user, password)", "desc": "Sends a LOGIN command to identify the client and carries the plaintext password authenticating this user.  Note that, unlike calling authenticate() with an auth_type of \u201cLOGIN\u201d, login() does not use the login authenticator."}, {"type": "public instance method", "name": "logout()", "desc": "Sends a LOGOUT command to inform the server that the client is done with the connection."}, {"type": "public instance method", "name": "lsub(refname, mailbox)", "desc": "Sends a LSUB command, and returns a subset of names from the set of names that the user has declared as being \u201cactive\u201d or \u201csubscribed.\u201d  refname and mailbox are interpreted as for list(). The return value is an array of Net::IMAP::MailboxList."}, {"type": "public instance method", "name": "move(set, mailbox)", "desc": "Sends a MOVE command to move the specified message(s) to the end of the specified destination mailbox. The set parameter is a number, an array of numbers, or a Range object. The number is a message sequence number. The IMAP MOVE extension is described in [RFC-6851]."}, {"type": "public instance method", "name": "noop()", "desc": "Sends a NOOP command to the server. It does nothing."}, {"type": "public instance method", "name": "remove_response_handler(handler)", "desc": "Removes the response handler."}, {"type": "public instance method", "name": "rename(mailbox, newname)", "desc": "Sends a RENAME command to change the name of the mailbox to newname."}, {"type": "public instance method", "name": "search(keys, charset = nil)", "desc": "Sends a SEARCH command to search the mailbox for messages that match the given searching criteria, and returns message sequence numbers.  keys can either be a string holding the entire search string, or a single-dimension array of search keywords and arguments.  The following are some common search criteria; see [IMAP] section 6.4.4 for a full list."}, {"type": "public instance method", "name": "select(mailbox)", "desc": "Sends a SELECT command to select a mailbox so that messages in the mailbox can be accessed."}, {"type": "public instance method", "name": "setacl(mailbox, user, rights)", "desc": "Sends the SETACL command along with mailbox, user and the rights that user is to have on that mailbox.  If rights is nil, then that user will be stripped of any rights to that mailbox. The IMAP ACL commands are described in [RFC-2086]."}, {"type": "public instance method", "name": "setquota(mailbox, quota)", "desc": "Sends a SETQUOTA command along with the specified mailbox and quota.  If quota is nil, then quota will be unset for that mailbox.  Typically one needs to be logged in as a server admin for this to work.  The IMAP quota commands are described in [RFC-2087]."}, {"type": "public instance method", "name": "sort(sort_keys, search_keys, charset)", "desc": "Sends a SORT command to sort messages in the mailbox. Returns an array of message sequence numbers. For example:"}, {"type": "public instance method", "name": "starttls(options = {}, verify = true)", "desc": "Sends a STARTTLS command to start TLS session."}, {"type": "public instance method", "name": "status(mailbox, attr)", "desc": "Sends a STATUS command, and returns the status of the indicated mailbox. attr is a list of one or more attributes whose statuses are to be requested.  Supported attributes include:"}, {"type": "public instance method", "name": "store(set, attr, flags)", "desc": "Sends a STORE command to alter data associated with messages in the mailbox, in particular their flags. The set parameter is a number, an array of numbers, or a Range object. Each number is a message sequence number.  attr is the name of a data item to store: 'FLAGS' will replace the message's flag list with the provided one, '+FLAGS' will add the provided flags, and '-FLAGS' will remove them.  flags is a list of flags."}, {"type": "public instance method", "name": "subscribe(mailbox)", "desc": "Sends a SUBSCRIBE command to add the specified mailbox name to the server's set of \u201cactive\u201d or \u201csubscribed\u201d mailboxes as returned by lsub()."}, {"type": "public instance method", "name": "thread(algorithm, search_keys, charset)", "desc": "Similar to search(), but returns message sequence numbers in threaded format, as a Net::IMAP::ThreadMember tree.  The supported algorithms are:"}, {"type": "public instance method", "name": "uid_copy(set, mailbox)", "desc": "Similar to copy(), but set contains unique identifiers."}, {"type": "public instance method", "name": "uid_fetch(set, attr, mod = nil)", "desc": "Similar to fetch(), but set contains unique identifiers."}, {"type": "public instance method", "name": "uid_move(set, mailbox)", "desc": "Similar to move(), but set contains unique identifiers."}, {"type": "public instance method", "name": "uid_search(keys, charset = nil)", "desc": "Similar to search(), but returns unique identifiers."}, {"type": "public instance method", "name": "uid_sort(sort_keys, search_keys, charset)", "desc": "Similar to sort(), but returns an array of unique identifiers."}, {"type": "public instance method", "name": "uid_store(set, attr, flags)", "desc": "Similar to store(), but set contains unique identifiers."}, {"type": "public instance method", "name": "uid_thread(algorithm, search_keys, charset)", "desc": "Similar to thread(), but returns unique identifiers instead of message sequence numbers."}, {"type": "public instance method", "name": "unsubscribe(mailbox)", "desc": "Sends a UNSUBSCRIBE command to remove the specified mailbox name from the server's set of \u201cactive\u201d or \u201csubscribed\u201d mailboxes."}, {"type": "public instance method", "name": "xlist(refname, mailbox)", "desc": "Sends a XLIST command, and returns a subset of names from the complete set of all names available to the client. refname provides a context (for instance, a base directory in a directory-based mailbox hierarchy).  mailbox specifies a mailbox or (via wildcards) mailboxes under that context. Two wildcards may be used in mailbox: '*', which matches all characters including the hierarchy delimiter (for instance, '/' on a UNIX-hosted directory-based mailbox hierarchy); and '%', which matches all characters except the hierarchy delimiter."}]}