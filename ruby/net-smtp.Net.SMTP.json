{"entries": [{"type": "constant", "name": "CRAM_BUFSIZE", "desc": ""}, {"type": "constant", "name": "DEFAULT_AUTH_TYPE", "desc": "Authentication"}, {"type": "constant", "name": "IMASK", "desc": ""}, {"type": "constant", "name": "OMASK", "desc": ""}, {"type": "constant", "name": "Revision", "desc": ""}, {"type": "constant", "name": "VERSION", "desc": ""}, {"type": "attribute", "name": "address", "desc": " The address of the SMTP server to connect to. "}, {"type": "attribute", "name": "esmtp", "desc": " Set whether to use ESMTP or not.  This should be done before calling start.  Note that if start is called in ESMTP mode, and the connection fails due to a ProtocolError, the SMTP object will automatically switch to plain SMTP mode and retry (but not vice versa). "}, {"type": "attribute", "name": "esmtp?", "desc": " Set whether to use ESMTP or not.  This should be done before calling start.  Note that if start is called in ESMTP mode, and the connection fails due to a ProtocolError, the SMTP object will automatically switch to plain SMTP mode and retry (but not vice versa). "}, {"type": "attribute", "name": "open_timeout", "desc": " Seconds to wait while attempting to open a connection. If the connection cannot be opened within this time, a Net::OpenTimeout is raised. The default value is 30 seconds. "}, {"type": "attribute", "name": "port", "desc": " The port number of the SMTP server to connect to. "}, {"type": "attribute", "name": "read_timeout", "desc": " Seconds to wait while reading one block (by one read(2) call). If the read(2) call does not complete within this time, a Net::ReadTimeout is raised. The default value is 60 seconds. "}, {"type": "public class method", "name": "default_port()", "desc": "The default SMTP port number, 25."}, {"type": "public class method", "name": "default_ssl_context()", "desc": ""}, {"type": "public class method", "name": "default_ssl_port()", "desc": ""}, {"type": "public class method", "name": "default_submission_port()", "desc": "The default mail submission port number, 587."}, {"type": "public class method", "name": "default_tls_port()", "desc": "The default SMTPS port number, 465."}, {"type": "public class method", "name": "new(address, port = nil)", "desc": "Creates a new Net::SMTP object."}, {"type": "public class method", "name": "start(address, port = nil, helo = 'localhost', user = nil, secret = nil, authtype = nil)", "desc": "Creates a new Net::SMTP object and connects to the server."}, {"type": "public instance method", "name": "auth_cram_md5(user, secret)", "desc": ""}, {"type": "public instance method", "name": "auth_login(user, secret)", "desc": ""}, {"type": "public instance method", "name": "auth_plain(user, secret)", "desc": ""}, {"type": "public instance method", "name": "authenticate(user, secret, authtype = DEFAULT_AUTH_TYPE)", "desc": ""}, {"type": "public instance method", "name": "capable_auth_types()", "desc": "Returns supported authentication methods on this server. You cannot get valid value before opening SMTP session."}, {"type": "public instance method", "name": "capable_cram_md5_auth?()", "desc": "true if server advertises AUTH CRAM-MD5. You cannot get valid value before opening SMTP session."}, {"type": "public instance method", "name": "capable_login_auth?()", "desc": "true if server advertises AUTH LOGIN. You cannot get valid value before opening SMTP session."}, {"type": "public instance method", "name": "capable_plain_auth?()", "desc": "true if server advertises AUTH PLAIN. You cannot get valid value before opening SMTP session."}, {"type": "public instance method", "name": "capable_starttls?()", "desc": "true if server advertises STARTTLS. You cannot get valid value before opening SMTP session."}, {"type": "public instance method", "name": "data(msgstr = nil)", "desc": "This method sends a message. If msgstr is given, sends it as a message. If block is given, yield a message writer stream. You must write message before the block is closed."}, {"type": "public instance method", "name": "debug_output=(arg)", "desc": "WARNING: This method causes serious security holes. Use this method for only debugging."}, {"type": "public instance method", "name": "disable_ssl()", "desc": ""}, {"type": "public instance method", "name": "disable_starttls()", "desc": "Disables SMTP/TLS (STARTTLS) for this object.  Must be called before the connection is established to have any effect."}, {"type": "public instance method", "name": "disable_tls()", "desc": "Disables SMTP/TLS for this object.  Must be called before the connection is established to have any effect."}, {"type": "public instance method", "name": "ehlo(domain)", "desc": ""}, {"type": "public instance method", "name": "enable_ssl(context = SMTP.default_ssl_context)", "desc": ""}, {"type": "public instance method", "name": "enable_starttls(context = SMTP.default_ssl_context)", "desc": "Enables SMTP/TLS (STARTTLS) for this object. context is a OpenSSL::SSL::SSLContext object."}, {"type": "public instance method", "name": "enable_starttls_auto(context = SMTP.default_ssl_context)", "desc": "Enables SMTP/TLS (STARTTLS) for this object if server accepts. context is a OpenSSL::SSL::SSLContext object."}, {"type": "public instance method", "name": "enable_tls(context = SMTP.default_ssl_context)", "desc": "Enables SMTP/TLS (SMTPS: SMTP over direct TLS connection) for this object.  Must be called before the connection is established to have any effect.  context is a OpenSSL::SSL::SSLContext object."}, {"type": "public instance method", "name": "finish()", "desc": "Finishes the SMTP session and closes TCP connection. Raises IOError if not started."}, {"type": "public instance method", "name": "helo(domain)", "desc": ""}, {"type": "public instance method", "name": "inspect()", "desc": "Provide human-readable stringification of class state."}, {"type": "public instance method", "name": "mailfrom(from_addr)", "desc": ""}, {"type": "public instance method", "name": "open_message_stream(from_addr, *to_addrs)", "desc": "Opens a message writer stream and gives it to the block. The stream is valid only in the block, and has these methods:"}, {"type": "public instance method", "name": "quit()", "desc": ""}, {"type": "public instance method", "name": "rcptto(to_addr)", "desc": ""}, {"type": "public instance method", "name": "rcptto_list(to_addrs)", "desc": ""}, {"type": "public instance method", "name": "read_timeout=(sec)", "desc": "Set the number of seconds to wait until timing-out a read(2) call."}, {"type": "public instance method", "name": "ready(from_addr, *to_addrs)", "desc": ""}, {"type": "public instance method", "name": "rset()", "desc": "Aborts the current mail transaction"}, {"type": "public instance method", "name": "send_mail(msgstr, from_addr, *to_addrs)", "desc": ""}, {"type": "public instance method", "name": "send_message(msgstr, from_addr, *to_addrs)", "desc": "Sends msgstr as a message.  Single CR (\u201cr\u201d) and LF (\u201cn\u201d) found in the msgstr, are converted into the CR LF pair.  You cannot send a binary message with this method. msgstr should include both the message headers and body."}, {"type": "public instance method", "name": "sendmail(msgstr, from_addr, *to_addrs)", "desc": ""}, {"type": "public instance method", "name": "set_debug_output(arg)", "desc": ""}, {"type": "public instance method", "name": "ssl?()", "desc": ""}, {"type": "public instance method", "name": "start(helo = 'localhost', user = nil, secret = nil, authtype = nil)", "desc": "Opens a TCP connection and starts the SMTP session."}, {"type": "public instance method", "name": "started?()", "desc": "true if the SMTP session has been started."}, {"type": "public instance method", "name": "starttls()", "desc": ""}, {"type": "public instance method", "name": "starttls?()", "desc": "Returns truth value if this object uses STARTTLS. If this object always uses STARTTLS, returns :always. If this object uses STARTTLS when the server support TLS, returns :auto."}, {"type": "public instance method", "name": "starttls_always?()", "desc": "true if this object uses STARTTLS."}, {"type": "public instance method", "name": "starttls_auto?()", "desc": "true if this object uses STARTTLS when server advertises STARTTLS."}, {"type": "public instance method", "name": "tls?()", "desc": "true if this object uses SMTP/TLS (SMTPS)."}, {"type": "alias", "name": "disable_ssl()", "desc": "             Alias for: disable_tls "}, {"type": "alias", "name": "enable_ssl(context = SMTP.default_ssl_context)", "desc": "             Alias for: enable_tls "}, {"type": "alias", "name": "ready(from_addr, *to_addrs)", "desc": "             Alias for: open_message_stream "}, {"type": "alias", "name": "send_mail(msgstr, from_addr, *to_addrs)", "desc": "             Alias for: send_message "}, {"type": "alias", "name": "sendmail(msgstr, from_addr, *to_addrs)", "desc": "             Alias for: send_message "}, {"type": "alias", "name": "set_debug_output(arg)", "desc": "             Alias for: debug_output= "}, {"type": "alias", "name": "ssl?()", "desc": "             Alias for: tls? "}]}