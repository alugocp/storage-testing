{"entries": [{"type": "constant", "name": "VERSION", "desc": ""}, {"type": "public class method", "name": "capture2(*cmd)", "desc": "::capture2 captures the standard output of a command."}, {"type": "public class method", "name": "capture2e(*cmd)", "desc": "::capture2e captures the standard output and the standard error of a command."}, {"type": "public class method", "name": "capture3(*cmd)", "desc": "::capture3 captures the standard output and the standard error of a command."}, {"type": "public class method", "name": "pipeline(*cmds)", "desc": "::pipeline starts a list of commands as a pipeline. It waits for the completion of the commands. No pipes are created for stdin of the first command and stdout of the last command."}, {"type": "public class method", "name": "pipeline_r(*cmds, &block)", "desc": "::pipeline_r starts a list of commands as a pipeline with a pipe which connects to stdout of the last command."}, {"type": "public class method", "name": "pipeline_rw(*cmds, &block)", "desc": "::pipeline_rw starts a list of commands as a pipeline with pipes which connect to stdin of the first command and stdout of the last command."}, {"type": "public class method", "name": "pipeline_start(*cmds, &block)", "desc": "::pipeline_start starts a list of commands as a pipeline. No pipes are created for stdin of the first command and stdout of the last command."}, {"type": "public class method", "name": "pipeline_w(*cmds, &block)", "desc": "::pipeline_w starts a list of commands as a pipeline with a pipe which connects to stdin of the first command."}, {"type": "public class method", "name": "popen2(*cmd, &block)", "desc": "::popen2 is similar to ::popen3 except that it doesn't create a pipe for the standard error stream."}, {"type": "public class method", "name": "popen2e(*cmd, &block)", "desc": "::popen2e is similar to ::popen3 except that it merges the standard output stream and the standard error stream."}, {"type": "public class method", "name": "popen3(*cmd, &block)", "desc": "Open stdin, stdout, and stderr streams and start external executable. In addition, a thread to wait for the started process is created. The thread has a pid method and a thread variable :pid which is the pid of the started process."}]}