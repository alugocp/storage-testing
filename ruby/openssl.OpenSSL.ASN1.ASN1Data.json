{"entries": [{"type": "attribute", "name": "indefinite_length", "desc": " Never nil. A boolean value indicating whether the encoding uses indefinite length (in the case of parsing) or whether an indefinite length form shall be used (in the encoding case). In DER, every value uses definite length form. But in scenarios where large amounts of data need to be transferred it might be desirable to have some kind of streaming support available. For example, huge OCTET STRINGs are preferably sent in smaller-sized chunks, each at a time. This is possible in BER by setting the length bytes of an encoding to zero and by this indicating that the following value will be sent in chunks. Indefinite length encodings are always constructed. The end of such a stream of chunks is indicated by sending a EOC (End of Content) tag. SETs and SEQUENCEs may use an indefinite length encoding, but also primitive types such as e.g. OCTET STRINGS or BIT STRINGS may leverage this functionality (cf. ITU-T X.690). "}, {"type": "attribute", "name": "infinite_length", "desc": " Never nil. A boolean value indicating whether the encoding uses indefinite length (in the case of parsing) or whether an indefinite length form shall be used (in the encoding case). In DER, every value uses definite length form. But in scenarios where large amounts of data need to be transferred it might be desirable to have some kind of streaming support available. For example, huge OCTET STRINGs are preferably sent in smaller-sized chunks, each at a time. This is possible in BER by setting the length bytes of an encoding to zero and by this indicating that the following value will be sent in chunks. Indefinite length encodings are always constructed. The end of such a stream of chunks is indicated by sending a EOC (End of Content) tag. SETs and SEQUENCEs may use an indefinite length encoding, but also primitive types such as e.g. OCTET STRINGS or BIT STRINGS may leverage this functionality (cf. ITU-T X.690). "}, {"type": "attribute", "name": "tag", "desc": " An Integer representing the tag number of this ASN1Data. Never nil. "}, {"type": "attribute", "name": "tag_class", "desc": " A Symbol representing the tag class of this ASN1Data. Never nil. See ASN1Data for possible values. "}, {"type": "attribute", "name": "value", "desc": " Carries the value of a ASN.1 type. Please confer Constructive and Primitive for the mappings between ASN.1 data types and Ruby classes. "}, {"type": "public class method", "name": "OpenSSL::ASN1::ASN1Data.new(value, tag, tag_class) => ASN1Dataclick to toggle source", "desc": "value: Please have a look at Constructive and Primitive to see how Ruby types are mapped to ASN.1 types and vice versa."}, {"type": "public instance method", "name": "to_der => DER-encoded Stringclick to toggle source", "desc": "Encodes this ASN1Data into a DER-encoded String value. The result is DER-encoded except for the possibility of indefinite length forms. Indefinite length forms are not allowed in strict DER, so strictly speaking the result of such an encoding would be a BER-encoding."}]}