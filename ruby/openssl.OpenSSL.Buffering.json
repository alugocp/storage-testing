{"entries": [{"type": "constant", "name": "BLOCK_SIZE", "desc": "Default size to read from or write to the SSLSocket for buffer operations."}, {"type": "attribute", "name": "sync", "desc": " The \u201csync mode\u201d of the SSLSocket. See IO#sync for full details. "}, {"type": "public class method", "name": "new(*)", "desc": "Creates an instance of OpenSSL's buffering IO module."}, {"type": "public instance method", "name": "<<(s)", "desc": "Writes s to the stream.  s will be converted to a String using .to_s method."}, {"type": "public instance method", "name": "close()", "desc": "Closes the SSLSocket and flushes any unwritten data."}, {"type": "public instance method", "name": "each(eol=$/)", "desc": "Executes the block for every line in the stream where lines are separated by eol."}, {"type": "public instance method", "name": "each_byte()", "desc": "Calls the given block once for each byte in the stream."}, {"type": "public instance method", "name": "each_line(eol=$/)", "desc": ""}, {"type": "public instance method", "name": "eof()", "desc": ""}, {"type": "public instance method", "name": "eof?()", "desc": "Returns true if the stream is at file which means there is no more data to be read."}, {"type": "public instance method", "name": "flush()", "desc": "Flushes buffered data to the SSLSocket."}, {"type": "public instance method", "name": "getc()", "desc": "Reads one character from the stream.  Returns nil if called at end of file."}, {"type": "public instance method", "name": "gets(eol=$/, limit=nil)", "desc": "Reads the next \u201cline\u201d from the stream.  Lines are separated by eol.  If limit is provided the result will not be longer than the given number of bytes."}, {"type": "public instance method", "name": "print(*args)", "desc": "Writes args to the stream."}, {"type": "public instance method", "name": "printf(s, *args)", "desc": "Formats and writes to the stream converting parameters under control of the format string."}, {"type": "public instance method", "name": "puts(*args)", "desc": "Writes args to the stream along with a record separator."}, {"type": "public instance method", "name": "read(size=nil, buf=nil)", "desc": "Reads size bytes from the stream.  If buf is provided it must reference a string which will receive the data."}, {"type": "public instance method", "name": "read_nonblock(maxlen, buf=nil, exception: true)", "desc": "Reads at most maxlen bytes in the non-blocking manner."}, {"type": "public instance method", "name": "readchar()", "desc": "Reads a one-character string from the stream.  Raises an EOFError at end of file."}, {"type": "public instance method", "name": "readline(eol=$/)", "desc": "Reads a line from the stream which is separated by eol."}, {"type": "public instance method", "name": "readlines(eol=$/)", "desc": "Reads lines from the stream which are separated by eol."}, {"type": "public instance method", "name": "readpartial(maxlen, buf=nil)", "desc": "Reads at most maxlen bytes from the stream.  If buf is provided it must reference a string which will receive the data."}, {"type": "public instance method", "name": "ungetc(c)", "desc": "Pushes character c back onto the stream such that a subsequent buffered character read will return it."}, {"type": "public instance method", "name": "write(*s)", "desc": "Writes s to the stream.  If the argument is not a String it will be converted using .to_s method.  Returns the number of bytes written."}, {"type": "public instance method", "name": "write_nonblock(s, exception: true)", "desc": "Writes s in the non-blocking manner."}, {"type": "alias", "name": "each_line(eol=$/)", "desc": "             Alias for: each "}, {"type": "alias", "name": "eof()", "desc": "             Alias for: eof? "}]}