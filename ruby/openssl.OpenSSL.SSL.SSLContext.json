{"entries": [{"type": "constant", "name": "DEFAULT_2048", "desc": ""}, {"type": "constant", "name": "METHODS", "desc": "The list of available SSL/TLS methods. This constant is only provided for\nbackwards compatibility."}, {"type": "constant", "name": "METHODS_MAP", "desc": ""}, {"type": "constant", "name": "SESSION_CACHE_BOTH", "desc": "Both client and server sessions are added to the session cache"}, {"type": "constant", "name": "SESSION_CACHE_CLIENT", "desc": "Client sessions are added to the session cache"}, {"type": "constant", "name": "SESSION_CACHE_NO_AUTO_CLEAR", "desc": "Normally the session cache is checked for expired sessions every 255\nconnections.  Since this may lead to a delay that cannot be controlled, the\nautomatic flushing may be disabled and flush_sessions can be\ncalled explicitly."}, {"type": "constant", "name": "SESSION_CACHE_NO_INTERNAL", "desc": "Enables both SESSION_CACHE_NO_INTERNAL_LOOKUP\nand SESSION_CACHE_NO_INTERNAL_STORE."}, {"type": "constant", "name": "SESSION_CACHE_NO_INTERNAL_LOOKUP", "desc": "Always perform external lookups of sessions even if they are in the\ninternal cache.\nThis flag has no effect on clients"}, {"type": "constant", "name": "SESSION_CACHE_NO_INTERNAL_STORE", "desc": "Never automatically store sessions in the internal store."}, {"type": "constant", "name": "SESSION_CACHE_OFF", "desc": "No session caching for client or server"}, {"type": "constant", "name": "SESSION_CACHE_SERVER", "desc": "Server sessions are added to the session cache"}, {"type": "attribute", "name": "alpn_protocols", "desc": " An Enumerable of Strings. Each String represents a protocol to be advertised as the list of supported protocols for Application-Layer Protocol Negotiation. Supported in OpenSSL 1.0.2 and higher. Has no effect on the server side. If not set explicitly, the ALPN extension will not be included in the handshake. Example\u00b6 \u2191 ctx.alpn_protocols = [\"http/1.1\", \"spdy/2\", \"h2\"]  "}, {"type": "attribute", "name": "alpn_select_cb", "desc": " A callback invoked on the server side when the server needs to select a protocol from the list sent by the client. Supported in OpenSSL 1.0.2 and higher. The callback must return a protocol of those advertised by the client. If none is acceptable, raising an error in the callback will cause the handshake to fail. Not setting this callback explicitly means not supporting the ALPN extension on the server - any protocols advertised by the client will be ignored. Example\u00b6 \u2191 ctx.alpn_select_cb = lambda do |protocols|   # inspect the protocols and select one   protocols.first end  "}, {"type": "attribute", "name": "ca_file", "desc": " The path to a file containing a PEM-format CA certificate "}, {"type": "attribute", "name": "ca_path", "desc": " The path to a directory containing CA certificates in PEM format. Files are looked up by subject's X509 name's hash value. "}, {"type": "attribute", "name": "cert", "desc": " Context certificate The cert, key, and extra_chain_cert attributes are deprecated. It is recommended to use add_certificate instead. "}, {"type": "attribute", "name": "cert_store", "desc": " An OpenSSL::X509::Store used for certificate verification. "}, {"type": "attribute", "name": "client_ca", "desc": " A certificate or Array of certificates that will be sent to the client. "}, {"type": "attribute", "name": "client_cert_cb", "desc": " A callback invoked when a client certificate is requested by a server and no certificate has been set. The callback is invoked with a Session and must return an Array containing an OpenSSL::X509::Certificate and an OpenSSL::PKey.  If any other value is returned the handshake is suspended. "}, {"type": "attribute", "name": "extra_chain_cert", "desc": " An Array of extra X509 certificates to be added to the certificate chain. The cert, key, and extra_chain_cert attributes are deprecated. It is recommended to use add_certificate instead. "}, {"type": "attribute", "name": "key", "desc": " Context private key The cert, key, and extra_chain_cert attributes are deprecated. It is recommended to use add_certificate instead. "}, {"type": "attribute", "name": "npn_protocols", "desc": " An Enumerable of Strings. Each String represents a protocol to be advertised as the list of supported protocols for Next Protocol Negotiation. Supported in OpenSSL 1.0.1 and higher. Has no effect on the client side. If not set explicitly, the NPN extension will not be sent by the server in the handshake. Example\u00b6 \u2191 ctx.npn_protocols = [\"http/1.1\", \"spdy/2\"]  "}, {"type": "attribute", "name": "npn_select_cb", "desc": " A callback invoked on the client side when the client needs to select a protocol from the list sent by the server. Supported in OpenSSL 1.0.1 and higher. The client MUST select a protocol of those advertised by the server. If none is acceptable, raising an error in the callback will cause the handshake to fail. Not setting this callback explicitly means not supporting the NPN extension on the client - any protocols advertised by the server will be ignored. Example\u00b6 \u2191 ctx.npn_select_cb = lambda do |protocols|   # inspect the protocols and select one   protocols.first end  "}, {"type": "attribute", "name": "renegotiation_cb", "desc": " A callback invoked whenever a new handshake is initiated. May be used to disable renegotiation entirely. The callback is invoked with the active SSLSocket. The callback's return value is irrelevant, normal return indicates \u201capproval\u201d of the renegotiation and will continue the process. To forbid renegotiation and to cancel the process, an Error may be raised within the callback. Disable client renegotiation\u00b6 \u2191 When running a server, it is often desirable to disable client renegotiation entirely. You may use a callback as follows to implement this feature: num_handshakes = 0 ctx.renegotiation_cb = lambda do |ssl|   num_handshakes += 1   raise RuntimeError.new(\"Client renegotiation disabled\") if num_handshakes > 1 end  "}, {"type": "attribute", "name": "servername_cb", "desc": " A callback invoked at connect time to distinguish between multiple server names. The callback is invoked with an SSLSocket and a server name.  The callback must return an SSLContext for the server name or nil. "}, {"type": "attribute", "name": "session_get_cb", "desc": " A callback invoked on a server when a session is proposed by the client but the session could not be found in the server's internal cache. The callback is invoked with the SSLSocket and session id.  The callback may return a Session from an external cache. "}, {"type": "attribute", "name": "session_id_context", "desc": " Sets the context in which a session can be reused.  This allows sessions for multiple applications to be distinguished, for example, by name. "}, {"type": "attribute", "name": "session_new_cb", "desc": " A callback invoked when a new session was negotiated. The callback is invoked with an SSLSocket.  If false is returned the session will be removed from the internal cache. "}, {"type": "attribute", "name": "session_remove_cb", "desc": " A callback invoked when a session is removed from the internal cache. The callback is invoked with an SSLContext and a Session. IMPORTANT NOTE: It is currently not possible to use this safely in a multi-threaded application. The callback is called inside a global lock and it can randomly cause deadlock on Ruby thread switching. "}, {"type": "attribute", "name": "ssl_timeout", "desc": " Maximum session lifetime in seconds. "}, {"type": "attribute", "name": "timeout", "desc": " Maximum session lifetime in seconds. "}, {"type": "attribute", "name": "tmp_dh_callback", "desc": " A callback invoked when DH parameters are required. The callback is invoked with the Session for the key exchange, an flag indicating the use of an export cipher and the keylength required. The callback must return an OpenSSL::PKey::DH instance of the correct key length. "}, {"type": "attribute", "name": "tmp_ecdh_callback", "desc": " A callback invoked when ECDH parameters are required. The callback is invoked with the Session for the key exchange, an flag indicating the use of an export cipher and the keylength required. The callback is deprecated. This does not work with recent versions of OpenSSL. Use #ecdh_curves= instead. "}, {"type": "attribute", "name": "verify_callback", "desc": " A callback for additional certificate verification.  The callback is invoked for each certificate in the chain. The callback is invoked with two values.  preverify_ok indicates indicates if the verification was passed (true) or not (false). store_context is an OpenSSL::X509::StoreContext containing the context used for certificate verification. If the callback returns false, the chain verification is immediately stopped and a bad_certificate alert is then sent. "}, {"type": "attribute", "name": "verify_depth", "desc": " Number of CA certificates to walk when verifying a certificate chain. "}, {"type": "attribute", "name": "verify_hostname", "desc": " Whether to check the server certificate is valid for the hostname. In order to make this work, #verify_mode must be set to VERIFY_PEER and the server hostname must be given by OpenSSL::SSL::SSLSocket#hostname=. "}, {"type": "attribute", "name": "verify_mode", "desc": " Session verification mode. Valid modes are VERIFY_NONE, VERIFY_PEER, VERIFY_CLIENT_ONCE, VERIFY_FAIL_IF_NO_PEER_CERT and defined on OpenSSL::SSL The default mode is VERIFY_NONE, which does not perform any verification at all. See SSL_CTX_set_verify(3) for details. "}, {"type": "public class method", "name": "new           \u2192 ctxclick to toggle source", "desc": ""}, {"type": "public instance method", "name": "add_certificate(certiticate, pkey [, extra_certs]) \u2192 selfclick to toggle source", "desc": "Adds a certificate to the context. pkey must be a corresponding private key with certificate."}, {"type": "public instance method", "name": "ciphers => [[name, version, bits, alg_bits], ...]click to toggle source", "desc": "The list of cipher suites configured for this context."}, {"type": "public instance method", "name": "ciphers = \"cipher1:cipher2:...\"click to toggle source", "desc": ""}, {"type": "public instance method", "name": "ecdh_curves = curve_list \u2192 curve_listclick to toggle source", "desc": "Sets the list of \u201csupported elliptic curves\u201d for this context."}, {"type": "public instance method", "name": "enable_fallback_scsv() => nilclick to toggle source", "desc": "Activate TLS_FALLBACK_SCSV for this context. See RFC 7507."}, {"type": "public instance method", "name": "flush_sessions(time) \u2192 selfclick to toggle source", "desc": "Removes sessions in the internal cache that have expired at time."}, {"type": "public instance method", "name": "freeze()", "desc": ""}, {"type": "public instance method", "name": "max_version = OpenSSL::SSL::TLS1_2_VERSIONclick to toggle source", "desc": ""}, {"type": "public instance method", "name": "min_version = OpenSSL::SSL::TLS1_2_VERSIONclick to toggle source", "desc": ""}, {"type": "public instance method", "name": "options()", "desc": "Gets various OpenSSL options."}, {"type": "public instance method", "name": "options=(p1)", "desc": "Sets various OpenSSL options."}, {"type": "public instance method", "name": "security_level \u2192 Integerclick to toggle source", "desc": "Returns the security level for the context."}, {"type": "public instance method", "name": "security_level = integerclick to toggle source", "desc": "Sets the security level for the context. OpenSSL limits parameters according to the level. The \u201cparameters\u201d include: ciphersuites, curves, key sizes, certificate signature algorithms, protocol version and so on. For example, level 1 rejects parameters offering below 80 bits of security, such as ciphersuites using MD5 for the MAC or RSA keys shorter than 1024 bits."}, {"type": "public instance method", "name": "session_add(session) \u2192 true | falseclick to toggle source", "desc": "Adds session to the session cache."}, {"type": "public instance method", "name": "session_cache_mode \u2192 Integerclick to toggle source", "desc": "The current session cache mode."}, {"type": "public instance method", "name": "session_cache_mode=(integer) \u2192 Integerclick to toggle source", "desc": "Sets the SSL session cache mode.  Bitwise-or together the desired SESSION_CACHE_* constants to set.  See SSL_CTX_set_session_cache_mode(3) for details."}, {"type": "public instance method", "name": "session_cache_size \u2192 Integerclick to toggle source", "desc": "Returns the current session cache size.  Zero is used to represent an unlimited cache size."}, {"type": "public instance method", "name": "session_cache_size=(integer) \u2192 Integerclick to toggle source", "desc": "Sets the session cache size.  Returns the previously valid session cache size.  Zero is used to represent an unlimited session cache size."}, {"type": "public instance method", "name": "session_cache_stats \u2192 Hashclick to toggle source", "desc": "Returns a Hash containing the following keys:"}, {"type": "public instance method", "name": "session_remove(session) \u2192 true | falseclick to toggle source", "desc": "Removes session from the session cache."}, {"type": "public instance method", "name": "set_params(params = {}) \u2192 paramsclick to toggle source", "desc": "Sets saner defaults optimized for the use with HTTP-like protocols."}, {"type": "public instance method", "name": "setup => Qtrue # first timeclick to toggle source", "desc": ""}, {"type": "public instance method", "name": "ssl_version = :TLSv1click to toggle source", "desc": ""}, {"type": "alias", "name": "freeze()", "desc": "             Alias for: setup "}]}