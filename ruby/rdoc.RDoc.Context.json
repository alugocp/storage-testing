{"entries": [{"type": "constant", "name": "TYPES", "desc": "Types of methods"}, {"type": "attribute", "name": "aliases", "desc": " Class/module aliases "}, {"type": "attribute", "name": "attributes", "desc": " All attr* methods "}, {"type": "attribute", "name": "block_params", "desc": " Block params to be used in the next MethodAttr parsed under this context "}, {"type": "attribute", "name": "constants", "desc": " Constants defined "}, {"type": "attribute", "name": "constants_hash", "desc": " Hash of registered constants. "}, {"type": "attribute", "name": "current_line_visibility", "desc": " Current visibility of this line "}, {"type": "attribute", "name": "current_section", "desc": " Sets the current documentation section of documentation "}, {"type": "attribute", "name": "extends", "desc": " Modules this context is extended with "}, {"type": "attribute", "name": "external_aliases", "desc": " Aliases that could not be resolved. "}, {"type": "attribute", "name": "in_files", "desc": " Files this context is found in "}, {"type": "attribute", "name": "includes", "desc": " Modules this context includes "}, {"type": "attribute", "name": "method_list", "desc": " Methods defined in this context "}, {"type": "attribute", "name": "methods_hash", "desc": " Hash of registered methods. Attributes are also registered here, twice if they are RW. "}, {"type": "attribute", "name": "name", "desc": " Name of this class excluding namespace.  See also #full_name "}, {"type": "attribute", "name": "params", "desc": " Params to be used in the next MethodAttr parsed under this context "}, {"type": "attribute", "name": "requires", "desc": " Files this context requires "}, {"type": "attribute", "name": "temporary_section", "desc": " Use this section for the next method, attribute or constant added. "}, {"type": "attribute", "name": "unmatched_alias_lists", "desc": " Hash old_name => [aliases], for aliases that haven't (yet) been resolved to a method/attribute. (Not to be confused with the aliases of the context.) "}, {"type": "attribute", "name": "visibility", "desc": " Current visibility of this context "}, {"type": "public class method", "name": "new()", "desc": "Creates an unnamed empty context with public current visibility"}, {"type": "public instance method", "name": "<=>(other)", "desc": "Contexts are sorted by #full_name"}, {"type": "public instance method", "name": "add(klass, name, comment)", "desc": "Adds an item of type klass with the given name and comment to the context."}, {"type": "public instance method", "name": "add_alias(an_alias)", "desc": "Adds an_alias that is automatically resolved"}, {"type": "public instance method", "name": "add_attribute(attribute)", "desc": "Adds attribute if not already there. If it is (as method(s) or attribute), updates the comment if it was empty."}, {"type": "public instance method", "name": "add_class(class_type, given_name, superclass = '::Object')", "desc": "Adds a class named given_name with superclass."}, {"type": "public instance method", "name": "add_class_or_module(mod, self_hash, all_hash)", "desc": "Adds the class or module mod to the modules or classes Hash self_hash, and to all_hash (either TopLevel::modules_hash or TopLevel::classes_hash), unless done_documenting is true. Sets the parent of mod to self, and its section to current_section. Returns mod."}, {"type": "public instance method", "name": "add_constant(constant)", "desc": "Adds constant if not already there. If it is, updates the comment, value and/or is_alias_for of the known constant if they were empty/nil."}, {"type": "public instance method", "name": "add_extend(ext)", "desc": "Adds extension module ext which should be an RDoc::Extend"}, {"type": "public instance method", "name": "add_include(include)", "desc": "Adds included module include which should be an RDoc::Include"}, {"type": "public instance method", "name": "add_method(method)", "desc": "Adds method if not already there. If it is (as method or attribute), updates the comment if it was empty."}, {"type": "public instance method", "name": "add_module(class_type, name)", "desc": "Adds a module named name.  If RDoc already knows name is a class then that class is returned instead.  See also add_class."}, {"type": "public instance method", "name": "add_module_alias(from, from_name, to, file)", "desc": "Adds an alias from from (a class or module) to name which was defined in file."}, {"type": "public instance method", "name": "add_module_by_normal_module(mod)", "desc": "Adds a module by RDoc::NormalModule instance. See also add_module."}, {"type": "public instance method", "name": "add_require(require)", "desc": "Adds require to this context's top level"}, {"type": "public instance method", "name": "add_section(title, comment = nil)", "desc": "Returns a section with title, creating it if it doesn't already exist. comment will be appended to the section's comment."}, {"type": "public instance method", "name": "add_to(array, thing)", "desc": "Adds thing to the collection array"}, {"type": "public instance method", "name": "any_content(includes = true)", "desc": "Is there any content?"}, {"type": "public instance method", "name": "child_name(name)", "desc": "Creates the full name for a child with name"}, {"type": "public instance method", "name": "class_attributes()", "desc": "Class attributes"}, {"type": "public instance method", "name": "class_method_list()", "desc": "Class methods"}, {"type": "public instance method", "name": "classes()", "desc": "Array of classes in this context"}, {"type": "public instance method", "name": "classes_and_modules()", "desc": "All classes and modules in this namespace"}, {"type": "public instance method", "name": "classes_hash()", "desc": "Hash of classes keyed by class name"}, {"type": "public instance method", "name": "current_section()", "desc": "The current documentation section that new items will be added to.  If #temporary_section is available it will be used."}, {"type": "public instance method", "name": "defined_in?(file)", "desc": "Is part of this thing was defined in file?"}, {"type": "public instance method", "name": "each_attribute()", "desc": "Iterator for attributes"}, {"type": "public instance method", "name": "each_classmodule()", "desc": "Iterator for classes and modules"}, {"type": "public instance method", "name": "each_constant()", "desc": "Iterator for constants"}, {"type": "public instance method", "name": "each_extend()", "desc": "Iterator for extension modules"}, {"type": "public instance method", "name": "each_include()", "desc": "Iterator for included modules"}, {"type": "public instance method", "name": "each_method()", "desc": "Iterator for methods"}, {"type": "public instance method", "name": "each_section()", "desc": "Iterator for each section's contents sorted by title.  The section, the section's constants and the sections attributes are yielded.  The constants and attributes collections are sorted."}, {"type": "public instance method", "name": "find_attribute(name, singleton)", "desc": "Finds an attribute name with singleton value singleton."}, {"type": "public instance method", "name": "find_attribute_named(name)", "desc": "Finds an attribute with name in this context"}, {"type": "public instance method", "name": "find_class_method_named(name)", "desc": "Finds a class method with name in this context"}, {"type": "public instance method", "name": "find_constant_named(name)", "desc": "Finds a constant with name in this context"}, {"type": "public instance method", "name": "find_enclosing_module_named(name)", "desc": "Find a module at a higher scope"}, {"type": "public instance method", "name": "find_external_alias(name, singleton)", "desc": "Finds an external alias name with singleton value singleton."}, {"type": "public instance method", "name": "find_external_alias_named(name)", "desc": "Finds an external alias with name in this context"}, {"type": "public instance method", "name": "find_file_named(name)", "desc": "Finds a file with name in this context"}, {"type": "public instance method", "name": "find_instance_method_named(name)", "desc": "Finds an instance method with name in this context"}, {"type": "public instance method", "name": "find_local_symbol(symbol)", "desc": "Finds a method, constant, attribute, external alias, module or file named symbol in this context."}, {"type": "public instance method", "name": "find_method(name, singleton)", "desc": "Finds a method named name with singleton value singleton."}, {"type": "public instance method", "name": "find_method_named(name)", "desc": "Finds a instance or module method with name in this context"}, {"type": "public instance method", "name": "find_module_named(name)", "desc": "Find a module with name using ruby's scoping rules"}, {"type": "public instance method", "name": "find_symbol(symbol)", "desc": "Look up symbol, first as a module, then as a local symbol."}, {"type": "public instance method", "name": "find_symbol_module(symbol)", "desc": "Look up a module named symbol."}, {"type": "public instance method", "name": "full_name()", "desc": "The full name for this context.  This method is overridden by subclasses."}, {"type": "public instance method", "name": "fully_documented?()", "desc": "Does this context and its methods and constants all have documentation?"}, {"type": "public instance method", "name": "http_url(prefix)", "desc": "URL for this with a prefix"}, {"type": "public instance method", "name": "initialize_methods_etc()", "desc": "Sets the defaults for methods and so-forth"}, {"type": "public instance method", "name": "instance_attributes()", "desc": "Instance attributes"}, {"type": "public instance method", "name": "instance_method_list()", "desc": "Instance methods"}, {"type": "public instance method", "name": "methods_by_type(section = nil)", "desc": "Breaks #method_list into a nested hash by type ('class' or 'instance') and visibility (:public, :protected, :private)."}, {"type": "public instance method", "name": "methods_matching(methods, singleton = false, &block)", "desc": "Yields AnyMethod and Attr entries matching the list of names in methods."}, {"type": "public instance method", "name": "modules()", "desc": "Array of modules in this context"}, {"type": "public instance method", "name": "modules_hash()", "desc": "Hash of modules keyed by module name"}, {"type": "public instance method", "name": "name_for_path()", "desc": "Name to use to generate the url. #full_name by default."}, {"type": "public instance method", "name": "ongoing_visibility=(visibility)", "desc": "Changes the visibility for new methods to visibility"}, {"type": "public instance method", "name": "record_location(top_level)", "desc": "Record top_level as a file self is in."}, {"type": "public instance method", "name": "remove_from_documentation?()", "desc": "Should we remove this context from the documentation?"}, {"type": "public instance method", "name": "remove_invisible(min_visibility)", "desc": "Removes methods and attributes with a visibility less than min_visibility."}, {"type": "public instance method", "name": "resolve_aliases(added)", "desc": "Tries to resolve unmatched aliases when a method or attribute has just been added."}, {"type": "public instance method", "name": "section_contents()", "desc": "Returns RDoc::Context::Section objects referenced in this context for use in a table of contents."}, {"type": "public instance method", "name": "sections()", "desc": "Sections in this context"}, {"type": "public instance method", "name": "set_constant_visibility_for(names, visibility)", "desc": "Given an array names of constants, set the visibility of each constant to visibility"}, {"type": "public instance method", "name": "set_current_section(title, comment)", "desc": "Sets the current section to a section with title.  See also add_section"}, {"type": "public instance method", "name": "set_visibility_for(methods, visibility, singleton = false)", "desc": "Given an array methods of method names, set the visibility of each to visibility"}, {"type": "public instance method", "name": "sort_sections()", "desc": "Sorts sections alphabetically (default) or in TomDoc fashion (none, Public, Internal, Deprecated)"}, {"type": "public instance method", "name": "top_level()", "desc": "Return the TopLevel that owns us"}, {"type": "public instance method", "name": "upgrade_to_class(mod, class_type, enclosing)", "desc": "Upgrades NormalModule mod in enclosing to a class_type"}]}