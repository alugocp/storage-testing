{"entries": [{"type": "constant", "name": "NULL", "desc": "The NUL character"}, {"type": "attribute", "name": "attributes", "desc": " The attributes enabled for this markup object. "}, {"type": "attribute", "name": "html_tags", "desc": " This maps HTML tags to the corresponding attribute char "}, {"type": "attribute", "name": "matching_word_pairs", "desc": " This maps delimiters that occur around words (such as bold or tt) where the start and end delimiters and the same. This lets us optimize the regexp "}, {"type": "attribute", "name": "protectable", "desc": " A \\ in front of a character that would normally be processed turns off processing. We do this by turning < into <#{PROTECT} "}, {"type": "attribute", "name": "regexp_handlings", "desc": " And this maps _regexp handling_ sequences to a name. A regexp handling sequence is something like a WikiWord "}, {"type": "attribute", "name": "word_pair_map", "desc": " And this is used when the delimiters aren't the same. In this case the hash maps a pattern to the attribute character "}, {"type": "public class method", "name": "new()", "desc": "Creates a new attribute manager that understands bold, emphasized and teletype text."}, {"type": "public instance method", "name": "add_html(tag, name)", "desc": "Adds a markup class with name for words surrounded by HTML tag tag. To process emphasis tags:"}, {"type": "public instance method", "name": "add_regexp_handling(pattern, name)", "desc": "Adds a regexp handling for pattern with name.  A simple URL handler would be:"}, {"type": "public instance method", "name": "add_word_pair(start, stop, name)", "desc": "Adds a markup class with name for words wrapped in the start and stop character.  To make words wrapped with \u201c*\u201d bold:"}, {"type": "public instance method", "name": "attribute(turn_on, turn_off)", "desc": "Return an attribute object with the given turn_on and turn_off bits set"}, {"type": "public instance method", "name": "change_attribute(current, new)", "desc": "Changes the current attribute from current to new"}, {"type": "public instance method", "name": "changed_attribute_by_name(current_set, new_set)", "desc": "Used by the tests to change attributes by name from current_set to new_set"}, {"type": "public instance method", "name": "convert_attrs(str, attrs)", "desc": "Map attributes like textto the sequence 001002<char>001003<char>, where <char> is a per-attribute specific character"}, {"type": "public instance method", "name": "convert_html(str, attrs)", "desc": "Converts HTML tags to RDoc attributes"}, {"type": "public instance method", "name": "convert_regexp_handlings(str, attrs)", "desc": "Converts regexp handling sequences to RDoc attributes"}, {"type": "public instance method", "name": "copy_string(start_pos, end_pos)", "desc": "Copies start_pos to end_pos from the current string"}, {"type": "public instance method", "name": "display_attributes()", "desc": "Debug method that prints a string along with its attributes"}, {"type": "public instance method", "name": "flow(str)", "desc": "Processes str converting attributes, HTML and regexp handlings"}, {"type": "public instance method", "name": "mask_protected_sequences()", "desc": "Escapes regexp handling sequences of text to prevent conversion to RDoc"}, {"type": "public instance method", "name": "split_into_flow()", "desc": "Splits the string into chunks by attribute change"}, {"type": "public instance method", "name": "unmask_protected_sequences()", "desc": "Unescapes regexp handling sequences of text"}]}