{"entries": [{"type": "attribute", "name": "context", "desc": " RDoc::CodeObject for generating references "}, {"type": "attribute", "name": "show_hash", "desc": " Should we show '#' characters on method references? "}, {"type": "public class method", "name": "new(options, from_path, context, markup = nil)", "desc": "Creates a new crossref resolver that generates links relative to context which lives at from_path in the generated files.  '#' characters on references are removed unless show_hash is true.  Only method names preceded by '#' or '::' are linked, unless hyperlink_all is true."}, {"type": "public instance method", "name": "cross_reference(name, text = nil, code = true)", "desc": "Creates a link to the reference name if the name exists.  If text is given it is used as the link text, otherwise name is used."}, {"type": "public instance method", "name": "gen_url(url, text)", "desc": "Generates links for rdoc-ref: scheme URLs and allows RDoc::Markup::ToHtml to handle other schemes."}, {"type": "public instance method", "name": "handle_regexp_CROSSREF(target)", "desc": "We're invoked when any text matches the CROSSREF pattern.  If we find the corresponding reference, generate a link.  If the name we're looking for contains no punctuation, we look for it up the module/class chain.  For example, ToHtml is found, even without the RDoc::Markup:: prefix, because we look for it in module Markup first."}, {"type": "public instance method", "name": "handle_regexp_HYPERLINK(target)", "desc": "Handles rdoc-ref: scheme links and allows RDoc::Markup::ToHtml to handle other schemes."}, {"type": "public instance method", "name": "handle_regexp_RDOCLINK(target)", "desc": "target is an rdoc-schemed link that will be converted into a hyperlink. For the rdoc-ref scheme the cross-reference will be looked up and the given name will be used."}, {"type": "public instance method", "name": "link(name, text, code = true)", "desc": "Creates an HTML link to name with the given text."}]}