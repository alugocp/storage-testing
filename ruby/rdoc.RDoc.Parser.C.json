{"entries": [{"type": "attribute", "name": "classes", "desc": " Maps C variable names to names of Ruby classes or modules "}, {"type": "attribute", "name": "content", "desc": " C file the parser is parsing "}, {"type": "attribute", "name": "enclosure_dependencies", "desc": " Dependencies from a missing enclosing class to the classes in #missing_dependencies that depend upon it. "}, {"type": "attribute", "name": "known_classes", "desc": " Maps C variable names to names of Ruby classes (and singleton classes) "}, {"type": "attribute", "name": "missing_dependencies", "desc": " Classes found while parsing the C file that were not yet registered due to a missing enclosing class.  These are processed by #do_missing "}, {"type": "attribute", "name": "singleton_classes", "desc": " Maps C variable names to names of Ruby singleton classes "}, {"type": "attribute", "name": "top_level", "desc": " The TopLevel items in the parsed file belong to "}, {"type": "public class method", "name": "new(top_level, file_name, content, options, stats)", "desc": "Prepares for parsing a C file.  See RDoc::Parser#initialize for details on the arguments."}, {"type": "public instance method", "name": "deduplicate_call_seq()", "desc": "Removes duplicate call-seq entries for methods using the same implementation."}, {"type": "public instance method", "name": "do_aliases()", "desc": "Scans content for rb_define_alias"}, {"type": "public instance method", "name": "do_attrs()", "desc": "Scans content for rb_attr and rb_define_attr"}, {"type": "public instance method", "name": "do_boot_defclass()", "desc": "Scans content for boot_defclass"}, {"type": "public instance method", "name": "do_classes_and_modules()", "desc": "Scans content for rb_define_class, boot_defclass, rb_define_class_under and rb_singleton_class"}, {"type": "public instance method", "name": "do_constants()", "desc": "Scans content for rb_define_variable, rb_define_readonly_variable, rb_define_const and rb_define_global_const"}, {"type": "public instance method", "name": "do_includes()", "desc": "Scans content for rb_include_module"}, {"type": "public instance method", "name": "do_methods()", "desc": "Scans content for rb_define_method, rb_define_singleton_method, rb_define_module_function, rb_define_private_method, rb_define_global_function and define_filetest_function"}, {"type": "public instance method", "name": "do_missing()", "desc": "Creates classes and module that were missing were defined due to the file order being different than the declaration order."}, {"type": "public instance method", "name": "find_alias_comment(class_name, new_name, old_name)", "desc": "Finds the comment for an alias on class_name from new_name to old_name"}, {"type": "public instance method", "name": "find_attr_comment(var_name, attr_name, read = nil, write = nil)", "desc": "Finds a comment for rb_define_attr, rb_attr or Document-attr."}, {"type": "public instance method", "name": "find_body(class_name, meth_name, meth_obj, file_content, quiet = false)", "desc": "Find the C code corresponding to a Ruby method"}, {"type": "public instance method", "name": "find_class(raw_name, name)", "desc": "Finds a RDoc::NormalClass or RDoc::NormalModule for raw_name"}, {"type": "public instance method", "name": "find_class_comment(class_name, class_mod)", "desc": "Look for class or module documentation above Init_+class_name+(void), in a Document-class class_name (or module) comment or above an rb_define_class (or module).  If a comment is supplied above a matching Init_ and a rb_define_class the Init_ comment is used."}, {"type": "public instance method", "name": "find_const_comment(type, const_name, class_name = nil)", "desc": "Finds a comment matching type and const_name either above the comment or in the matching Document- section."}, {"type": "public instance method", "name": "find_modifiers(comment, meth_obj)", "desc": "Handles modifiers in comment and updates meth_obj as appropriate."}, {"type": "public instance method", "name": "find_override_comment(class_name, meth_obj)", "desc": "Finds a Document-method override for meth_obj on class_name"}, {"type": "public instance method", "name": "gen_body_table(file_content)", "desc": "Generate a Ruby-method table"}, {"type": "public instance method", "name": "gen_const_table(file_content)", "desc": "Generate a const table"}, {"type": "public instance method", "name": "handle_attr(var_name, attr_name, read, write)", "desc": "Creates a new RDoc::Attr attr_name on class var_name that is either read, write or both"}, {"type": "public instance method", "name": "handle_class_module(var_name, type, class_name, parent, in_module)", "desc": "Creates a new RDoc::NormalClass or RDoc::NormalModule based on type named class_name in parent which was assigned to the C var_name."}, {"type": "public instance method", "name": "handle_constants(type, var_name, const_name, definition)", "desc": "Adds constants.  By providing some_value: at the start of the comment you can override the C value of the comment to give a friendly definition."}, {"type": "public instance method", "name": "handle_ifdefs_in(body)", "desc": "Removes ifdefs that would otherwise confuse us"}, {"type": "public instance method", "name": "handle_method(type, var_name, meth_name, function, param_count, source_file = nil)", "desc": "Adds an RDoc::AnyMethod meth_name defined on a class or module assigned to var_name.  type is the type of method definition function used. singleton_method and module_function create a singleton method."}, {"type": "public instance method", "name": "handle_singleton(sclass_var, class_var)", "desc": "Registers a singleton class sclass_var as a singleton of class_var"}, {"type": "public instance method", "name": "handle_tab_width(body)", "desc": "Normalizes tabs in body"}, {"type": "public instance method", "name": "load_variable_map(map_name)", "desc": "Loads the variable map with the given name from the RDoc::Store, if present."}, {"type": "public instance method", "name": "look_for_directives_in(context, comment)", "desc": "Look for directives in a normal comment block:"}, {"type": "public instance method", "name": "rb_scan_args(method_body)", "desc": "Extracts parameters from the method_body and returns a method parameter string.  Follows 1.9.3dev's scan-arg-spec, see README.EXT"}, {"type": "public instance method", "name": "remove_commented_out_lines()", "desc": "Removes lines that are commented out that might otherwise get picked up when scanning for classes and methods"}, {"type": "public instance method", "name": "scan()", "desc": "Extracts the classes, modules, methods, attributes, constants and aliases from a C file and returns an RDoc::TopLevel for this file"}]}