{"entries": [{"type": "constant", "name": "NORMAL", "desc": "RDoc::NormalClass type"}, {"type": "constant", "name": "SINGLE", "desc": "RDoc::SingleClass type"}, {"type": "public class method", "name": "new(top_level, file_name, content, options, stats)", "desc": "Creates a new Ruby parser."}, {"type": "public instance method", "name": "collect_first_comment()", "desc": "Look for the first comment in a file that isn't a shebang line."}, {"type": "public instance method", "name": "error(msg)", "desc": "Aborts with msg"}, {"type": "public instance method", "name": "get_bool()", "desc": "Looks for a true or false token."}, {"type": "public instance method", "name": "get_class_or_module(container, ignore_constants = false)", "desc": "or"}, {"type": "public instance method", "name": "get_class_specification()", "desc": "Return a superclass, which can be either a constant of an expression"}, {"type": "public instance method", "name": "get_constant()", "desc": "Parse a constant, which might be qualified by one or more class or module names"}, {"type": "public instance method", "name": "get_included_module_with_optional_parens()", "desc": "Get an included module that may be surrounded by parens"}, {"type": "public instance method", "name": "get_symbol_or_name()", "desc": "Extracts a name or symbol from the token stream."}, {"type": "public instance method", "name": "look_for_directives_in(container, comment)", "desc": "Look for directives in a normal comment block:"}, {"type": "public instance method", "name": "make_message(message)", "desc": "Adds useful info about the parser to message"}, {"type": "public instance method", "name": "new_comment(comment, line_no = nil)", "desc": "Creates a comment with the correct format"}, {"type": "public instance method", "name": "parse_alias(context, single, tk, comment)", "desc": "Parses an alias in context with comment"}, {"type": "public instance method", "name": "parse_attr(context, single, tk, comment)", "desc": "Creates an RDoc::Attr for the name following tk, setting the comment to comment."}, {"type": "public instance method", "name": "parse_attr_accessor(context, single, tk, comment)", "desc": "Creates an RDoc::Attr for each attribute listed after tk, setting the comment for each to comment."}, {"type": "public instance method", "name": "parse_call_parameters(tk)", "desc": "Extracts call parameters from the token stream."}, {"type": "public instance method", "name": "parse_class(container, single, tk, comment)", "desc": "Parses a class in context with comment"}, {"type": "public instance method", "name": "parse_comment(container, tk, comment)", "desc": "Generates an RDoc::Method or RDoc::Attr from comment by looking for :method: or :attr: directives in comment."}, {"type": "public instance method", "name": "parse_comment_tomdoc(container, tk, comment)", "desc": "Creates an RDoc::Method on container from comment if there is a Signature section in the comment"}, {"type": "public instance method", "name": "parse_constant(container, tk, comment, ignore_constants = false)", "desc": "Parses a constant in context with comment.  If ignore_constants is true, no found constants will be added to RDoc."}, {"type": "public instance method", "name": "parse_constant_visibility(container, single, tk)", "desc": "Parses a Module#private_constant or Module#public_constant call from tk."}, {"type": "public instance method", "name": "parse_meta_attr(context, single, tk, comment)", "desc": "Parses a meta-programmed attribute and creates an RDoc::Attr."}, {"type": "public instance method", "name": "parse_meta_method(container, single, tk, comment)", "desc": "Parses a meta-programmed method"}, {"type": "public instance method", "name": "parse_method(container, single, tk, comment)", "desc": "Parses a normal method defined by def"}, {"type": "public instance method", "name": "parse_method_dummy(container)", "desc": "Parses a method that needs to be ignored."}, {"type": "public instance method", "name": "parse_method_or_yield_parameters(method = nil, modifiers = RDoc::METHOD_MODIFIERS)", "desc": "Extracts yield parameters from method"}, {"type": "public instance method", "name": "parse_method_parameters(method)", "desc": "Capture the method's parameters. Along the way, look for a comment containing:"}, {"type": "public instance method", "name": "parse_method_params_and_body(container, single, meth, added_container)", "desc": "Parses the parameters and body of meth"}, {"type": "public instance method", "name": "parse_module(container, single, tk, comment)", "desc": "Parses an RDoc::NormalModule in container with comment"}, {"type": "public instance method", "name": "parse_require(context, comment)", "desc": "Parses an RDoc::Require in context containing comment"}, {"type": "public instance method", "name": "parse_rescue()", "desc": "Parses a rescue"}, {"type": "public instance method", "name": "parse_statements(container, single = NORMAL, current_method = nil, comment = new_comment(''))", "desc": "The core of the Ruby parser."}, {"type": "public instance method", "name": "parse_symbol_arg(no = nil)", "desc": "Parse up to no symbol arguments"}, {"type": "public instance method", "name": "parse_symbol_in_arg()", "desc": "Returns symbol text from the next token"}, {"type": "public instance method", "name": "parse_top_level_statements(container)", "desc": "Parses statements in the top-level container"}, {"type": "public instance method", "name": "parse_visibility(container, single, tk)", "desc": "Determines the visibility in container from tk"}, {"type": "public instance method", "name": "parse_yield(context, single, tk, method)", "desc": "Determines the block parameter for context"}, {"type": "public instance method", "name": "read_directive(allowed)", "desc": "Directives are modifier comments that can appear after class, module, or method names. For example:"}, {"type": "public instance method", "name": "read_documentation_modifiers(context, allowed)", "desc": "Handles directives following the definition for context (any RDoc::CodeObject) if the directives are allowed at this point."}, {"type": "public instance method", "name": "retrieve_comment_body(tk)", "desc": "Retrieve comment body without =begin/=end"}, {"type": "public instance method", "name": "scan()", "desc": "Scans this Ruby file for Ruby constructs"}, {"type": "public instance method", "name": "skip_for_variable()", "desc": "skip the var [in] part of a 'for' statement"}, {"type": "public instance method", "name": "skip_method(container)", "desc": "Skips the next method in container"}, {"type": "public instance method", "name": "skip_optional_do_after_expression()", "desc": "while, until, and for have an optional do"}, {"type": "public instance method", "name": "skip_tkspace_comment(skip_nl = true)", "desc": "Skip spaces until a comment is found"}, {"type": "public instance method", "name": "tk_nl?(tk)", "desc": ""}, {"type": "public instance method", "name": "warn(message)", "desc": "Prints message to +$stderr+ unless we're being quiet"}]}