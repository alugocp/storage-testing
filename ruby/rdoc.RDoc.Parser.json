{"entries": [{"type": "attribute", "name": "parsers", "desc": " An Array of arrays that maps file extension (or name) regular expressions to parser classes that will parse matching filenames. Use ::parse_files_matching to register a parser's file extensions. "}, {"type": "attribute", "name": "file_name", "desc": " The name of the file being parsed "}, {"type": "public class method", "name": "alias_extension(old_ext, new_ext)", "desc": "Alias an extension to another extension. After this call, files ending \u201cnew_ext\u201d will be parsed using the same parser as \u201cold_ext\u201d"}, {"type": "public class method", "name": "binary?(file)", "desc": "Determines if the file is a \u201cbinary\u201d file which basically means it has content that an RDoc parser shouldn't try to consume."}, {"type": "public class method", "name": "can_parse(file_name)", "desc": "Return a parser that can handle a particular extension"}, {"type": "public class method", "name": "can_parse_by_name(file_name)", "desc": "Returns a parser that can handle the extension for file_name.  This does not depend upon the file being readable."}, {"type": "public class method", "name": "check_modeline(file_name)", "desc": "Returns the file type from the modeline in file_name"}, {"type": "public class method", "name": "for(top_level, file_name, content, options, stats)", "desc": "Finds and instantiates the correct parser for the given file_name and content."}, {"type": "public class method", "name": "new(top_level, file_name, content, options, stats)", "desc": "Creates a new Parser storing top_level, file_name, content, options and stats in instance variables.  In +@preprocess+ an RDoc::Markup::PreProcess object is created which allows processing of directives."}, {"type": "public class method", "name": "parse_files_matching(regexp)", "desc": "Record which file types this parser can understand."}, {"type": "public class method", "name": "remove_modeline(content)", "desc": "Removes an emacs-style modeline from the first line of the document"}, {"type": "public class method", "name": "use_markup(content)", "desc": "If there is a markup: parser_name comment at the front of the file, use it to determine the parser.  For example:"}, {"type": "public class method", "name": "zip?(file)", "desc": "Checks if file is a zip file in disguise.  Signatures from www.garykessler.net/library/file_sigs.html"}]}