{"entries": [{"type": "constant", "name": "GENERATORS", "desc": "This is the list of supported output generators"}, {"type": "attribute", "name": "generator", "desc": " Generator instance used for creating output "}, {"type": "attribute", "name": "last_modified", "desc": " Hash of files and their last modified times. "}, {"type": "attribute", "name": "options", "desc": " RDoc options "}, {"type": "attribute", "name": "stats", "desc": " Accessor for statistics.  Available after each call to #parse_files "}, {"type": "attribute", "name": "store", "desc": " The current documentation store "}, {"type": "public class method", "name": "add_generator(klass)", "desc": "Add klass that can generate output after parsing"}, {"type": "public class method", "name": "current()", "desc": "Active RDoc::RDoc instance"}, {"type": "public class method", "name": "current=(rdoc)", "desc": "Sets the active RDoc::RDoc instance"}, {"type": "public class method", "name": "new()", "desc": "Creates a new RDoc::RDoc instance.  Call document to parse files and generate documentation."}, {"type": "public instance method", "name": "document(options)", "desc": "Generates documentation or a coverage report depending upon the settings in options."}, {"type": "public instance method", "name": "error(msg)", "desc": "Report an error message and exit"}, {"type": "public instance method", "name": "gather_files(files)", "desc": "Gathers a set of parseable files from the files and directories listed in files."}, {"type": "public instance method", "name": "generate()", "desc": "Generates documentation for file_info (from parse_files) into the output dir using the generator selected by the RDoc options"}, {"type": "public instance method", "name": "handle_pipe()", "desc": "Turns RDoc from stdin into HTML"}, {"type": "public instance method", "name": "install_siginfo_handler()", "desc": "Installs a siginfo handler that prints the current filename."}, {"type": "public instance method", "name": "list_files_in_directory(dir)", "desc": "Return a list of the files to be processed in a directory. We know that this directory doesn't have a .document file, so we're looking for real files. However we may well contain subdirectories which must be tested for .document files."}, {"type": "public instance method", "name": "load_options()", "desc": "Loads options from .rdoc_options if the file exists, otherwise creates a new RDoc::Options instance."}, {"type": "public instance method", "name": "normalized_file_list(relative_files, force_doc = false, exclude_pattern = nil)", "desc": "Given a list of files and directories, create a list of all the Ruby files they contain."}, {"type": "public instance method", "name": "output_flag_file(op_dir)", "desc": "Return the path name of the flag file in an output directory."}, {"type": "public instance method", "name": "parse_dot_doc_file(in_dir, filename)", "desc": "The .document file contains a list of file and directory name patterns, representing candidates for documentation. It may also contain comments (starting with '#')"}, {"type": "public instance method", "name": "parse_file(filename)", "desc": "Parses filename and returns an RDoc::TopLevel"}, {"type": "public instance method", "name": "parse_files(files)", "desc": "Parse each file on the command line, recursively entering directories."}, {"type": "public instance method", "name": "remove_siginfo_handler()", "desc": "Removes a siginfo handler and replaces the previous"}, {"type": "public instance method", "name": "remove_unparseable(files)", "desc": "Removes file extensions known to be unparseable from files and TAGS files for emacs and vim."}, {"type": "public instance method", "name": "setup_output_dir(dir, force)", "desc": "Create an output dir if it doesn't exist. If it does exist, but doesn't contain the flag file created.rid then we refuse to use it, as we may clobber some manually generated documentation"}, {"type": "public instance method", "name": "store=(store)", "desc": "Sets the current documentation tree to store and sets the store's rdoc driver to this instance."}, {"type": "public instance method", "name": "update_output_dir(op_dir, time, last = {})", "desc": "Update the flag file in an output directory."}]}