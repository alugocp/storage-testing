{"entries": [{"type": "attribute", "name": "show_all", "desc": " Show all method documentation following a class or module "}, {"type": "attribute", "name": "stores", "desc": " An RDoc::RI::Store for each entry in the RI path "}, {"type": "attribute", "name": "use_stdout", "desc": " Controls the user of the pager vs $stdout "}, {"type": "public class method", "name": "default_options()", "desc": "Default options for ri"}, {"type": "public class method", "name": "dump(data_path)", "desc": "Dump data_path using pp"}, {"type": "public class method", "name": "new(initial_options = {})", "desc": "Creates a new driver using initial_options from ::process_args"}, {"type": "public class method", "name": "process_args(argv)", "desc": "Parses argv and returns a Hash of options"}, {"type": "public class method", "name": "run(argv = ARGV)", "desc": "Runs the ri command line executable using argv"}, {"type": "public instance method", "name": "add_also_in(out, also_in)", "desc": "Adds paths for undocumented classes also_in to out"}, {"type": "public instance method", "name": "add_class(out, name, classes)", "desc": "Adds a class header to out for class name which is described in classes."}, {"type": "public instance method", "name": "add_extends(out, extends)", "desc": "Adds extends to out"}, {"type": "public instance method", "name": "add_extension_modules(out, type, extensions)", "desc": "Adds a list of extensions to this module of the given type to out. #add_includes and #add_extends call this, so you should use those directly."}, {"type": "public instance method", "name": "add_from(out, store)", "desc": "Adds \u201c(from \u2026)\u201d to out for store"}, {"type": "public instance method", "name": "add_includes(out, includes)", "desc": "Adds includes to out"}, {"type": "public instance method", "name": "add_method(out, name)", "desc": "Looks up the method name and adds it to out"}, {"type": "public instance method", "name": "add_method_documentation(out, klass)", "desc": "Adds documentation for all methods in klass to out"}, {"type": "public instance method", "name": "add_method_list(out, methods, name)", "desc": "Adds a list of methods to out with a heading of name"}, {"type": "public instance method", "name": "ancestors_of(klass)", "desc": "Returns ancestor classes of klass"}, {"type": "public instance method", "name": "class_document(name, found, klasses, includes, extends)", "desc": "Builds a RDoc::Markup::Document from found, klasess and includes"}, {"type": "public instance method", "name": "classes()", "desc": "Hash mapping a known class or module to the stores it can be loaded from"}, {"type": "public instance method", "name": "classes_and_includes_and_extends_for(name)", "desc": "Returns the stores wherein name is found along with the classes, extends and includes that match it"}, {"type": "public instance method", "name": "complete(name)", "desc": "Completes name based on the caches.  For Readline"}, {"type": "public instance method", "name": "display(document)", "desc": "Converts document to text and writes it to the pager"}, {"type": "public instance method", "name": "display_class(name)", "desc": "Outputs formatted RI data for class name.  Groups undocumented classes"}, {"type": "public instance method", "name": "display_method(name)", "desc": "Outputs formatted RI data for method name"}, {"type": "public instance method", "name": "display_name(name)", "desc": "Outputs formatted RI data for the class or method name."}, {"type": "public instance method", "name": "display_names(names)", "desc": "Displays each name in name"}, {"type": "public instance method", "name": "display_page(name)", "desc": "Outputs formatted RI data for page name."}, {"type": "public instance method", "name": "display_page_list(store, pages = store.cache[:pages], search = nil)", "desc": "Outputs a formatted RI page list for the pages in store."}, {"type": "public instance method", "name": "expand_class(klass)", "desc": "Expands abbreviated klass klass into a fully-qualified class.  \u201cZl::Da\u201d will be expanded to Zlib::DataError."}, {"type": "public instance method", "name": "expand_name(name)", "desc": "Expands the class portion of name into a fully-qualified class.  See expand_class."}, {"type": "public instance method", "name": "filter_methods(found, name)", "desc": "Filters the methods in found trying to find a match for name."}, {"type": "public instance method", "name": "find_methods(name)", "desc": "Yields items matching name including the store they were found in, the class being searched for, the class they were found in (an ancestor) the types of methods to look up (from method_type), and the method name being searched for"}, {"type": "public instance method", "name": "find_pager_jruby(pager)", "desc": "Finds the given pager for jruby.  Returns an IO if pager was found."}, {"type": "public instance method", "name": "find_store(name)", "desc": "Finds a store that matches name which can be the name of a gem, \u201cruby\u201d, \u201chome\u201d or \u201csite\u201d."}, {"type": "public instance method", "name": "formatter(io)", "desc": "Creates a new RDoc::Markup::Formatter.  If a formatter is given with -f, use it.  If we're outputting to a pager, use bs, otherwise ansi."}, {"type": "public instance method", "name": "in_path?(file)", "desc": "Is file in ENV?"}, {"type": "public instance method", "name": "interactive()", "desc": "Runs ri interactively using Readline if it is available."}, {"type": "public instance method", "name": "list_known_classes(names = [])", "desc": "Lists classes known to ri starting with names.  If names is empty all known classes are shown."}, {"type": "public instance method", "name": "list_methods_matching(name)", "desc": "Returns an Array of methods matching name"}, {"type": "public instance method", "name": "load_method(store, cache, klass, type, name)", "desc": "Loads RI data for method name on klass from store.  type and cache indicate if it is a class or instance method."}, {"type": "public instance method", "name": "load_methods_matching(name)", "desc": "Returns an Array of RI data for methods matching name"}, {"type": "public instance method", "name": "lookup_method(name)", "desc": "Returns a filtered list of methods matching name"}, {"type": "public instance method", "name": "method_document(name, filtered)", "desc": "Builds a RDoc::Markup::Document from found, klasses and includes"}, {"type": "public instance method", "name": "method_type(selector)", "desc": "Returns the type of method (:both, :instance, :class) for selector"}, {"type": "public instance method", "name": "name_regexp(name)", "desc": "Returns a regular expression for name that will match an RDoc::AnyMethod's name."}, {"type": "public instance method", "name": "page()", "desc": "Paginates output through a pager program."}, {"type": "public instance method", "name": "paging?()", "desc": "Are we using a pager?"}, {"type": "public instance method", "name": "parse_name(name)", "desc": "Extracts the class, selector and method name parts from name like Foo::Bar#baz."}, {"type": "public instance method", "name": "run()", "desc": "Looks up and displays ri data according to the options given."}, {"type": "public instance method", "name": "setup_pager()", "desc": "Sets up a pager program to pass output through.  Tries the RI_PAGER and PAGER environment variables followed by pager, less then more."}, {"type": "public instance method", "name": "start_server()", "desc": "Starts a WEBrick server for ri."}]}