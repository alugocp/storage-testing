{"entries": [{"type": "public class method", "name": "new(parent=nil)", "desc": "Constructor @param parent if supplied, will be set as the parent of this object"}, {"type": "public instance method", "name": "<<( object )", "desc": ""}, {"type": "public instance method", "name": "[]( index )", "desc": "Fetches a child at a given index @param index the Integer index of the child to fetch"}, {"type": "public instance method", "name": "[]=( *args )", "desc": "Set an index entry.  See Array.[]= @param index the index of the element to set @param opt either the object to set, or an Integer length @param child if opt is an Integer, this is the child to set @return the parent (self)"}, {"type": "public instance method", "name": "add( object )", "desc": ""}, {"type": "public instance method", "name": "children()", "desc": ""}, {"type": "public instance method", "name": "deep_clone()", "desc": "Deeply clones this object.  This creates a complete duplicate of this Parent, including all descendants."}, {"type": "public instance method", "name": "delete( object )", "desc": ""}, {"type": "public instance method", "name": "delete_at( index )", "desc": ""}, {"type": "public instance method", "name": "delete_if( &block )", "desc": ""}, {"type": "public instance method", "name": "each(&block)", "desc": ""}, {"type": "public instance method", "name": "each_child(&block)", "desc": ""}, {"type": "public instance method", "name": "each_index( &block )", "desc": ""}, {"type": "public instance method", "name": "index( child )", "desc": "Fetches the index of a given child @param child the child to get the index of @return the index of the child, or nil if the object is not a child of this parent."}, {"type": "public instance method", "name": "insert_after( child1, child2 )", "desc": "Inserts an child after another child @param child1 this is either an xpath or an Element.  If an Element, child2 will be inserted after child1 in the child list of the parent. If an xpath, child2 will be inserted after the first child to match the xpath. @param child2 the child to insert @return the parent (self)"}, {"type": "public instance method", "name": "insert_before( child1, child2 )", "desc": "Inserts an child before another child @param child1 this is either an xpath or an Element.  If an Element, child2 will be inserted before child1 in the child list of the parent. If an xpath, child2 will be inserted before the first child to match the xpath. @param child2 the child to insert @return the parent (self)"}, {"type": "public instance method", "name": "length()", "desc": ""}, {"type": "public instance method", "name": "parent?()", "desc": ""}, {"type": "public instance method", "name": "push( object )", "desc": ""}, {"type": "public instance method", "name": "replace_child( to_replace, replacement )", "desc": "Replaces one child with another, making sure the nodelist is correct @param to_replace the child to replace (must be a Child) @param replacement the child to insert into the nodelist (must be a Child)"}, {"type": "public instance method", "name": "size()", "desc": "@return the number of children of this parent"}, {"type": "public instance method", "name": "to_a()", "desc": ""}, {"type": "public instance method", "name": "unshift( object )", "desc": ""}, {"type": "alias", "name": "<<( object )", "desc": "             Alias for: push "}, {"type": "alias", "name": "children()", "desc": "             Alias for: to_a "}, {"type": "alias", "name": "each_child(&block)", "desc": "             Alias for: each "}, {"type": "alias", "name": "length()", "desc": "             Alias for: size "}, {"type": "alias", "name": "push( object )", "desc": "             Also aliased as: << "}]}