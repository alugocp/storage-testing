{"entries": [{"type": "constant", "name": "ATTDEF", "desc": ""}, {"type": "constant", "name": "ATTDEF_RE", "desc": ""}, {"type": "constant", "name": "ATTLISTDECL_PATTERN", "desc": ""}, {"type": "constant", "name": "ATTLISTDECL_START", "desc": ""}, {"type": "constant", "name": "ATTRIBUTE_PATTERN", "desc": ""}, {"type": "constant", "name": "ATTTYPE", "desc": ""}, {"type": "constant", "name": "ATTVALUE", "desc": ""}, {"type": "constant", "name": "CDATA_END", "desc": ""}, {"type": "constant", "name": "CDATA_PATTERN", "desc": ""}, {"type": "constant", "name": "CDATA_START", "desc": ""}, {"type": "constant", "name": "CLOSE_MATCH", "desc": ""}, {"type": "constant", "name": "COMBININGCHAR", "desc": ""}, {"type": "constant", "name": "COMMENT_PATTERN", "desc": ""}, {"type": "constant", "name": "COMMENT_START", "desc": ""}, {"type": "constant", "name": "DEFAULTDECL", "desc": ""}, {"type": "constant", "name": "DEFAULT_ENTITIES", "desc": ""}, {"type": "constant", "name": "DIGIT", "desc": ""}, {"type": "constant", "name": "DOCTYPE_END", "desc": ""}, {"type": "constant", "name": "DOCTYPE_PATTERN", "desc": ""}, {"type": "constant", "name": "DOCTYPE_START", "desc": ""}, {"type": "constant", "name": "ELEMENTDECL_PATTERN", "desc": ""}, {"type": "constant", "name": "ELEMENTDECL_START", "desc": ""}, {"type": "constant", "name": "ENCODING", "desc": ""}, {"type": "constant", "name": "ENTITYDECL", "desc": ""}, {"type": "constant", "name": "ENTITYDEF", "desc": ""}, {"type": "constant", "name": "ENTITYVALUE", "desc": ""}, {"type": "constant", "name": "ENTITY_START", "desc": ""}, {"type": "constant", "name": "ENUMERATEDTYPE", "desc": ""}, {"type": "constant", "name": "ENUMERATION", "desc": ""}, {"type": "constant", "name": "EREFERENCE", "desc": ""}, {"type": "constant", "name": "EXTENDER", "desc": ""}, {"type": "constant", "name": "EXTERNALID", "desc": ""}, {"type": "constant", "name": "GEDECL", "desc": ""}, {"type": "constant", "name": "IDENTITY", "desc": ""}, {"type": "constant", "name": "INSTRUCTION_PATTERN", "desc": ""}, {"type": "constant", "name": "INSTRUCTION_START", "desc": ""}, {"type": "constant", "name": "LETTER", "desc": ""}, {"type": "constant", "name": "NAME", "desc": ""}, {"type": "constant", "name": "NAMECHAR", "desc": ""}, {"type": "constant", "name": "NCNAME_STR", "desc": ""}, {"type": "constant", "name": "NDATADECL", "desc": ""}, {"type": "constant", "name": "NMTOKEN", "desc": ""}, {"type": "constant", "name": "NMTOKENS", "desc": ""}, {"type": "constant", "name": "NOTATIONDECL_START", "desc": ""}, {"type": "constant", "name": "NOTATIONTYPE", "desc": ""}, {"type": "constant", "name": "PEDECL", "desc": ""}, {"type": "constant", "name": "PEDEF", "desc": ""}, {"type": "constant", "name": "PEREFERENCE", "desc": ""}, {"type": "constant", "name": "PUBIDCHAR", "desc": "Entity constants"}, {"type": "constant", "name": "PUBIDLITERAL", "desc": ""}, {"type": "constant", "name": "PUBLIC", "desc": ""}, {"type": "constant", "name": "QNAME", "desc": ""}, {"type": "constant", "name": "QNAME_STR", "desc": ""}, {"type": "constant", "name": "REFERENCE", "desc": ""}, {"type": "constant", "name": "REFERENCE_RE", "desc": ""}, {"type": "constant", "name": "STANDALONE", "desc": ""}, {"type": "constant", "name": "SYSTEM", "desc": ""}, {"type": "constant", "name": "SYSTEMENTITY", "desc": ""}, {"type": "constant", "name": "SYSTEMLITERAL", "desc": ""}, {"type": "constant", "name": "TAG_MATCH", "desc": ""}, {"type": "constant", "name": "TEXT_PATTERN", "desc": ""}, {"type": "constant", "name": "UNAME_STR", "desc": "Just for backward compatibility. For example, kramdown uses this. It's\nnot used in REXML."}, {"type": "constant", "name": "VERSION", "desc": ""}, {"type": "constant", "name": "XMLDECL_PATTERN", "desc": ""}, {"type": "constant", "name": "XMLDECL_START", "desc": ""}, {"type": "attribute", "name": "source", "desc": " "}, {"type": "public class method", "name": "new( source )", "desc": ""}, {"type": "public instance method", "name": "add_listener( listener )", "desc": ""}, {"type": "public instance method", "name": "empty?()", "desc": "Returns true if there are no more events"}, {"type": "public instance method", "name": "entity( reference, entities )", "desc": ""}, {"type": "public instance method", "name": "has_next?()", "desc": "Returns true if there are more events.  Synonymous with !empty?"}, {"type": "public instance method", "name": "normalize( input, entities=nil, entity_filter=nil )", "desc": "Escapes all possible entities"}, {"type": "public instance method", "name": "peek(depth=0)", "desc": "Peek at the depth event in the stack.  The first element on the stack is at depth 0.  If depth is -1, will parse to the end of the input stream and return the last event, which is always :end_document. Be aware that this causes the stream to be parsed up to the depth event, so you can effectively pre-parse the entire document (pull the entire thing into memory) using this method."}, {"type": "public instance method", "name": "position()", "desc": ""}, {"type": "public instance method", "name": "pull()", "desc": "Returns the next event.  This is a PullEvent object."}, {"type": "public instance method", "name": "stream=( source )", "desc": ""}, {"type": "public instance method", "name": "unnormalize( string, entities=nil, filter=nil )", "desc": "Unescapes all possible entities"}, {"type": "public instance method", "name": "unshift(token)", "desc": "Push an event back on the head of the stream.  This method has (theoretically) infinite depth."}]}