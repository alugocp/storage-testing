{"entries": [{"type": "constant", "name": "EMPTY_HASH", "desc": "A base Hash object to be used when initializing a default empty namespaces\nset."}, {"type": "constant", "name": "OPERAND_", "desc": ""}, {"type": "public class method", "name": "attribute( name )", "desc": ""}, {"type": "public class method", "name": "axe( elements, axe_name, rest )", "desc": ""}, {"type": "public class method", "name": "each(element, path, namespaces=EMPTY_HASH, &block)", "desc": ""}, {"type": "public class method", "name": "filter(elements, path)", "desc": "Given an array of nodes it filters the array based on the path. The result is that when this method returns, the array will contain elements which match the path"}, {"type": "public class method", "name": "first(element, path, namespaces=EMPTY_HASH)", "desc": ""}, {"type": "public class method", "name": "function( elements, fname, rest )", "desc": ""}, {"type": "public class method", "name": "match(element, path, namespaces=EMPTY_HASH)", "desc": ""}, {"type": "public class method", "name": "method_missing( id, *args )", "desc": ""}, {"type": "public class method", "name": "name()", "desc": ""}, {"type": "public class method", "name": "parse_args( element, string )", "desc": ""}, {"type": "public class method", "name": "predicate( elements, path )", "desc": "A predicate filters a node-set with respect to an axis to produce a new node-set. For each node in the node-set to be filtered, the PredicateExpr is evaluated with that node as the context node, with the number of nodes in the node-set as the context size, and with the proximity position of the node in the node-set with respect to the axis as the context position; if PredicateExpr evaluates to true for that node, the node is included in the new node-set; otherwise, it is not included."}]}