{"entries": [{"type": "attribute", "name": "buffer", "desc": " The current buffer (what we're going to read next) "}, {"type": "attribute", "name": "encoding", "desc": " "}, {"type": "attribute", "name": "line", "desc": " The line number of the last consumed text "}, {"type": "public class method", "name": "new(arg, encoding=nil)", "desc": "Constructor @param arg must be a String, and should be a valid XML document @param encoding if non-null, sets the encoding of the source to this value, overriding all encoding detection"}, {"type": "public instance method", "name": "consume( pattern )", "desc": ""}, {"type": "public instance method", "name": "current_line()", "desc": "@return the current line in the source"}, {"type": "public instance method", "name": "empty?()", "desc": "@return true if the Source is exhausted"}, {"type": "public instance method", "name": "encoding=(enc)", "desc": "Inherited from Encoding Overridden to support optimized en/decoding"}, {"type": "public instance method", "name": "match(pattern, cons=false)", "desc": ""}, {"type": "public instance method", "name": "match_to( char, pattern )", "desc": ""}, {"type": "public instance method", "name": "match_to_consume( char, pattern )", "desc": ""}, {"type": "public instance method", "name": "position()", "desc": ""}, {"type": "public instance method", "name": "read()", "desc": ""}, {"type": "public instance method", "name": "scan(pattern, cons=false)", "desc": "Scans the source for a given pattern.  Note, that this is not your usual scan() method.  For one thing, the pattern argument has some requirements; for another, the source can be consumed.  You can easily confuse this method.  Originally, the patterns were easier to construct and this method more robust, because this method generated search regexps on the fly; however, this was computationally expensive and slowed down the entire REXML package considerably, since this is by far the most commonly called method. @param pattern must be a Regexp, and must be in the form of /^s*(#{your pattern, with no groups})(.*)/.  The first group will be returned; the second group is used if the consume flag is set. @param consume if true, the pattern returned will be consumed, leaving everything after it in the Source. @return the pattern, if found, or nil if the Source is empty or the pattern is not found."}]}