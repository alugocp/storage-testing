{"entries": [{"type": "constant", "name": "DefaultPrereleaseRequirement", "desc": "The default requirement matches any version"}, {"type": "constant", "name": "DefaultRequirement", "desc": "The default requirement matches any non-prerelease version"}, {"type": "constant", "name": "PATTERN", "desc": "A regular expression that matches a requirement"}, {"type": "public class method", "name": "create(*inputs)", "desc": "Factory method to create a Gem::Requirement object.  Input may be a Version, a String, or nil.  Intended to simplify client code."}, {"type": "public class method", "name": "default()", "desc": ""}, {"type": "public class method", "name": "default_prerelease()", "desc": ""}, {"type": "public class method", "name": "new(*requirements)", "desc": "Constructs a requirement from requirements. Requirements can be Strings, Gem::Versions, or Arrays of those. nil and duplicate requirements are ignored. An empty set of requirements is the same as \">= 0\"."}, {"type": "public class method", "name": "parse(obj)", "desc": "Parse obj, returning an [op, version] pair. obj can be a String or a Gem::Version."}, {"type": "public instance method", "name": "===(version)", "desc": ""}, {"type": "public instance method", "name": "=~(version)", "desc": ""}, {"type": "public instance method", "name": "concat(new)", "desc": "Concatenates the new requirements onto this requirement."}, {"type": "public instance method", "name": "exact?()", "desc": "true if the requirement is for only an exact version"}, {"type": "public instance method", "name": "none?()", "desc": "true if this gem has no requirements."}, {"type": "public instance method", "name": "prerelease?()", "desc": "A requirement is a prerelease if any of the versions inside of it are prereleases"}, {"type": "public instance method", "name": "satisfied_by?(version)", "desc": "True if version satisfies this Requirement."}, {"type": "public instance method", "name": "specific?()", "desc": "True if the requirement will not always match the latest version."}, {"type": "alias", "name": "===(version)", "desc": "             Alias for: satisfied_by? "}, {"type": "alias", "name": "=~(version)", "desc": "             Alias for: satisfied_by? "}]}