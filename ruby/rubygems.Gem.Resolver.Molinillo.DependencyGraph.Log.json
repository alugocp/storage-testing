{"entries": [{"type": "public class method", "name": "new()", "desc": "Initializes an empty log"}, {"type": "public instance method", "name": "add_edge_no_circular(graph, origin, destination, requirement)", "desc": "@macro action"}, {"type": "public instance method", "name": "add_vertex(graph, name, payload, root)", "desc": "@macro action"}, {"type": "public instance method", "name": "delete_edge(graph, origin_name, destination_name, requirement)", "desc": "{include:DependencyGraph#delete_edge} @param [Graph] graph the graph to perform the action on @param [String] origin_name @param [String] destination_name @param [Object] requirement @return (see Gem::Resolver::Molinillo::DependencyGraph#delete_edge)"}, {"type": "public instance method", "name": "detach_vertex_named(graph, name)", "desc": "@macro action"}, {"type": "public instance method", "name": "each()", "desc": "@!visibility private Enumerates each action in the log @yield [Action]"}, {"type": "public instance method", "name": "pop!(graph)", "desc": "Pops the most recent action from the log and undoes the action @param [DependencyGraph] graph @return [Action] the action that was popped off the log"}, {"type": "public instance method", "name": "reverse_each()", "desc": "@!visibility private Enumerates each action in the log in reverse order @yield [Action]"}, {"type": "public instance method", "name": "rewind_to(graph, tag)", "desc": "@macro action"}, {"type": "public instance method", "name": "set_payload(graph, name, payload)", "desc": "@macro action"}, {"type": "public instance method", "name": "tag(graph, tag)", "desc": "@macro action"}]}