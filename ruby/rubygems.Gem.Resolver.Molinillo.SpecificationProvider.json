{"entries": [{"type": "public instance method", "name": "allow_missing?(dependency)", "desc": "Returns whether this dependency, which has no possible matching specifications, can safely be ignored."}, {"type": "public instance method", "name": "dependencies_for(specification)", "desc": "Returns the dependencies of `specification`. @note This method should be 'pure', i.e. the return value should depend"}, {"type": "public instance method", "name": "name_for(dependency)", "desc": "Returns the name for the given `dependency`. @note This method should be 'pure', i.e. the return value should depend"}, {"type": "public instance method", "name": "name_for_explicit_dependency_source()", "desc": "@return [String] the name of the source of explicit dependencies, i.e."}, {"type": "public instance method", "name": "name_for_locking_dependency_source()", "desc": "@return [String] the name of the source of 'locked' dependencies, i.e."}, {"type": "public instance method", "name": "requirement_satisfied_by?(requirement, activated, spec)", "desc": "Determines whether the given `requirement` is satisfied by the given `spec`, in the context of the current `activated` dependency graph."}, {"type": "public instance method", "name": "search_for(dependency)", "desc": "Search for the specifications that match the given dependency. The specifications in the returned array will be considered in reverse order, so the latest version ought to be last. @note This method should be 'pure', i.e. the return value should depend"}, {"type": "public instance method", "name": "sort_dependencies(dependencies, activated, conflicts)", "desc": "Sort dependencies so that the ones that are easiest to resolve are first. Easiest to resolve is (usually) defined by:"}]}