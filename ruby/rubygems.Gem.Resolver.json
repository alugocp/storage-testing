{"entries": [{"type": "constant", "name": "DEBUG_RESOLVER", "desc": "If the DEBUG_RESOLVER\nenvironment variable is set then debugging mode is enabled for the\nresolver.  This will display information about the state of the resolver\nwhile a set of dependencies is being resolved."}, {"type": "constant", "name": "SINGLE_POSSIBILITY_CONSTRAINT_PENALTY", "desc": ""}, {"type": "attribute", "name": "development", "desc": " Set to true if all development dependencies should be considered. "}, {"type": "attribute", "name": "development_shallow", "desc": " Set to true if immediate development dependencies should be considered. "}, {"type": "attribute", "name": "ignore_dependencies", "desc": " When true, no dependencies are looked up for requested gems. "}, {"type": "attribute", "name": "missing", "desc": " List of dependencies that could not be found in the configured sources. "}, {"type": "attribute", "name": "skip_gems", "desc": " Hash of gems to skip resolution.  Keyed by gem name, with arrays of gem specifications as values. "}, {"type": "attribute", "name": "soft_missing", "desc": " When a missing dependency, don't stop. Just go on and record what was missing. "}, {"type": "attribute", "name": "stats", "desc": " "}, {"type": "public class method", "name": "compose_sets(*sets)", "desc": "Combines sets into a ComposedSet that allows specification lookup in a uniform manner.  If one of the sets is itself a ComposedSet its sets are flattened into the result ComposedSet."}, {"type": "public class method", "name": "for_current_gems(needed)", "desc": "Creates a Resolver that queries only against the already installed gems for the needed dependencies."}, {"type": "public class method", "name": "new(needed, set = nil)", "desc": "Create Resolver object which will resolve the tree starting with needed Dependency objects."}, {"type": "public instance method", "name": "allow_missing?(dependency)", "desc": ""}, {"type": "public instance method", "name": "debug?()", "desc": ""}, {"type": "public instance method", "name": "dependencies_for(specification)", "desc": ""}, {"type": "public instance method", "name": "name_for(dependency)", "desc": ""}, {"type": "public instance method", "name": "output()", "desc": ""}, {"type": "public instance method", "name": "requirement_satisfied_by?(requirement, activated, spec)", "desc": ""}, {"type": "public instance method", "name": "resolve()", "desc": "Proceed with resolution! Returns an array of ActivationRequest objects."}, {"type": "public instance method", "name": "search_for(dependency)", "desc": ""}, {"type": "public instance method", "name": "sort_dependencies(dependencies, activated, conflicts)", "desc": ""}]}