{"entries": [{"type": "constant", "name": "LOAD_CACHE_MUTEX", "desc": "rubocop:enable Style/MutableConstant"}, {"type": "constant", "name": "NONEXISTENT_SPECIFICATION_VERSION", "desc": "The version number of a specification that does not specify one (i.e.\nRubyGems 0.7 or earlier)."}, {"type": "attribute", "name": "bindir", "desc": " The path in the gem for executable scripts.  Usually 'bin' Usage: spec.bindir = 'bin'  "}, {"type": "attribute", "name": "cert_chain", "desc": " The certificate chain used to sign this gem.  See Gem::Security for details. "}, {"type": "attribute", "name": "post_install_message", "desc": " A message that gets displayed after the gem is installed. Usage: spec.post_install_message = \"Thanks for installing!\"  "}, {"type": "attribute", "name": "required_ruby_version", "desc": " The version of Ruby required by this gem "}, {"type": "attribute", "name": "required_rubygems_version", "desc": " The RubyGems version required by this gem "}, {"type": "attribute", "name": "rubygems_version", "desc": " The version of RubyGems used to create this gem. Do not set this, it is set automatically when the gem is packaged. "}, {"type": "attribute", "name": "signing_key", "desc": " The key used to sign this gem.  See Gem::Security for details. "}, {"type": "public class method", "name": "_load(str)", "desc": "Load custom marshal format, re-initializing defaults as needed"}, {"type": "public class method", "name": "all()", "desc": "Returns all specifications. This method is discouraged from use. You probably want to use one of the Enumerable methods instead."}, {"type": "public class method", "name": "all=(specs)", "desc": "Sets the known specs to specs. Not guaranteed to work for you in the future. Use at your own risk. Caveat emptor. Doomy doom doom. Etc etc."}, {"type": "public class method", "name": "all_names()", "desc": "Return full names of all specs in sorted order."}, {"type": "public class method", "name": "array_attributes()", "desc": "Return the list of all array-oriented instance variables."}, {"type": "public class method", "name": "attribute_names()", "desc": "Return the list of all instance variables."}, {"type": "public class method", "name": "default_stubs(pattern = \"*.gemspec\")", "desc": "Returns a Gem::StubSpecification for default gems"}, {"type": "public class method", "name": "dirs()", "desc": "Return the directories that Specification uses to find specs."}, {"type": "public class method", "name": "dirs=(dirs)", "desc": "Set the directories that Specification uses to find specs. Setting this resets the list of known specs."}, {"type": "public class method", "name": "each()", "desc": "Enumerate every known spec.  See ::dirs= and ::add_spec to set the list of specs."}, {"type": "public class method", "name": "find_active_stub_by_path(path)", "desc": ""}, {"type": "public class method", "name": "find_all_by_full_name(full_name)", "desc": "Returns every spec that has the given full_name"}, {"type": "public class method", "name": "find_all_by_name(name, *requirements)", "desc": "Returns every spec that matches name and optional requirements."}, {"type": "public class method", "name": "find_by_name(name, *requirements)", "desc": "Find the best specification matching a name and requirements. Raises if the dependency doesn't resolve to a valid specification."}, {"type": "public class method", "name": "find_by_path(path)", "desc": "Return the best specification that contains the file matching path."}, {"type": "public class method", "name": "find_in_unresolved(path)", "desc": "Return currently unresolved specs that contain the file matching path."}, {"type": "public class method", "name": "find_in_unresolved_tree(path)", "desc": "Search through all unresolved deps and sub-dependencies and return specs that contain the file matching path."}, {"type": "public class method", "name": "find_inactive_by_path(path)", "desc": "Return the best specification that contains the file matching path amongst the specs that are not activated."}, {"type": "public class method", "name": "from_yaml(input)", "desc": "Special loader for YAML files.  When a Specification object is loaded from a YAML file, it bypasses the normal Ruby object initialization routine (#initialize).  This method makes up for that and deals with gems of different ages."}, {"type": "public class method", "name": "latest_specs(prerelease = false)", "desc": "Return the latest specs, optionally including prerelease specs if prerelease is true."}, {"type": "public class method", "name": "load(file)", "desc": "Loads Ruby format gemspec from file."}, {"type": "public class method", "name": "load_defaults()", "desc": "Loads the default specifications. It should be called only once."}, {"type": "public class method", "name": "new(name = nil, version = nil)", "desc": "Specification constructor. Assigns the default values to the attributes and yields itself for further initialization.  Optionally takes name and version."}, {"type": "public class method", "name": "non_nil_attributes()", "desc": "Specification attributes that must be non-nil"}, {"type": "public class method", "name": "normalize_yaml_input(input)", "desc": "Make sure the YAML specification is properly formatted with dashes"}, {"type": "public class method", "name": "outdated()", "desc": "Return a list of all outdated local gem names.  This method is HEAVY as it must go fetch specifications from the server."}, {"type": "public class method", "name": "outdated_and_latest_version()", "desc": "Enumerates the outdated local gems yielding the local specification and the latest remote version."}, {"type": "public class method", "name": "required_attribute?(name)", "desc": "Is name a required attribute?"}, {"type": "public class method", "name": "required_attributes()", "desc": "Required specification attributes"}, {"type": "public class method", "name": "reset()", "desc": "Reset the list of known specs, running pre and post reset hooks registered in Gem."}, {"type": "public class method", "name": "stubs()", "desc": "Returns a Gem::StubSpecification for every installed gem"}, {"type": "public class method", "name": "stubs_for(name)", "desc": "Returns a Gem::StubSpecification for installed gem named name only returns stubs that match Gem.platforms"}, {"type": "public class method", "name": "unresolved_deps()", "desc": "DOC: This method needs documented or nodoc'd"}, {"type": "public instance method", "name": "add_development_dependency(gem, *requirements)", "desc": "Adds a development dependency named gem with requirements to this gem."}, {"type": "public instance method", "name": "add_runtime_dependency(gem, *requirements)", "desc": "Adds a runtime dependency named gem with requirements to this gem."}, {"type": "public instance method", "name": "author=(o)", "desc": "Singular (alternative) writer for authors"}, {"type": "public instance method", "name": "executables()", "desc": "Executables included in the gem."}, {"type": "public instance method", "name": "extensions()", "desc": "Extensions to build when installing the gem, specifically the paths to extconf.rb-style files used to compile extensions."}, {"type": "public instance method", "name": "extra_rdoc_files()", "desc": "Extra files to add to RDoc such as README or doc/examples.txt"}, {"type": "public instance method", "name": "platform=(platform)", "desc": "The platform this gem runs on."}, {"type": "public instance method", "name": "rdoc_options()", "desc": "Specifies the rdoc options to be used when generating API documentation."}, {"type": "public instance method", "name": "require_paths=(val)", "desc": "Paths in the gem to add to $LOAD_PATH when this gem is activated. If you have an extension you do not need to add \"ext\" to the require path, the extension build process will copy the extension files into \u201clib\u201d for you."}, {"type": "public instance method", "name": "required_ruby_version=(req)", "desc": "The version of Ruby required by this gem.  The ruby version can be specified to the patch-level:"}, {"type": "public instance method", "name": "required_rubygems_version=(req)", "desc": "The RubyGems version required by this gem"}, {"type": "public instance method", "name": "requirements()", "desc": "Lists the external (to RubyGems) requirements that must be met for this gem to work.  It's simply information for the user."}]}