{"entries": [{"type": "constant", "name": "TEST_PATH", "desc": ""}, {"type": "public class method", "name": "java_platform?()", "desc": "Is this test being run on a Java platform?"}, {"type": "public class method", "name": "make_command()", "desc": "Returns the make command for the current platform. For versions of Ruby built on MS Windows with VC++ or Borland it will return 'nmake'. On all other platforms, including Cygwin, it will return 'make'."}, {"type": "public class method", "name": "process_based_port()", "desc": "Allows tests to use a random (but controlled) port number instead of a hardcoded one. This helps CI tools when running parallels builds on the same builder slave."}, {"type": "public class method", "name": "rubybin()", "desc": "Finds the path to the Ruby executable"}, {"type": "public class method", "name": "vc_windows?()", "desc": "Returns whether or not we're on a version of Ruby built with VC++ (or Borland) versus Cygwin, Mingw, etc."}, {"type": "public class method", "name": "win_platform?()", "desc": "Is this test being run on a Windows platform?"}, {"type": "public instance method", "name": "add_to_fetcher(spec, path=nil, repo=@gem_repo)", "desc": "Add spec to +@fetcher+ serving the data in the file path. repo indicates which repo to make spec appear to be in."}, {"type": "public instance method", "name": "all_spec_names()", "desc": ""}, {"type": "public instance method", "name": "ask_if_ok(spec)", "desc": ""}, {"type": "public instance method", "name": "assert_activate(expected, *specs)", "desc": ""}, {"type": "public instance method", "name": "assert_contains_make_command(target, output, msg = nil)", "desc": ""}, {"type": "public instance method", "name": "assert_directory_exists(path, msg = nil)", "desc": ""}, {"type": "public instance method", "name": "assert_path_exists(path, msg = nil)", "desc": "TODO: move to minitest"}, {"type": "public instance method", "name": "bindir(value)", "desc": "Sets the bindir entry in RbConfig::CONFIG to value and restores the original value when the block ends"}, {"type": "public instance method", "name": "build_rake_in(good=true)", "desc": "Allows the proper version of rake to be used for the test."}, {"type": "public instance method", "name": "common_installer_setup()", "desc": ""}, {"type": "public instance method", "name": "common_installer_teardown()", "desc": ""}, {"type": "public instance method", "name": "enable_shared(value)", "desc": "Sets the ENABLE_SHARED entry in RbConfig::CONFIG to value and restores the original value when the block ends"}, {"type": "public instance method", "name": "exeext(value)", "desc": "Sets the EXEEXT entry in RbConfig::CONFIG to value and restores the original value when the block ends"}, {"type": "public instance method", "name": "git_gem(name = 'a', version = 1)", "desc": "A #git_gem is used with a gem dependencies file.  The gem created here has no files, just a gem specification for the given name and version."}, {"type": "public instance method", "name": "have_git?()", "desc": "Skips this test unless you have a git executable"}, {"type": "public instance method", "name": "install_default_gems(*specs)", "desc": "Installs the provided default specs including writing the spec file"}, {"type": "public instance method", "name": "install_default_specs(*specs)", "desc": "Install the provided default specs"}, {"type": "public instance method", "name": "install_gem(spec, options = {})", "desc": "Builds and installs the Gem::Specification spec"}, {"type": "public instance method", "name": "install_gem_user(spec)", "desc": "Builds and installs the Gem::Specification spec into the user dir"}, {"type": "public instance method", "name": "install_specs(*specs)", "desc": "Install the provided specs"}, {"type": "public instance method", "name": "java_platform?()", "desc": "Is this test being run on a Java platform?"}, {"type": "public instance method", "name": "loaded_spec_names()", "desc": ""}, {"type": "public instance method", "name": "make_command()", "desc": "Returns the make command for the current platform. For versions of Ruby built on MS Windows with VC++ or Borland it will return 'nmake'. On all other platforms, including Cygwin, it will return 'make'."}, {"type": "public instance method", "name": "mu_pp(obj)", "desc": "Enables pretty-print for all tests"}, {"type": "public instance method", "name": "new_default_spec(name, version, deps = nil, *files)", "desc": ""}, {"type": "public instance method", "name": "nmake_found?()", "desc": "Returns whether or not the nmake command could be found."}, {"type": "public instance method", "name": "parse_make_command_line(line)", "desc": ""}, {"type": "public instance method", "name": "process_based_port()", "desc": "See ::process_based_port"}, {"type": "public instance method", "name": "quick_gem(name, version='2')", "desc": "Creates a Gem::Specification with a minimum of extra work.  name and version are the gem's name and version,  platform, author, email, homepage, summary and description are defaulted.  The specification is yielded for customization."}, {"type": "public instance method", "name": "read_binary(path)", "desc": "Reads a binary file at path"}, {"type": "public instance method", "name": "read_cache(path)", "desc": "Reads a Marshal file at path"}, {"type": "public instance method", "name": "refute_path_exists(path, msg = nil)", "desc": "TODO: move to minitest"}, {"type": "public instance method", "name": "save_loaded_features()", "desc": ""}, {"type": "public instance method", "name": "scan_make_command_lines(output)", "desc": ""}, {"type": "public instance method", "name": "setup()", "desc": "setup prepares a sandboxed location to install gems.  All installs are directed to a temporary directory.  All install plugins are removed."}, {"type": "public instance method", "name": "teardown()", "desc": "teardown restores the process to its original state and removes the tempdir"}, {"type": "public instance method", "name": "uninstall_gem(spec)", "desc": "Uninstalls the Gem::Specification spec"}, {"type": "public instance method", "name": "unresolved_names()", "desc": ""}, {"type": "public instance method", "name": "util_build_gem(spec)", "desc": "Builds a gem from spec and places it in File.join @gemhome, 'cache'.  Automatically creates files based on spec.files"}, {"type": "public instance method", "name": "util_clear_RUBY_VERSION()", "desc": ""}, {"type": "public instance method", "name": "util_clear_gems()", "desc": "Removes all installed gems from +@gemhome+."}, {"type": "public instance method", "name": "util_gem(name, version, deps = nil, &block)", "desc": "Creates a gem with name, version and deps.  The specification will be yielded before gem creation for customization.  The gem will be placed in File.join @tempdir, 'gems'.  The specification and .gem file location are returned."}, {"type": "public instance method", "name": "util_gzip(data)", "desc": "Gzips data."}, {"type": "public instance method", "name": "util_make_gems(prerelease = false)", "desc": "Creates several default gems which all have a lib/code.rb file.  The gems are not installed but are available in the cache dir."}, {"type": "public instance method", "name": "util_remove_gem(spec)", "desc": ""}, {"type": "public instance method", "name": "util_restore_RUBY_VERSION()", "desc": ""}, {"type": "public instance method", "name": "util_set_RUBY_VERSION(version, patchlevel = nil, revision = nil, description = nil, engine = \"ruby\", engine_version = nil)", "desc": ""}, {"type": "public instance method", "name": "util_set_arch(arch)", "desc": "Set the platform to arch"}, {"type": "public instance method", "name": "util_setup_spec_fetcher(*specs)", "desc": "Sets up Gem::SpecFetcher to return information from the gems in specs."}, {"type": "public instance method", "name": "util_spec(name, version = 2, deps = nil, *files)", "desc": "Creates a spec with name, version.  deps can specify the dependency or a block can be given for full customization of the specification."}, {"type": "public instance method", "name": "util_zip(data)", "desc": "Deflates data"}, {"type": "public instance method", "name": "vc_windows?()", "desc": "Returns whether or not we're on a version of Ruby built with VC++ (or Borland) versus Cygwin, Mingw, etc."}, {"type": "public instance method", "name": "vendordir(value)", "desc": "Sets the vendordir entry in RbConfig::CONFIG to value and restores the original value when the block ends"}, {"type": "public instance method", "name": "wait_for_child_process_to_exit()", "desc": "In case we're building docs in a background process, this method waits for that process to exit (or if it's already been reaped, or never happened, swallows the Errno::ECHILD error)."}, {"type": "public instance method", "name": "win_platform?()", "desc": "Is this test being run on a Windows platform?"}, {"type": "public instance method", "name": "write_file(path)", "desc": "Writes a binary file to path which is relative to +@gemhome+"}]}