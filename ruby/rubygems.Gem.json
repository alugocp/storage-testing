{"entries": [{"type": "constant", "name": "DEFAULT_HOST", "desc": ""}, {"type": "constant", "name": "GEM_DEP_FILES", "desc": ""}, {"type": "constant", "name": "LOADED_SPECS_MUTEX", "desc": ""}, {"type": "constant", "name": "MARSHAL_SPEC_DIR", "desc": "Location of Marshal quick gemspecs on remote repositories"}, {"type": "constant", "name": "RDoc", "desc": ""}, {"type": "constant", "name": "READ_BINARY_ERRORS", "desc": "Exception classes used in a ::read_binary rescue\nstatement"}, {"type": "constant", "name": "REPOSITORY_DEFAULT_GEM_SUBDIRECTORIES", "desc": "Subdirectories in a gem repository for default gems"}, {"type": "constant", "name": "REPOSITORY_SUBDIRECTORIES", "desc": "Subdirectories in a gem repository"}, {"type": "constant", "name": "RUBYGEMS_DIR", "desc": ""}, {"type": "constant", "name": "UNTAINT", "desc": "Taint support is deprecated in Ruby 2.7. This allows switching \u201c.untaint\u201d\nto \u201c.tap(&Gem::UNTAINT)\u201d, to avoid deprecation warnings in Ruby 2.7."}, {"type": "constant", "name": "VERSION", "desc": ""}, {"type": "constant", "name": "WIN_PATTERNS", "desc": "An Array of Regexps that match windows Ruby platforms."}, {"type": "constant", "name": "WRITE_BINARY_ERRORS", "desc": "Exception classes used in ::write_binary\nrescue statement"}, {"type": "attribute", "name": "done_installing_hooks", "desc": " The list of hooks to be run after Gem::DependencyInstaller installs a set of gems "}, {"type": "attribute", "name": "gemdeps", "desc": " GemDependencyAPI object, which is set when .use_gemdeps is called. This contains all the information from the Gemfile. "}, {"type": "attribute", "name": "loaded_specs", "desc": " Hash of loaded Gem::Specification keyed by name "}, {"type": "attribute", "name": "post_build_hooks", "desc": " The list of hooks to be run after Gem::Installer#install extracts files and builds extensions "}, {"type": "attribute", "name": "post_install_hooks", "desc": " The list of hooks to be run after Gem::Installer#install completes installation "}, {"type": "attribute", "name": "post_reset_hooks", "desc": " The list of hooks to be run after Gem::Specification.reset is run. "}, {"type": "attribute", "name": "post_uninstall_hooks", "desc": " The list of hooks to be run after Gem::Uninstaller#uninstall completes installation "}, {"type": "attribute", "name": "pre_install_hooks", "desc": " The list of hooks to be run before Gem::Installer#install does any work "}, {"type": "attribute", "name": "pre_reset_hooks", "desc": " The list of hooks to be run before Gem::Specification.reset is run. "}, {"type": "attribute", "name": "pre_uninstall_hooks", "desc": " The list of hooks to be run before Gem::Uninstaller#uninstall does any work "}, {"type": "public class method", "name": "add_to_load_path(*paths)", "desc": "Add a list of paths to the $LOAD_PATH at the proper place."}, {"type": "public class method", "name": "bin_path(name, exec_name = nil, *requirements)", "desc": "Find the full path to the executable for gem name.  If the exec_name is not given, an exception will be raised, otherwise the specified executable's path is returned.  requirements allows you to specify specific gem versions."}, {"type": "public class method", "name": "binary_mode()", "desc": "The mode needed to read a file as straight binary."}, {"type": "public class method", "name": "bindir(install_dir=Gem.dir)", "desc": "The path where gem executables are to be installed."}, {"type": "public class method", "name": "clear_default_specs()", "desc": "Clear default gem related variables. It is for test"}, {"type": "public class method", "name": "clear_paths()", "desc": "Reset the dir and path values.  The next time dir or path is requested, the values will be calculated from scratch.  This is mainly used by the unit tests to provide test isolation."}, {"type": "public class method", "name": "config_file()", "desc": "The path to standard location of the user's .gemrc file."}, {"type": "public class method", "name": "configuration()", "desc": "The standard configuration object for gems."}, {"type": "public class method", "name": "configuration=(config)", "desc": "Use the given configuration object (which implements the ConfigFile protocol) as the standard configuration object."}, {"type": "public class method", "name": "datadir(gem_name)", "desc": "The path to the data directory specified by the gem name.  If the package is not available as a gem, return nil."}, {"type": "public class method", "name": "default_bindir()", "desc": "The default directory for binaries"}, {"type": "public class method", "name": "default_cert_path()", "desc": "The default signing certificate chain path"}, {"type": "public class method", "name": "default_dir()", "desc": "Default home directory path to be used if an alternate value is not specified in the environment"}, {"type": "public class method", "name": "default_exec_format()", "desc": "Deduce Ruby's \u2013program-prefix and \u2013program-suffix from its install name"}, {"type": "public class method", "name": "default_ext_dir_for(base_dir)", "desc": "Returns binary extensions dir for specified RubyGems base dir or nil if such directory cannot be determined."}, {"type": "public class method", "name": "default_key_path()", "desc": "The default signing key path"}, {"type": "public class method", "name": "default_path()", "desc": "Default gem load path"}, {"type": "public class method", "name": "default_rubygems_dirs()", "desc": "Paths where RubyGems' .rb files and bin files are installed"}, {"type": "public class method", "name": "default_sources()", "desc": "An Array of the default sources that come with RubyGems"}, {"type": "public class method", "name": "default_spec_cache_dir()", "desc": "Default spec directory path to be used if an alternate value is not specified in the environment"}, {"type": "public class method", "name": "default_specifications_dir()", "desc": "Path to specification files of default gems."}, {"type": "public class method", "name": "deflate(data)", "desc": "A Zlib::Deflate.deflate wrapper"}, {"type": "public class method", "name": "detect_gemdeps(path = nil)", "desc": "TODO remove with RubyGems 4.0"}, {"type": "public class method", "name": "dir()", "desc": "The path where gems are to be installed."}, {"type": "public class method", "name": "done_installing(&hook)", "desc": "Adds a post-installs hook that will be passed a Gem::DependencyInstaller and a list of installed specifications when Gem::DependencyInstaller#install is complete"}, {"type": "public class method", "name": "ensure_default_gem_subdirectories(dir = Gem.dir, mode = nil)", "desc": "Quietly ensure the Gem directory dir contains all the proper subdirectories for handling default gems.  If we can't create a directory due to a permission problem, then we will silently continue."}, {"type": "public class method", "name": "ensure_gem_subdirectories(dir = Gem.dir, mode = nil)", "desc": "Quietly ensure the Gem directory dir contains all the proper subdirectories.  If we can't create a directory due to a permission problem, then we will silently continue."}, {"type": "public class method", "name": "env_requirement(gem_name)", "desc": ""}, {"type": "public class method", "name": "find_files(glob, check_load_path=true)", "desc": "Returns a list of paths matching glob that can be used by a gem to pick up features from other gems.  For example:"}, {"type": "public class method", "name": "find_latest_files(glob, check_load_path=true)", "desc": "Returns a list of paths matching glob from the latest gems that can be used by a gem to pick up features from other gems.  For example:"}, {"type": "public class method", "name": "find_unresolved_default_spec(path)", "desc": "Find a Gem::Specification of default gem from path"}, {"type": "public class method", "name": "finish_resolve(request_set=Gem::RequestSet.new)", "desc": ""}, {"type": "public class method", "name": "gunzip(data)", "desc": "Zlib::GzipReader wrapper that unzips data."}, {"type": "public class method", "name": "gzip(data)", "desc": "Zlib::GzipWriter wrapper that zips data."}, {"type": "public class method", "name": "host()", "desc": "Get the default RubyGems API host. This is normally https://rubygems.org."}, {"type": "public class method", "name": "host=(host)", "desc": "Set the default RubyGems API host."}, {"type": "public class method", "name": "inflate(data)", "desc": "A Zlib::Inflate#inflate wrapper"}, {"type": "public class method", "name": "install(name, version = Gem::Requirement.default, *options)", "desc": "Top level install helper method. Allows you to install gems interactively:"}, {"type": "public class method", "name": "java_platform?()", "desc": "Is this a java platform?"}, {"type": "public class method", "name": "latest_rubygems_version()", "desc": "Returns the latest release version of RubyGems."}, {"type": "public class method", "name": "latest_spec_for(name)", "desc": "Returns the latest release-version specification for the gem name."}, {"type": "public class method", "name": "latest_version_for(name)", "desc": "Returns the version of the latest release-version of gem name"}, {"type": "public class method", "name": "load_env_plugins()", "desc": "Find all 'rubygems_plugin' files in $LOAD_PATH and load them"}, {"type": "public class method", "name": "load_path_insert_index()", "desc": "The index to insert activated gem paths into the $LOAD_PATH. The activated gem's paths are inserted before site lib directory by default."}, {"type": "public class method", "name": "load_plugins()", "desc": "Find the 'rubygems_plugin' files in the latest installed gems and load them"}, {"type": "public class method", "name": "load_yaml()", "desc": "Loads YAML, preferring Psych"}, {"type": "public class method", "name": "location_of_caller(depth = 1)", "desc": "The file name and line number of the caller of the caller of this method."}, {"type": "public class method", "name": "marshal_version()", "desc": "The version of the Marshal format for your Ruby."}, {"type": "public class method", "name": "needs()", "desc": ""}, {"type": "public class method", "name": "operating_system_defaults()", "desc": "Default options for gem commands for Ruby packagers."}, {"type": "public class method", "name": "path()", "desc": ""}, {"type": "public class method", "name": "path_separator()", "desc": "How String Gem paths should be split.  Overridable for esoteric platforms."}, {"type": "public class method", "name": "paths()", "desc": "Retrieve the PathSupport object that RubyGems uses to lookup files."}, {"type": "public class method", "name": "paths=(env)", "desc": "Initialize the filesystem paths to use from env. env is a hash-like object (typically ENV) that is queried for 'GEM_HOME', 'GEM_PATH', and 'GEM_SPEC_CACHE' Keys for the env hash should be Strings, and values of the hash should be Strings or nil."}, {"type": "public class method", "name": "platform_defaults()", "desc": "Default options for gem commands for Ruby implementers."}, {"type": "public class method", "name": "platforms()", "desc": "Array of platforms this RubyGems supports."}, {"type": "public class method", "name": "platforms=(platforms)", "desc": "Set array of platforms this RubyGems supports (primarily for testing)."}, {"type": "public class method", "name": "post_build(&hook)", "desc": "Adds a post-build hook that will be passed an Gem::Installer instance when Gem::Installer#install is called.  The hook is called after the gem has been extracted and extensions have been built but before the executables or gemspec has been written.  If the hook returns false then the gem's files will be removed and the install will be aborted."}, {"type": "public class method", "name": "post_install(&hook)", "desc": "Adds a post-install hook that will be passed an Gem::Installer instance when Gem::Installer#install is called"}, {"type": "public class method", "name": "post_reset(&hook)", "desc": "Adds a hook that will get run after Gem::Specification.reset is run."}, {"type": "public class method", "name": "post_uninstall(&hook)", "desc": "Adds a post-uninstall hook that will be passed a Gem::Uninstaller instance and the spec that was uninstalled when Gem::Uninstaller#uninstall is called"}, {"type": "public class method", "name": "pre_install(&hook)", "desc": "Adds a pre-install hook that will be passed an Gem::Installer instance when Gem::Installer#install is called.  If the hook returns false then the install will be aborted."}, {"type": "public class method", "name": "pre_reset(&hook)", "desc": "Adds a hook that will get run before Gem::Specification.reset is run."}, {"type": "public class method", "name": "pre_uninstall(&hook)", "desc": "Adds a pre-uninstall hook that will be passed an Gem::Uninstaller instance and the spec that will be uninstalled when Gem::Uninstaller#uninstall is called"}, {"type": "public class method", "name": "prefix()", "desc": "The directory prefix this RubyGems was installed at. If your prefix is in a standard location (ie, rubygems is installed where you'd expect it to be), then prefix returns nil."}, {"type": "public class method", "name": "read_binary(path)", "desc": "Safely read a file in binary mode on all platforms."}, {"type": "public class method", "name": "refresh()", "desc": "Refresh available gems from disk."}, {"type": "public class method", "name": "register_default_spec(spec)", "desc": "Register a Gem::Specification for default gem."}, {"type": "public class method", "name": "ruby()", "desc": "The path to the running Ruby interpreter."}, {"type": "public class method", "name": "ruby=(ruby)", "desc": "Allows setting path to Ruby.  This method is available when requiring 'rubygems/test_case'"}, {"type": "public class method", "name": "ruby_api_version()", "desc": "Returns a String containing the API compatibility version of Ruby"}, {"type": "public class method", "name": "ruby_engine()", "desc": ""}, {"type": "public class method", "name": "ruby_version()", "desc": "A Gem::Version for the currently running Ruby."}, {"type": "public class method", "name": "rubygems_version()", "desc": "A Gem::Version for the currently running RubyGems"}, {"type": "public class method", "name": "searcher=(searcher)", "desc": "Allows setting the gem path searcher.  This method is available when requiring 'rubygems/test_case'"}, {"type": "public class method", "name": "source_date_epoch()", "desc": "The SOURCE_DATE_EPOCH environment variable (or, if that's not set, the current time), converted to Time object. This is used throughout RubyGems for enabling reproducible builds."}, {"type": "public class method", "name": "sources()", "desc": "Returns an Array of sources to fetch remote gems from. Uses ::default_sources if the sources list is empty."}, {"type": "public class method", "name": "sources=(new_sources)", "desc": "Need to be able to set the sources without calling ::sources.replace since that would cause an infinite loop."}, {"type": "public class method", "name": "spec_cache_dir()", "desc": ""}, {"type": "public class method", "name": "suffix_pattern()", "desc": "Glob pattern for require-able path suffixes."}, {"type": "public class method", "name": "suffix_regexp()", "desc": ""}, {"type": "public class method", "name": "suffixes()", "desc": "Suffixes for require-able paths."}, {"type": "public class method", "name": "time(msg, width = 0, display = Gem.configuration.verbose)", "desc": "Prints the amount of time the supplied block takes to run using the debug UI output."}, {"type": "public class method", "name": "try_activate(path)", "desc": "Try to activate a gem containing path. Returns true if activation succeeded or wasn't needed because it was already activated. Returns false if it can't find the path in a gem."}, {"type": "public class method", "name": "ui()", "desc": "Lazily loads DefaultUserInteraction and returns the default UI."}, {"type": "public class method", "name": "use_gemdeps(path = nil)", "desc": "Looks for a gem dependency file at path and activates the gems in the file if found.  If the file is not found an ArgumentError is raised."}, {"type": "public class method", "name": "use_paths(home, *paths)", "desc": "Use the home and paths values for ::dir and ::path.  Used mainly by the unit tests to provide environment isolation."}, {"type": "public class method", "name": "user_dir()", "desc": "Path for gems in the user's home directory"}, {"type": "public class method", "name": "user_home()", "desc": "The home directory for the user."}, {"type": "public class method", "name": "win_platform=(val)", "desc": "Allows toggling Windows behavior.  This method is available when requiring 'rubygems/test_case'"}, {"type": "public class method", "name": "win_platform?()", "desc": "Is this a windows platform?"}, {"type": "public class method", "name": "write_binary(path, data)", "desc": "Safely write a file in binary mode on all platforms."}]}