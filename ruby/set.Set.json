{"entries": [{"type": "public class method", "name": "[](*ary)", "desc": "Creates a new set containing the given objects."}, {"type": "public class method", "name": "new(enum = nil)", "desc": "Creates a new set containing the elements of the given enumerable object."}, {"type": "public instance method", "name": "&(enum)", "desc": "Returns a new set containing elements common to the set and the given enumerable object."}, {"type": "public instance method", "name": "+(enum)", "desc": ""}, {"type": "public instance method", "name": "-(enum)", "desc": "Returns a new set built by duplicating the set, removing every element that appears in the given enumerable object."}, {"type": "public instance method", "name": "<(set)", "desc": ""}, {"type": "public instance method", "name": "<<(o)", "desc": ""}, {"type": "public instance method", "name": "<=(set)", "desc": ""}, {"type": "public instance method", "name": "==(other)", "desc": "Returns true if two sets are equal.  The equality of each couple of elements is defined according to Object#eql?."}, {"type": "public instance method", "name": "===(o)", "desc": "Returns true if the given object is a member of the set, and false otherwise."}, {"type": "public instance method", "name": ">(set)", "desc": ""}, {"type": "public instance method", "name": ">=(set)", "desc": ""}, {"type": "public instance method", "name": "^(enum)", "desc": "Returns a new set containing elements exclusive between the set and the given enumerable object.  (set ^ enum) is equivalent to ((set | enum) - (set & enum))."}, {"type": "public instance method", "name": "add(o)", "desc": "Adds the given object to the set and returns self.  Use merge to add many elements at once."}, {"type": "public instance method", "name": "add?(o)", "desc": "Adds the given object to the set and returns self.  If the object is already in the set, returns nil."}, {"type": "public instance method", "name": "classify()", "desc": "Classifies the set by the return value of the given block and returns a hash of {value => set of elements} pairs.  The block is called once for each element of the set, passing the element as parameter."}, {"type": "public instance method", "name": "clear()", "desc": "Removes all elements and returns self."}, {"type": "public instance method", "name": "collect!()", "desc": "Replaces the elements with ones returned by collect(). Returns an enumerator if no block is given."}, {"type": "public instance method", "name": "compare_by_identity()", "desc": "Makes the set compare its elements by their identity and returns self.  This method may not be supported by all subclasses of Set."}, {"type": "public instance method", "name": "compare_by_identity?()", "desc": "Returns true if the set will compare its elements by their identity.  Also see #compare_by_identity."}, {"type": "public instance method", "name": "delete(o)", "desc": "Deletes the given object from the set and returns self.  Use subtract to delete many items at once."}, {"type": "public instance method", "name": "delete?(o)", "desc": "Deletes the given object from the set and returns self.  If the object is not in the set, returns nil."}, {"type": "public instance method", "name": "delete_if()", "desc": "Deletes every element of the set for which block evaluates to true, and returns self. Returns an enumerator if no block is given."}, {"type": "public instance method", "name": "difference(enum)", "desc": ""}, {"type": "public instance method", "name": "disjoint?(set)", "desc": "Returns true if the set and the given set have no element in common.  This method is the opposite of intersect?."}, {"type": "public instance method", "name": "divide(&func)", "desc": "Divides the set into a set of subsets according to the commonality defined by the given block."}, {"type": "public instance method", "name": "each(&block)", "desc": "Calls the given block once for each element in the set, passing the element as parameter.  Returns an enumerator if no block is given."}, {"type": "public instance method", "name": "empty?()", "desc": "Returns true if the set contains no elements."}, {"type": "public instance method", "name": "filter!(&block)", "desc": "Equivalent to #select!"}, {"type": "public instance method", "name": "flatten()", "desc": "Returns a new set that is a copy of the set, flattening each containing set recursively."}, {"type": "public instance method", "name": "flatten!()", "desc": "Equivalent to #flatten, but replaces the receiver with the result in place.  Returns nil if no modifications were made."}, {"type": "public instance method", "name": "include?(o)", "desc": "Returns true if the set contains the given object."}, {"type": "public instance method", "name": "initialize_clone(orig)", "desc": "Clone internal hash."}, {"type": "public instance method", "name": "initialize_dup(orig)", "desc": "Dup internal hash."}, {"type": "public instance method", "name": "inspect()", "desc": "Returns a string containing a human-readable representation of the set (\u201c#<Set: {element1, element2, \u2026}>\u201d)."}, {"type": "public instance method", "name": "intersect?(set)", "desc": "Returns true if the set and the given set have at least one element in common."}, {"type": "public instance method", "name": "intersection(enum)", "desc": ""}, {"type": "public instance method", "name": "keep_if()", "desc": "Deletes every element of the set for which block evaluates to false, and returns self. Returns an enumerator if no block is given."}, {"type": "public instance method", "name": "length()", "desc": ""}, {"type": "public instance method", "name": "map!()", "desc": ""}, {"type": "public instance method", "name": "member?(o)", "desc": ""}, {"type": "public instance method", "name": "merge(enum)", "desc": "Merges the elements of the given enumerable object to the set and returns self."}, {"type": "public instance method", "name": "proper_subset?(set)", "desc": "Returns true if the set is a proper subset of the given set."}, {"type": "public instance method", "name": "proper_superset?(set)", "desc": "Returns true if the set is a proper superset of the given set."}, {"type": "public instance method", "name": "reject!(&block)", "desc": "Equivalent to #delete_if, but returns nil if no changes were made. Returns an enumerator if no block is given."}, {"type": "public instance method", "name": "replace(enum)", "desc": "Replaces the contents of the set with the contents of the given enumerable object and returns self."}, {"type": "public instance method", "name": "reset()", "desc": "Resets the internal state after modification to existing elements and returns self."}, {"type": "public instance method", "name": "select!(&block)", "desc": "Equivalent to #keep_if, but returns nil if no changes were made. Returns an enumerator if no block is given."}, {"type": "public instance method", "name": "size()", "desc": "Returns the number of elements."}, {"type": "public instance method", "name": "subset?(set)", "desc": "Returns true if the set is a subset of the given set."}, {"type": "public instance method", "name": "subtract(enum)", "desc": "Deletes every element that appears in the given enumerable object and returns self."}, {"type": "public instance method", "name": "superset?(set)", "desc": "Returns true if the set is a superset of the given set."}, {"type": "public instance method", "name": "to_a()", "desc": "Converts the set to an array.  The order of elements is uncertain."}, {"type": "public instance method", "name": "to_s()", "desc": ""}, {"type": "public instance method", "name": "to_set(klass = Set, *args, &block)", "desc": "Returns self if no arguments are given.  Otherwise, converts the set to another with klass.new(self, *args, &block)."}, {"type": "public instance method", "name": "union(enum)", "desc": ""}, {"type": "public instance method", "name": "|(enum)", "desc": "Returns a new set built by merging the set and the elements of the given enumerable object."}, {"type": "alias", "name": "+(enum)", "desc": "             Alias for: | "}, {"type": "alias", "name": "<(set)", "desc": "             Alias for: proper_subset? "}, {"type": "alias", "name": "<<(o)", "desc": "             Alias for: add "}, {"type": "alias", "name": "<=(set)", "desc": "             Alias for: subset? "}, {"type": "alias", "name": "===(o)", "desc": "             Alias for: include? "}, {"type": "alias", "name": ">(set)", "desc": "             Alias for: proper_superset? "}, {"type": "alias", "name": ">=(set)", "desc": "             Alias for: superset? "}, {"type": "alias", "name": "difference(enum)", "desc": "             Alias for: - "}, {"type": "alias", "name": "filter!(&block)", "desc": "             Alias for: select! "}, {"type": "alias", "name": "intersection(enum)", "desc": "             Alias for: & "}, {"type": "alias", "name": "length()", "desc": "             Alias for: size "}, {"type": "alias", "name": "map!()", "desc": "             Alias for: collect! "}, {"type": "alias", "name": "member?(o)", "desc": "             Alias for: include? "}, {"type": "alias", "name": "to_s()", "desc": "             Alias for: inspect "}, {"type": "alias", "name": "union(enum)", "desc": "             Alias for: | "}]}