{"entries": [{"type": "public class method", "name": "foreach(nodename, service, family=nil, socktype=nil, protocol=nil, flags=nil, timeout: nil, &block)", "desc": "iterates over the list of Addrinfo objects obtained by ::getaddrinfo."}, {"type": "public class method", "name": "getaddrinfo(nodename, service, family, socktype, protocol, flags) => [addrinfo, ...]click to toggle source", "desc": ""}, {"type": "public class method", "name": "ip(host) => addrinfoclick to toggle source", "desc": "returns an addrinfo object for IP address."}, {"type": "public class method", "name": "new(sockaddr)                             => addrinfoclick to toggle source", "desc": ""}, {"type": "public class method", "name": "tcp(host, port) => addrinfoclick to toggle source", "desc": "returns an addrinfo object for TCP address."}, {"type": "public class method", "name": "udp(host, port) => addrinfoclick to toggle source", "desc": "returns an addrinfo object for UDP address."}, {"type": "public class method", "name": "unix(path [, socktype]) => addrinfoclick to toggle source", "desc": "returns an addrinfo object for UNIX socket address."}, {"type": "public instance method", "name": "afamily => integerclick to toggle source", "desc": "returns the address family as an integer."}, {"type": "public instance method", "name": "bind()", "desc": "creates a socket bound to self."}, {"type": "public instance method", "name": "canonname => string or nilclick to toggle source", "desc": "returns the canonical name as an string."}, {"type": "public instance method", "name": "connect([opts]) {|socket| ... }click to toggle source", "desc": ""}, {"type": "public instance method", "name": "connect_from([local_addr_args], [opts]) {|socket| ... }click to toggle source", "desc": ""}, {"type": "public instance method", "name": "connect_to([remote_addr_args], [opts]) {|socket| ... }click to toggle source", "desc": ""}, {"type": "public instance method", "name": "family_addrinfo(*args)", "desc": "creates an Addrinfo object from the arguments."}, {"type": "public instance method", "name": "getnameinfo        => [nodename, service]click to toggle source", "desc": ""}, {"type": "public instance method", "name": "inspect => stringclick to toggle source", "desc": "returns a string which shows addrinfo in human-readable form."}, {"type": "public instance method", "name": "inspect_sockaddr => stringclick to toggle source", "desc": "returns a string which shows the sockaddr in addrinfo with human-readable form."}, {"type": "public instance method", "name": "ip? => true or falseclick to toggle source", "desc": "returns true if addrinfo is internet (IPv4/IPv6) address. returns false otherwise."}, {"type": "public instance method", "name": "ip_address => stringclick to toggle source", "desc": "Returns the IP address as a string."}, {"type": "public instance method", "name": "ip_port => portclick to toggle source", "desc": "Returns the port number as an integer."}, {"type": "public instance method", "name": "ip_unpack => [addr, port]click to toggle source", "desc": "Returns the IP address and port number as 2-element array."}, {"type": "public instance method", "name": "ipv4? => true or falseclick to toggle source", "desc": "returns true if addrinfo is IPv4 address. returns false otherwise."}, {"type": "public instance method", "name": "ipv4_loopback?()", "desc": "Returns true for IPv4 loopback address (127.0.0.0/8). It returns false otherwise."}, {"type": "public instance method", "name": "ipv4_multicast?()", "desc": "Returns true for IPv4 multicast address (224.0.0.0/4). It returns false otherwise."}, {"type": "public instance method", "name": "ipv4_private?()", "desc": "Returns true for IPv4 private address (10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16). It returns false otherwise."}, {"type": "public instance method", "name": "ipv6? => true or falseclick to toggle source", "desc": "returns true if addrinfo is IPv6 address. returns false otherwise."}, {"type": "public instance method", "name": "ipv6_linklocal?()", "desc": "Returns true for IPv6 link local address (ff80::/10). It returns false otherwise."}, {"type": "public instance method", "name": "ipv6_loopback?()", "desc": "Returns true for IPv6 loopback address (::1). It returns false otherwise."}, {"type": "public instance method", "name": "ipv6_mc_global?()", "desc": "Returns true for IPv6 multicast global scope address. It returns false otherwise."}, {"type": "public instance method", "name": "ipv6_mc_linklocal?()", "desc": "Returns true for IPv6 multicast link-local scope address. It returns false otherwise."}, {"type": "public instance method", "name": "ipv6_mc_nodelocal?()", "desc": "Returns true for IPv6 multicast node-local scope address. It returns false otherwise."}, {"type": "public instance method", "name": "ipv6_mc_orglocal?()", "desc": "Returns true for IPv6 multicast organization-local scope address. It returns false otherwise."}, {"type": "public instance method", "name": "ipv6_mc_sitelocal?()", "desc": "Returns true for IPv6 multicast site-local scope address. It returns false otherwise."}, {"type": "public instance method", "name": "ipv6_multicast?()", "desc": "Returns true for IPv6 multicast address (ff00::/8). It returns false otherwise."}, {"type": "public instance method", "name": "ipv6_sitelocal?()", "desc": "Returns true for IPv6 site local address (ffc0::/10). It returns false otherwise."}, {"type": "public instance method", "name": "ipv6_to_ipv4()", "desc": "Returns IPv4 address of IPv4 mapped/compatible IPv6 address. It returns nil if self is not IPv4 mapped/compatible IPv6 address."}, {"type": "public instance method", "name": "ipv6_unique_local?()", "desc": "Returns true for IPv6 unique local address (fc00::/7, RFC4193). It returns false otherwise."}, {"type": "public instance method", "name": "ipv6_unspecified?()", "desc": "Returns true for IPv6 unspecified address (::). It returns false otherwise."}, {"type": "public instance method", "name": "ipv6_v4compat?()", "desc": "Returns true for IPv4-compatible IPv6 address (::/80). It returns false otherwise."}, {"type": "public instance method", "name": "ipv6_v4mapped?()", "desc": "Returns true for IPv4-mapped IPv6 address (::ffff:0:0/80). It returns false otherwise."}, {"type": "public instance method", "name": "listen(backlog=Socket::SOMAXCONN)", "desc": "creates a listening socket bound to self."}, {"type": "public instance method", "name": "pfamily => integerclick to toggle source", "desc": "returns the protocol family as an integer."}, {"type": "public instance method", "name": "protocol => integerclick to toggle source", "desc": "returns the socket type as an integer."}, {"type": "public instance method", "name": "socktype => integerclick to toggle source", "desc": "returns the socket type as an integer."}, {"type": "public instance method", "name": "to_sockaddr => stringclick to toggle source", "desc": ""}, {"type": "public instance method", "name": "to_sockaddr => stringclick to toggle source", "desc": "returns the socket address as packed struct sockaddr string."}, {"type": "public instance method", "name": "unix? => true or falseclick to toggle source", "desc": "returns true if addrinfo is UNIX address. returns false otherwise."}, {"type": "public instance method", "name": "unix_path => pathclick to toggle source", "desc": "Returns the socket path as a string."}]}