{"entries": [{"type": "public class method", "name": "accept_loop(*sockets)", "desc": "yield socket and client address for each a connection accepted via given sockets."}, {"type": "public class method", "name": "getaddrinfo(nodename, servname[, family[, socktype[, protocol[, flags[, reverse_lookup]]]]]) => arrayclick to toggle source", "desc": "Obtains address information for nodename:servname."}, {"type": "public class method", "name": "gethostbyaddr(address_string [, address_family]) => hostentclick to toggle source", "desc": "Use Addrinfo#getnameinfo instead. This method is deprecated for the following reasons:"}, {"type": "public class method", "name": "gethostbyname(hostname) => [official_hostname, alias_hostnames, address_family, *address_list]click to toggle source", "desc": "Use Addrinfo.getaddrinfo instead. This method is deprecated for the following reasons:"}, {"type": "public class method", "name": "gethostname => hostnameclick to toggle source", "desc": "Returns the hostname."}, {"type": "public class method", "name": "getifaddrs => [ifaddr1, ...]click to toggle source", "desc": "Returns an array of interface addresses. An element of the array is an instance of Socket::Ifaddr."}, {"type": "public class method", "name": "getnameinfo(sockaddr [, flags]) => [hostname, servicename]click to toggle source", "desc": "Obtains name information for sockaddr."}, {"type": "public class method", "name": "getservbyname(service_name)                => port_numberclick to toggle source", "desc": ""}, {"type": "public class method", "name": "getservbyport(port [, protocol_name]) => serviceclick to toggle source", "desc": "Obtains the port number for port."}, {"type": "public class method", "name": "ip_address_list => arrayclick to toggle source", "desc": "Returns local IP addresses as an array."}, {"type": "public class method", "name": "new(domain, socktype [, protocol]) => socketclick to toggle source", "desc": "Creates a new socket object."}, {"type": "public class method", "name": "pack_sockaddr_in(port, host) => sockaddrclick to toggle source", "desc": "Packs port and host as an AF_INET/AF_INET6 sockaddr string."}, {"type": "public class method", "name": "pack_sockaddr_un(path) => sockaddrclick to toggle source", "desc": "Packs path as an AF_UNIX sockaddr string."}, {"type": "public class method", "name": "pair(domain, type, protocol)       => [socket1, socket2]click to toggle source", "desc": "Creates a pair of sockets connected each other."}, {"type": "public class method", "name": "sockaddr_in(port, host)      => sockaddrclick to toggle source", "desc": "Packs port and host as an AF_INET/AF_INET6 sockaddr string."}, {"type": "public class method", "name": "sockaddr_un(path)      => sockaddrclick to toggle source", "desc": "Packs path as an AF_UNIX sockaddr string."}, {"type": "public class method", "name": "socketpair(domain, type, protocol) => [socket1, socket2]click to toggle source", "desc": "Creates a pair of sockets connected each other."}, {"type": "public class method", "name": "tcp(host, port, local_host=nil, local_port=nil, [opts]) {|socket| ... }click to toggle source", "desc": ""}, {"type": "public class method", "name": "tcp_server_loop(host=nil, port)", "desc": "creates a TCP/IP server on port and calls the block for each connection accepted. The block is called with a socket and a client_address as an Addrinfo object."}, {"type": "public class method", "name": "tcp_server_sockets(host=nil, port)", "desc": "creates TCP/IP server sockets for host and port. host is optional."}, {"type": "public class method", "name": "udp_server_loop(port) {|msg, msg_src| ... }click to toggle source", "desc": ""}, {"type": "public class method", "name": "udp_server_loop_on(sockets) {|msg, msg_src| ... }click to toggle source", "desc": "Run UDP/IP server loop on the given sockets."}, {"type": "public class method", "name": "udp_server_recv(sockets) {|msg, msg_src| ... }click to toggle source", "desc": "Receive UDP/IP packets from the given sockets. For each packet received, the block is called."}, {"type": "public class method", "name": "udp_server_sockets([host, ] port)click to toggle source", "desc": "Creates UDP/IP sockets for a UDP server."}, {"type": "public class method", "name": "unix(path)", "desc": "creates a new socket connected to path using UNIX socket socket."}, {"type": "public class method", "name": "unix_server_loop(path)", "desc": "creates a UNIX socket server on path. It calls the block for each socket accepted."}, {"type": "public class method", "name": "unix_server_socket(path)", "desc": "creates a UNIX server socket on path"}, {"type": "public class method", "name": "unpack_sockaddr_in(sockaddr) => [port, ip_address]click to toggle source", "desc": "Unpacks sockaddr into port and ip_address."}, {"type": "public class method", "name": "unpack_sockaddr_un(sockaddr) => pathclick to toggle source", "desc": "Unpacks sockaddr into path."}, {"type": "public instance method", "name": "accept => [client_socket, client_addrinfo]click to toggle source", "desc": "Accepts a next connection. Returns a new Socket object and Addrinfo object."}, {"type": "public instance method", "name": "accept_nonblock([options]) => [client_socket, client_addrinfo]click to toggle source", "desc": "Accepts an incoming connection using accept(2) after O_NONBLOCK is set for the underlying file descriptor. It returns an array containing the accepted socket for the incoming connection, client_socket, and an Addrinfo, client_addrinfo."}, {"type": "public instance method", "name": "bind(local_sockaddr) => 0click to toggle source", "desc": "Binds to the given local address."}, {"type": "public instance method", "name": "connect(remote_sockaddr) => 0click to toggle source", "desc": "Requests a connection to be made on the given remote_sockaddr. Returns 0 if successful, otherwise an exception is raised."}, {"type": "public instance method", "name": "connect_nonblock(remote_sockaddr, [options]) => 0click to toggle source", "desc": "Requests a connection to be made on the given remote_sockaddr after O_NONBLOCK is set for the underlying file descriptor. Returns 0 if successful, otherwise an exception is raised."}, {"type": "public instance method", "name": "ipv6only!()", "desc": "enable the socket option IPV6_V6ONLY if IPV6_V6ONLY is available."}, {"type": "public instance method", "name": "listen( int ) => 0click to toggle source", "desc": "Listens for connections, using the specified int as the backlog. A call to listen only applies if the socket is of type SOCK_STREAM or SOCK_SEQPACKET."}, {"type": "public instance method", "name": "recvfrom(maxlen) => [mesg, sender_addrinfo]click to toggle source", "desc": ""}, {"type": "public instance method", "name": "recvfrom_nonblock(maxlen[, flags[, outbuf[, opts]]]) => [mesg, sender_addrinfo]click to toggle source", "desc": "Receives up to maxlen bytes from socket using recvfrom(2) after O_NONBLOCK is set for the underlying file descriptor. flags is zero or more of the MSG_ options. The first element of the results, mesg, is the data received. The second element, sender_addrinfo, contains protocol-specific address information of the sender."}, {"type": "public instance method", "name": "sysaccept => [client_socket_fd, client_addrinfo]click to toggle source", "desc": "Accepts an incoming connection returning an array containing the (integer) file descriptor for the incoming connection, client_socket_fd, and an Addrinfo, client_addrinfo."}]}