{"entries": [{"type": "constant", "name": "COMPONENT", "desc": "An Array of the available components for URI::Generic."}, {"type": "constant", "name": "DEFAULT_PORT", "desc": "A Default port of nil for URI::Generic."}, {"type": "attribute", "name": "fragment", "desc": " Returns the fragment component of the URI. URI(\"http://foo/bar/baz?search=FooBar#ponies\").fragment #=> \"ponies\"  "}, {"type": "attribute", "name": "host", "desc": " Returns the host component of the URI. URI(\"http://foo/bar/baz\").host #=> \"foo\"  It returns nil if no host component exists. URI(\"mailto:foo@example.org\").host #=> nil  The component does not contain the port number. URI(\"http://foo:8080/bar/baz\").host #=> \"foo\"  Since IPv6 addresses are wrapped with brackets in URIs, this method returns IPv6 addresses wrapped with brackets. This form is not appropriate to pass to socket methods such as TCPSocket.open. If unwrapped host names are required, use the hostname method. URI(\"http://[::1]/bar/baz\").host     #=> \"[::1]\" URI(\"http://[::1]/bar/baz\").hostname #=> \"::1\"  "}, {"type": "attribute", "name": "opaque", "desc": " Returns the opaque part of the URI. URI(\"mailto:foo@example.org\").opaque #=> \"foo@example.org\" URI(\"http://foo/bar/baz\").opaque     #=> nil  The portion of the path that does not make use of the slash '/'. The path typically refers to an absolute path or an opaque part. (See RFC2396 Section 3 and 5.2.) "}, {"type": "attribute", "name": "path", "desc": " Returns the path component of the URI. URI(\"http://foo/bar/baz\").path #=> \"/bar/baz\"  "}, {"type": "attribute", "name": "port", "desc": " Returns the port component of the URI. URI(\"http://foo/bar/baz\").port      #=> 80 URI(\"http://foo:8080/bar/baz\").port #=> 8080  "}, {"type": "attribute", "name": "query", "desc": " Returns the query component of the URI. URI(\"http://foo/bar/baz?search=FooBar\").query #=> \"search=FooBar\"  "}, {"type": "attribute", "name": "scheme", "desc": " Returns the scheme component of the URI. URI(\"http://foo/bar/baz\").scheme #=> \"http\"  "}, {"type": "public class method", "name": "build(args)", "desc": "See ::new."}, {"type": "public class method", "name": "build2(args)", "desc": "See ::new."}, {"type": "public class method", "name": "component()", "desc": "Components of the URI in the order."}, {"type": "public class method", "name": "default_port()", "desc": "Returns default port."}, {"type": "public class method", "name": "new(scheme, userinfo, host, port, registry, path, opaque, query, fragment, parser = DEFAULT_PARSER, arg_check = false)", "desc": "Protocol scheme, i.e. 'http','ftp','mailto' and so on."}, {"type": "public instance method", "name": "+(oth)", "desc": ""}, {"type": "public instance method", "name": "-(oth)", "desc": ""}, {"type": "public instance method", "name": "==(oth)", "desc": "Compares two URIs."}, {"type": "public instance method", "name": "absolute()", "desc": ""}, {"type": "public instance method", "name": "absolute?()", "desc": "Returns true if URI has a scheme (e.g. http:// or https://) specified."}, {"type": "public instance method", "name": "coerce(oth)", "desc": "URI or String"}, {"type": "public instance method", "name": "component()", "desc": "Components of the URI in the order."}, {"type": "public instance method", "name": "default_port()", "desc": "Returns default port."}, {"type": "public instance method", "name": "eql?(oth)", "desc": ""}, {"type": "public instance method", "name": "find_proxy(env=ENV)", "desc": "Returns a proxy URI. The proxy URI is obtained from environment variables such as http_proxy, ftp_proxy, no_proxy, etc. If there is no proper proxy, nil is returned."}, {"type": "public instance method", "name": "fragment=(v)", "desc": "Checks the fragment v component against the URI::Parser Regexp for :FRAGMENT."}, {"type": "public instance method", "name": "hash()", "desc": ""}, {"type": "public instance method", "name": "hierarchical?()", "desc": "Returns true if URI is hierarchical."}, {"type": "public instance method", "name": "host=(v)", "desc": "String"}, {"type": "public instance method", "name": "hostname()", "desc": "Extract the host part of the URI and unwrap brackets for IPv6 addresses."}, {"type": "public instance method", "name": "hostname=(v)", "desc": "Sets the host part of the URI as the argument with brackets for IPv6 addresses."}, {"type": "public instance method", "name": "inspect()", "desc": ""}, {"type": "public instance method", "name": "merge(oth)", "desc": "URI or String"}, {"type": "public instance method", "name": "merge!(oth)", "desc": "URI or String"}, {"type": "public instance method", "name": "normalize()", "desc": "Returns normalized URI."}, {"type": "public instance method", "name": "normalize!()", "desc": "Destructive version of normalize."}, {"type": "public instance method", "name": "opaque=(v)", "desc": "String"}, {"type": "public instance method", "name": "parser()", "desc": "Returns the parser to be used."}, {"type": "public instance method", "name": "password()", "desc": "Returns the password component."}, {"type": "public instance method", "name": "password=(password)", "desc": "String"}, {"type": "public instance method", "name": "path=(v)", "desc": "String"}, {"type": "public instance method", "name": "port=(v)", "desc": "String"}, {"type": "public instance method", "name": "query=(v)", "desc": "String"}, {"type": "public instance method", "name": "registry=(v)", "desc": ""}, {"type": "public instance method", "name": "relative?()", "desc": "Returns true if URI does not have a scheme (e.g. http:// or https://) specified."}, {"type": "public instance method", "name": "route_from(oth)", "desc": "URI or String"}, {"type": "public instance method", "name": "route_to(oth)", "desc": "URI or String"}, {"type": "public instance method", "name": "scheme=(v)", "desc": "String"}, {"type": "public instance method", "name": "select(*components)", "desc": "Multiple Symbol arguments defined in URI::HTTP."}, {"type": "public instance method", "name": "to_s()", "desc": "Constructs String from URI."}, {"type": "public instance method", "name": "user()", "desc": "Returns the user component."}, {"type": "public instance method", "name": "user=(user)", "desc": "String"}, {"type": "public instance method", "name": "userinfo()", "desc": "Returns the userinfo, either as 'user' or 'user:password'."}, {"type": "public instance method", "name": "userinfo=(userinfo)", "desc": "Sets userinfo, argument is string like 'name:pass'."}, {"type": "alias", "name": "+(oth)", "desc": "             Alias for: merge "}, {"type": "alias", "name": "-(oth)", "desc": "             Alias for: route_from "}, {"type": "alias", "name": "absolute()", "desc": "             Alias for: absolute? "}]}