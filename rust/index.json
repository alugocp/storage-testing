{"entries": [{"type": "Re-export", "name": "pub use core::arch;"}, {"desc": "A fixed-size array, denoted [T; N], for the element type, T, and the non-negative compile-time constant size, N.", "type": "Primitive Type", "name": "array"}, {"desc": "The boolean type.", "type": "Primitive Type", "name": "bool"}, {"desc": "A character type.", "type": "Primitive Type", "name": "char"}, {"desc": "The 32-bit floating point type.", "type": "Primitive Type", "name": "f32"}, {"desc": "The 64-bit floating point type.", "type": "Primitive Type", "name": "f64"}, {"desc": "Function pointers, like fn(usize) -> bool.", "type": "Primitive Type", "name": "fn"}, {"desc": "The 8-bit signed integer type.", "type": "Primitive Type", "name": "i8"}, {"desc": "The 16-bit signed integer type.", "type": "Primitive Type", "name": "i16"}, {"desc": "The 32-bit signed integer type.", "type": "Primitive Type", "name": "i32"}, {"desc": "The 64-bit signed integer type.", "type": "Primitive Type", "name": "i64"}, {"desc": "The 128-bit signed integer type.", "type": "Primitive Type", "name": "i128"}, {"desc": "The pointer-sized signed integer type.", "type": "Primitive Type", "name": "isize"}, {"desc": "Raw, unsafe pointers, *const T, and *mut T.", "type": "Primitive Type", "name": "pointer"}, {"desc": "References, both shared and mutable.", "type": "Primitive Type", "name": "reference"}, {"desc": "A dynamically-sized view into a contiguous sequence, [T]. Contiguous here means that elements are laid out so that every element is the same distance from its neighbors.", "type": "Primitive Type", "name": "slice"}, {"desc": "String slices.", "type": "Primitive Type", "name": "str"}, {"desc": "A finite heterogeneous sequence, (T, U, ..).", "type": "Primitive Type", "name": "tuple"}, {"desc": "The 8-bit unsigned integer type.", "type": "Primitive Type", "name": "u8"}, {"desc": "The 16-bit unsigned integer type.", "type": "Primitive Type", "name": "u16"}, {"desc": "The 32-bit unsigned integer type.", "type": "Primitive Type", "name": "u32"}, {"desc": "The 64-bit unsigned integer type.", "type": "Primitive Type", "name": "u64"}, {"desc": "The 128-bit unsigned integer type.", "type": "Primitive Type", "name": "u128"}, {"desc": "The () type, sometimes called \"unit\" or \"nil\".", "type": "Primitive Type", "name": "unit"}, {"desc": "The pointer-sized unsigned integer type.", "type": "Primitive Type", "name": "usize"}, {"desc": "ExperimentalThe ! type, also called \"never\".", "type": "Primitive Type", "name": "never"}, {"desc": "Memory allocation APIs", "type": "Module", "name": "alloc"}, {"desc": "This module implements the Any trait, which enables dynamic typing of any 'static type through runtime reflection.", "type": "Module", "name": "any"}, {"desc": "Implementations of things like Eq for fixed-length arrays up to a certain length. Eventually, we should be able to generalize to all lengths.", "type": "Module", "name": "array"}, {"desc": "Operations on ASCII strings and characters.", "type": "Module", "name": "ascii"}, {"desc": "A module for working with borrowed data.", "type": "Module", "name": "borrow"}, {"desc": "A pointer type for heap allocation.", "type": "Module", "name": "boxed"}, {"desc": "Shareable mutable containers.", "type": "Module", "name": "cell"}, {"desc": "A character type.", "type": "Module", "name": "char"}, {"desc": "The Clone trait for types that cannot be 'implicitly copied'.", "type": "Module", "name": "clone"}, {"desc": "Functionality for ordering and comparison.", "type": "Module", "name": "cmp"}, {"desc": "Collection types.", "type": "Module", "name": "collections"}, {"desc": "Traits for conversions between types.", "type": "Module", "name": "convert"}, {"desc": "The Default trait for types which may have meaningful default values.", "type": "Module", "name": "default"}, {"desc": "Inspection and manipulation of the process's environment.", "type": "Module", "name": "env"}, {"desc": "Traits for working with Errors.", "type": "Module", "name": "error"}, {"desc": "This module provides constants which are specific to the implementation of the f32 floating point data type.", "type": "Module", "name": "f32"}, {"desc": "This module provides constants which are specific to the implementation of the f64 floating point data type.", "type": "Module", "name": "f64"}, {"desc": "Utilities related to FFI bindings.", "type": "Module", "name": "ffi"}, {"desc": "Utilities for formatting and printing Strings.", "type": "Module", "name": "fmt"}, {"desc": "Filesystem manipulation operations.", "type": "Module", "name": "fs"}, {"desc": "Asynchronous values.", "type": "Module", "name": "future"}, {"desc": "Generic hashing support.", "type": "Module", "name": "hash"}, {"desc": "Hints to compiler that affects how code should be emitted or optimized.", "type": "Module", "name": "hint"}, {"desc": "The 8-bit signed integer type.", "type": "Module", "name": "i8"}, {"desc": "The 16-bit signed integer type.", "type": "Module", "name": "i16"}, {"desc": "The 32-bit signed integer type.", "type": "Module", "name": "i32"}, {"desc": "The 64-bit signed integer type.", "type": "Module", "name": "i64"}, {"desc": "The 128-bit signed integer type.", "type": "Module", "name": "i128"}, {"desc": "Traits, helpers, and type definitions for core I/O functionality.", "type": "Module", "name": "io"}, {"desc": "The pointer-sized signed integer type.", "type": "Module", "name": "isize"}, {"desc": "Composable external iteration.", "type": "Module", "name": "iter"}, {"desc": "Primitive traits and types representing basic properties of types.", "type": "Module", "name": "marker"}, {"desc": "Basic functions for dealing with memory.", "type": "Module", "name": "mem"}, {"desc": "Networking primitives for TCP/UDP communication.", "type": "Module", "name": "net"}, {"desc": "Additional functionality for numerics.", "type": "Module", "name": "num"}, {"desc": "Overloadable operators.", "type": "Module", "name": "ops"}, {"desc": "Optional values.", "type": "Module", "name": "option"}, {"desc": "OS-specific functionality.", "type": "Module", "name": "os"}, {"desc": "Panic support in the standard library.", "type": "Module", "name": "panic"}, {"desc": "Cross-platform path manipulation.", "type": "Module", "name": "path"}, {"desc": "Types that pin data to its location in memory.", "type": "Module", "name": "pin"}, {"desc": "The Rust Prelude.", "type": "Module", "name": "prelude"}, {"desc": "A module for working with processes.", "type": "Module", "name": "process"}, {"desc": "Manually manage memory through raw pointers.", "type": "Module", "name": "ptr"}, {"desc": "Single-threaded reference-counting pointers. 'Rc' stands for 'Reference Counted'.", "type": "Module", "name": "rc"}, {"desc": "Error handling with the Result type.", "type": "Module", "name": "result"}, {"desc": "A dynamically-sized view into a contiguous sequence, [T].", "type": "Module", "name": "slice"}, {"desc": "Unicode string slices.", "type": "Module", "name": "str"}, {"desc": "A UTF-8 encoded, growable string.", "type": "Module", "name": "string"}, {"desc": "Useful synchronization primitives.", "type": "Module", "name": "sync"}, {"desc": "Types and Traits for working with asynchronous tasks.", "type": "Module", "name": "task"}, {"desc": "Native threads.", "type": "Module", "name": "thread"}, {"desc": "Temporal quantification.", "type": "Module", "name": "time"}, {"desc": "The 8-bit unsigned integer type.", "type": "Module", "name": "u8"}, {"desc": "The 16-bit unsigned integer type.", "type": "Module", "name": "u16"}, {"desc": "The 32-bit unsigned integer type.", "type": "Module", "name": "u32"}, {"desc": "The 64-bit unsigned integer type.", "type": "Module", "name": "u64"}, {"desc": "The 128-bit unsigned integer type.", "type": "Module", "name": "u128"}, {"desc": "The pointer-sized unsigned integer type.", "type": "Module", "name": "usize"}, {"desc": "A contiguous growable array type with heap-allocated contents, written Vec<T>.", "type": "Module", "name": "vec"}, {"desc": "ExperimentalSupport for capturing a stack backtrace of an OS thread", "type": "Module", "name": "backtrace"}, {"desc": "ExperimentalCompiler intrinsics.", "type": "Module", "name": "intrinsics"}, {"desc": "ExperimentalContains struct definitions for the layout of compiler built-in types.", "type": "Module", "name": "raw"}, {"desc": "Asserts that a boolean expression is true at runtime.", "type": "Macro", "name": "assert"}, {"desc": "Asserts that two expressions are equal to each other (using PartialEq).", "type": "Macro", "name": "assert_eq"}, {"desc": "Asserts that two expressions are not equal to each other (using PartialEq).", "type": "Macro", "name": "assert_ne"}, {"desc": "Evaluates boolean combinations of configuration flags at compile-time.", "type": "Macro", "name": "cfg"}, {"desc": "Expands to the column number at which it was invoked.", "type": "Macro", "name": "column"}, {"desc": "Causes compilation to fail with the given error message when encountered.", "type": "Macro", "name": "compile_error"}, {"desc": "Concatenates literals into a static string slice.", "type": "Macro", "name": "concat"}, {"desc": "Prints and returns the value of a given expression for quick and dirty debugging.", "type": "Macro", "name": "dbg"}, {"desc": "Asserts that a boolean expression is true at runtime.", "type": "Macro", "name": "debug_assert"}, {"desc": "Asserts that two expressions are equal to each other.", "type": "Macro", "name": "debug_assert_eq"}, {"desc": "Asserts that two expressions are not equal to each other.", "type": "Macro", "name": "debug_assert_ne"}, {"desc": "Inspects an environment variable at compile time.", "type": "Macro", "name": "env"}, {"desc": "Prints to the standard error.", "type": "Macro", "name": "eprint"}, {"desc": "Prints to the standard error, with a newline.", "type": "Macro", "name": "eprintln"}, {"desc": "Expands to the file name in which it was invoked.", "type": "Macro", "name": "file"}, {"desc": "Creates a String using interpolation of runtime expressions.", "type": "Macro", "name": "format"}, {"desc": "Constructs parameters for the other string-formatting macros.", "type": "Macro", "name": "format_args"}, {"desc": "Parses a file as an expression or an item according to the context.", "type": "Macro", "name": "include"}, {"desc": "Includes a file as a reference to a byte array.", "type": "Macro", "name": "include_bytes"}, {"desc": "Includes a utf8-encoded file as a string.", "type": "Macro", "name": "include_str"}, {"desc": "A macro to test at runtime whether a CPU feature is available on x86/x86-64 platforms.", "type": "Macro", "name": "is_x86_feature_detected"}, {"desc": "Expands to the line number on which it was invoked.", "type": "Macro", "name": "line"}, {"desc": "Returns whether the given expression matches any of the given patterns.", "type": "Macro", "name": "matches"}, {"desc": "Expands to a string that represents the current module path.", "type": "Macro", "name": "module_path"}, {"desc": "Optionally inspects an environment variable at compile time.", "type": "Macro", "name": "option_env"}, {"desc": "Panics the current thread.", "type": "Macro", "name": "panic"}, {"desc": "Prints to the standard output.", "type": "Macro", "name": "print"}, {"desc": "Prints to the standard output, with a newline.", "type": "Macro", "name": "println"}, {"desc": "Stringifies its arguments.", "type": "Macro", "name": "stringify"}, {"desc": "Declare a new thread local storage key of type std::thread::LocalKey.", "type": "Macro", "name": "thread_local"}, {"desc": "Indicates unfinished code.", "type": "Macro", "name": "todo"}, {"desc": "DeprecatedUnwraps a result or propagates its error.", "type": "Macro", "name": "try"}, {"desc": "Indicates unimplemented code by panicking with a message of \"not implemented\".", "type": "Macro", "name": "unimplemented"}, {"desc": "Indicates unreachable code.", "type": "Macro", "name": "unreachable"}, {"desc": "Creates a Vec containing the arguments.", "type": "Macro", "name": "vec"}, {"desc": "Writes formatted data into a buffer.", "type": "Macro", "name": "write"}, {"desc": "Write formatted data into a buffer, with a newline appended.", "type": "Macro", "name": "writeln"}, {"desc": "ExperimentalInline assembly.", "type": "Macro", "name": "asm"}, {"desc": "ExperimentalConcatenates identifiers into one identifier.", "type": "Macro", "name": "concat_idents"}, {"desc": "ExperimentalSame as format_args, but adds a newline in the end.", "type": "Macro", "name": "format_args_nl"}, {"desc": "ExperimentalModule-level inline assembly.", "type": "Macro", "name": "global_asm"}, {"desc": "ExperimentalPrevents compilation if is_aarch64_feature_detected is used somewhere else than aarch64 targets.", "type": "Macro", "name": "is_aarch64_feature_detected"}, {"desc": "ExperimentalPrevents compilation if is_arm_feature_detected is used somewhere else than ARM targets.", "type": "Macro", "name": "is_arm_feature_detected"}, {"desc": "ExperimentalPrevents compilation if is_mips64_feature_detected is used somewhere else than MIPS64 targets.", "type": "Macro", "name": "is_mips64_feature_detected"}, {"desc": "ExperimentalPrevents compilation if is_mips_feature_detected is used somewhere else than MIPS targets.", "type": "Macro", "name": "is_mips_feature_detected"}, {"desc": "ExperimentalPrevents compilation if is_powerpc64_feature_detected is used somewhere else than PowerPC64 targets.", "type": "Macro", "name": "is_powerpc64_feature_detected"}, {"desc": "ExperimentalPrevents compilation if is_powerpc_feature_detected is used somewhere else than PowerPC targets.", "type": "Macro", "name": "is_powerpc_feature_detected"}, {"desc": "ExperimentalPrints passed tokens into the standard output.", "type": "Macro", "name": "log_syntax"}, {"desc": "ExperimentalEnables or disables tracing functionality used for debugging other macros.", "type": "Macro", "name": "trace_macros"}, {"desc": "The implementing type within a trait or impl block, or the current type within a type definition.", "type": "Keyword", "name": "Self"}, {"desc": "Cast between types, or rename an import.", "type": "Keyword", "name": "as"}, {"desc": "Return a Future instead of blocking the current thread.", "type": "Keyword", "name": "async"}, {"desc": "Suspend execution until the result of a Future is ready.", "type": "Keyword", "name": "await"}, {"desc": "Exit early from a loop.", "type": "Keyword", "name": "break"}, {"desc": "Compile-time constants and deterministic functions.", "type": "Keyword", "name": "const"}, {"desc": "Skip to the next iteration of a loop.", "type": "Keyword", "name": "continue"}, {"desc": "A Rust binary or library.", "type": "Keyword", "name": "crate"}, {"desc": "Name the type of a trait object.", "type": "Keyword", "name": "dyn"}, {"desc": "What to do when an if condition does not hold.", "type": "Keyword", "name": "else"}, {"desc": "A type that can be any one of several variants.", "type": "Keyword", "name": "enum"}, {"desc": "Link to or import external code.", "type": "Keyword", "name": "extern"}, {"desc": "A value of type bool representing logical false.", "type": "Keyword", "name": "false"}, {"desc": "A function or function pointer.", "type": "Keyword", "name": "fn"}, {"desc": "Iteration with in, trait implementation with impl, or higher-ranked trait bounds (for<'a>).", "type": "Keyword", "name": "for"}, {"desc": "Evaluate a block if a condition holds.", "type": "Keyword", "name": "if"}, {"desc": "Implement some functionality for a type.", "type": "Keyword", "name": "impl"}, {"desc": "Iterate over a series of values with for.", "type": "Keyword", "name": "in"}, {"desc": "Bind a value to a variable.", "type": "Keyword", "name": "let"}, {"desc": "Loop indefinitely.", "type": "Keyword", "name": "loop"}, {"desc": "Control flow based on pattern matching.", "type": "Keyword", "name": "match"}, {"desc": "Organize code into modules.", "type": "Keyword", "name": "mod"}, {"desc": "Capture a closure's environment by value.", "type": "Keyword", "name": "move"}, {"desc": "A mutable binding, reference, or pointer.", "type": "Keyword", "name": "mut"}, {"desc": "Make an item visible to others.", "type": "Keyword", "name": "pub"}, {"desc": "Bind by reference during pattern matching.", "type": "Keyword", "name": "ref"}, {"desc": "Return a value from a function.", "type": "Keyword", "name": "return"}, {"desc": "The receiver of a method, or the current module.", "type": "Keyword", "name": "self"}, {"desc": "A place that is valid for the duration of a program.", "type": "Keyword", "name": "static"}, {"desc": "A type that is composed of other types.", "type": "Keyword", "name": "struct"}, {"desc": "The parent of the current module.", "type": "Keyword", "name": "super"}, {"desc": "A common interface for a class of types.", "type": "Keyword", "name": "trait"}, {"desc": "A value of type bool representing logical true.", "type": "Keyword", "name": "true"}, {"desc": "Define an alias for an existing type.", "type": "Keyword", "name": "type"}, {"desc": "The Rust equivalent of a C-style union.", "type": "Keyword", "name": "union"}, {"desc": "Code or interfaces whose memory safety cannot be verified by the type system.", "type": "Keyword", "name": "unsafe"}, {"desc": "Import or rename items from other crates or modules.", "type": "Keyword", "name": "use"}, {"desc": "Add constraints that must be upheld to use an item.", "type": "Keyword", "name": "where"}, {"desc": "Loop while a condition is upheld.", "type": "Keyword", "name": "while"}]}
